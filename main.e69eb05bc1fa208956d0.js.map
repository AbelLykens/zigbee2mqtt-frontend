{"version":3,"sources":["webpack://zigbee2mqtt-frontend/./src/components/map/map.css?4978","webpack://zigbee2mqtt-frontend/./src/components/map/links.tsx","webpack://zigbee2mqtt-frontend/./src/utils.ts","webpack://zigbee2mqtt-frontend/./src/components/device-image/index.tsx","webpack://zigbee2mqtt-frontend/./src/components/device-image/style.css?fbce","webpack://zigbee2mqtt-frontend/./src/components/map/nodes.tsx","webpack://zigbee2mqtt-frontend/./src/components/map/types.ts","webpack://zigbee2mqtt-frontend/./src/store.ts","webpack://zigbee2mqtt-frontend/./src/api.ts","webpack://zigbee2mqtt-frontend/./src/actions/BridgeApi.ts","webpack://zigbee2mqtt-frontend/./src/actions/DeviceApi.ts","webpack://zigbee2mqtt-frontend/./src/actions/GroupsApi.ts","webpack://zigbee2mqtt-frontend/./src/actions/StateApi.ts","webpack://zigbee2mqtt-frontend/./src/actions/OtaApi.ts","webpack://zigbee2mqtt-frontend/./src/actions/BindApi.ts","webpack://zigbee2mqtt-frontend/./src/actions/TouchlinkApi.ts","webpack://zigbee2mqtt-frontend/./src/actions/ExtensionApi.ts","webpack://zigbee2mqtt-frontend/./src/actions/actions.ts","webpack://zigbee2mqtt-frontend/./src/components/button/index.tsx","webpack://zigbee2mqtt-frontend/./src/components/map/consts.ts","webpack://zigbee2mqtt-frontend/./src/components/spinner.tsx","webpack://zigbee2mqtt-frontend/./src/components/map/index.tsx","webpack://zigbee2mqtt-frontend/./src/components/modal/index.tsx","webpack://zigbee2mqtt-frontend/./src/components/device-control/index.tsx","webpack://zigbee2mqtt-frontend/./src/components/vendor-links/verndor-links.tsx","webpack://zigbee2mqtt-frontend/./src/components/power-source/index.tsx","webpack://zigbee2mqtt-frontend/./src/components/device-page/info.tsx","webpack://zigbee2mqtt-frontend/./src/components/device-picker/index.tsx","webpack://zigbee2mqtt-frontend/./src/components/endpoint-picker/index.tsx","webpack://zigbee2mqtt-frontend/./src/components/cluster-picker/index.tsx","webpack://zigbee2mqtt-frontend/./src/components/device-page/bind-row.tsx","webpack://zigbee2mqtt-frontend/./src/components/device-page/bind.tsx","webpack://zigbee2mqtt-frontend/./src/components/attribute-picker/index.tsx","webpack://zigbee2mqtt-frontend/./src/components/device-page/reporting-row.tsx","webpack://zigbee2mqtt-frontend/./src/components/device-page/reporting.tsx","webpack://zigbee2mqtt-frontend/./src/components/device-page/states.tsx","webpack://zigbee2mqtt-frontend/./src/components/device-page/type-guards.ts","webpack://zigbee2mqtt-frontend/./src/types.ts","webpack://zigbee2mqtt-frontend/./src/components/display-value/DisplayValue.tsx","webpack://zigbee2mqtt-frontend/./src/components/toggle/index.tsx","webpack://zigbee2mqtt-frontend/./src/components/features/base.tsx","webpack://zigbee2mqtt-frontend/./src/components/features/binary/binary.tsx","webpack://zigbee2mqtt-frontend/./src/components/features/climate/climate.tsx","webpack://zigbee2mqtt-frontend/./src/components/features/cover/cover.tsx","webpack://zigbee2mqtt-frontend/./src/components/color-editor/color-editor.tsx","webpack://zigbee2mqtt-frontend/./src/components/features/composite/color/color.tsx","webpack://zigbee2mqtt-frontend/./src/components/enum-editor/enum-editor.tsx","webpack://zigbee2mqtt-frontend/./src/components/features/enum/enum.tsx","webpack://zigbee2mqtt-frontend/./src/components/features/light/light.tsx","webpack://zigbee2mqtt-frontend/./src/components/features/lock/lock.tsx","webpack://zigbee2mqtt-frontend/./src/components/range-editor/range-editor.tsx","webpack://zigbee2mqtt-frontend/./src/components/features/numeric/numeric.tsx","webpack://zigbee2mqtt-frontend/./src/components/textual-editor/textual-editor.tsx","webpack://zigbee2mqtt-frontend/./src/components/features/textual/textual.tsx","webpack://zigbee2mqtt-frontend/./src/components/features/switch/switch.tsx","webpack://zigbee2mqtt-frontend/./src/components/features/composite/Feature.tsx","webpack://zigbee2mqtt-frontend/./src/components/features/composite/composite.tsx","webpack://zigbee2mqtt-frontend/./src/components/features/composite/FeatureWrapper.tsx","webpack://zigbee2mqtt-frontend/./src/components/device-page/exposes.tsx","webpack://zigbee2mqtt-frontend/./src/components/device-page/clusters.tsx","webpack://zigbee2mqtt-frontend/./src/components/device-page/settings.tsx","webpack://zigbee2mqtt-frontend/./src/components/device-page/index.tsx","webpack://zigbee2mqtt-frontend/./src/components/touchlink-page/index.tsx","webpack://zigbee2mqtt-frontend/./src/components/settings/index.tsx","webpack://zigbee2mqtt-frontend/./src/components/theme-switcher.tsx","webpack://zigbee2mqtt-frontend/./src/components/navbar/index.tsx","webpack://zigbee2mqtt-frontend/./src/hooks/useComponentVisible.tsx","webpack://zigbee2mqtt-frontend/./src/components/navbar/style.css?01da","webpack://zigbee2mqtt-frontend/./src/hooks/useOnClickOutside.tsx","webpack://zigbee2mqtt-frontend/./src/components/groups/RenameForm.tsx","webpack://zigbee2mqtt-frontend/./src/hooks/useInputChange.ts","webpack://zigbee2mqtt-frontend/./src/components/groups/index.tsx","webpack://zigbee2mqtt-frontend/./src/components/groups/style.css?e996","webpack://zigbee2mqtt-frontend/./src/components/zigbee/ActionTH.tsx","webpack://zigbee2mqtt-frontend/./src/components/zigbee/style.css?5857","webpack://zigbee2mqtt-frontend/./src/components/zigbee/TableHeader.tsx","webpack://zigbee2mqtt-frontend/./src/components/zigbee/TableRow.tsx","webpack://zigbee2mqtt-frontend/./src/components/zigbee/index.tsx","webpack://zigbee2mqtt-frontend/./src/components/logs-page/index.tsx","webpack://zigbee2mqtt-frontend/./src/components/ota-page/index.tsx","webpack://zigbee2mqtt-frontend/./src/components/ErrorBoundary.tsx","webpack://zigbee2mqtt-frontend/./src/components/dashboard-page/DeviceFooter.tsx","webpack://zigbee2mqtt-frontend/./src/components/dashboard-page/DashboardDevice.tsx","webpack://zigbee2mqtt-frontend/./src/components/dashboard-page/DashboardDevice.scss?8dc3","webpack://zigbee2mqtt-frontend/./src/components/dashboard-page/DashboardFeatureWrapper.tsx","webpack://zigbee2mqtt-frontend/./src/components/dashboard-page/index.tsx","webpack://zigbee2mqtt-frontend/./src/components/extensions-editor/index.tsx","webpack://zigbee2mqtt-frontend/./src/components/state-notifier/StateNotifier.tsx","webpack://zigbee2mqtt-frontend/./src/index.tsx"],"names":["Link","props","link","linkType","id","rest","className","strokeWidth","fill","LinkLabel","linkqualities","join","links","ref","useRef","useLayoutEffect","current","selectAll","data","length","map","Fragment","key","sourceIeeeAddr","targetIeeeAddr","xlinkHref","genDeviceDetailsLink","deviceIdentifier","toHex","input","padding","repeat","toString","substr","toUpperCase","lastSeen","elapsed","diff","undefined","Date","now","parse","sanitizeGraph","inGraph","nodes","Map","forEach","node","ieeeAddr","sort","a","b","relationship","src","source","dst","target","linkId","repeatedLink","get","type","push","linkquality","relationships","set","console","warn","Array","from","values","randomString","len","Math","random","scale","inputY","yRange","xRange","xMin","xMax","yMin","yMax","replacer","value","originalObject","this","dataType","entries","serialize","JSON","stringify","download","filename","blob","Blob","url","window","URL","createObjectURL","document","createElement","body","appendChild","href","setTimeout","click","revokeObjectURL","removeChild","getEndpoints","obj","endpoints","keys","members","g","endpoint","stringifyWithPreservingUndefinedAsNull","k","v","genericDeiviceImageFallback","device","AVALIABLE_GENERATORS","deviceName","definition","model","replace","modelName","model_id","imageGenerators","setimageGenerators","useState","deviceStatus","onImageError","newGenerators","shift","otaSpinner","update","state","title","interviewSpinner","interviewing","unseccessfullInterview","interview_completed","onError","getStarShape","innerCircleArms","innerRadius","outerRadius","angle","PI","totalArms","points","i","r","cos","sin","Node","Component","createRef","onMouseOut","onMouseOver","onDblClick","deviceType","cn","onDoubleClick","cx","cy","stroke","width","height","x","y","friendlyName","Nodes","toggle","simulation","root","dragForce","drag","on","event","d","active","alphaTarget","restart","fx","fy","call","updateDrag","ZigbeeRelationship","theme","localStorage","getItem","_initState","str","initialState","TOKEN_LOCAL_STORAGE_ITEM_NAME","AUTH_FLAG_LOCAL_STORAGE_ITEM_NAME","notyf","blacklistedMessages","showNotity","message","level","msg","status","isResponseWithStatus","error","success","apiUrl","location","host","pathname","requests","transactionNumber","send","topic","payload","debug","startsWith","transaction","transactionRndPreffix","promise","Promise","resolve","reject","socket","urlProvider","async","token","prompt","setItem","searchParams","append","procsessBridgeMessage","bridgeConfig","bridgeInfo","bridgeState","devicesMap","dev","Object","ieee_address","devices","groups","extensions","logs","newLogs","slice","log","every","val","test","response","networkGraphIsLoading","networkGraph","payloadData","touchlinkScanInProgress","touchlinkDevices","found","touchlinkIdentifyInProgress","touchlinkResetInProgress","resolvePromises","onClose","e","code","removeItem","reload","onMessage","deviceStates","newDeviceStates","addEventListener","has","delete","protocol","setPermitJoin","permit","friendly_name","updateBridgeConfig","options","restartBridge","renameDevice","to","homeassistantRename","removeDevice","force","block","configureDevice","name","setDeviceOptions","createGroup","group","removeGroup","addDeviceToGroup","removeDeviceFromGroup","renameGroup","oldName","newName","setStateValue","setDeviceState","getDeviceState","checkOTA","updateOTA","bindOp","operation","params","addBind","removeBind","touchlinkScan","touchlinkIdentify","touchlinkReset","updateExtensionCode","extension","newExtensions","filter","f","concat","saveExtensionCode","removeExtension","store","networkMapRequest","setState","routes","exportState","configureReport","config","setTheme","saveCurrentTheme","Button","onClick","item","promt","confirmed","confirm","children","linkTypes","NeigbhorIsParent","NeigbhorIsAChild","NeigbhorIsASibling","NoneOfTheAbove","role","parentOrChild","linkStrregth","includes","distancesMap","BrokenLink","Router2Router","Coordinator2Router","Coordinator2EndDevice","EndDevice2Router","getDistance","MapComponent","svgRef","visibleLinks","legendIsVisible","transform","updateNodes","selectedNode","container","linkLabel","l","x1","y1","apply","x2","y2","attr","computeLink","applyX","applyY","X","Y","ticked","everything","extent","scaleExtent","zoomHandler","linkedByIndex","Set","n","add","neighboring","computeOpacity","style","o","processHighlights","initPage","getBoundingClientRect","updateForces","onRequestClick","onLinkTypeFilterChange","stateVisibleLinks","checked","inValue","parseInt","distance","strength","viewBox","onChange","htmlFor","renderMapControls","renderMap","renderMessage","renderHelp","ModalHeader","ModalBody","ModalFooter","BodyEnd","super","el","split","classList","Modal","openModal","closeModal","remove","isOpen","prevProps","display","DeviceControlGroup","isRenameModalOpened","isDeviceRemovalModalOpened","renameParams","isHassRename","removeParams","onRenameClick","onRemoveClick","toggleRenameModal","toggleDeviceRemovalModal","onHassEntityIdChange","onFriendlyNameChange","onDeviceRemovalParamChange","homeassistant","checks","label","check","renderRenameButton","renderDeviceRemovalButton","normalizeModel","re","RegExp","VendorLink","supported","encodeURIComponent","vendor","toLowerCase","rel","ModelLink","anchor","detailsAcnchor","battery","batteryLow","showLevel","batteryClass","markdownLinkRegex","displayProps","render","if","result","exec","description","content","all","supports","network_address","power_source","battery_low","DeviceInfo","prop","DevicePicker","onSelect","find","hidden","devicesOptions","getDeviceDisplayName","groupOptions","EndpointPicker","disabled","hasOnlyOneEP","ep","unshift","clusterDescriptions","genPowerCfg","genScenes","genOnOff","genLevelCtrl","lightingColorCtrl","closuresWindowCovering","genMultistateInput","genGroups","genOta","touchlink","genIdentify","msTemperatureMeasurement","msIlluminanceMeasurement","msRelativeHumidity","msPressureMeasurement","msSoilMoisture","PickerType","isClusterGroup","clusters","ClusterPicker","pickerId","pickerType","MULTIPLE","isChecked","selectedValue","renderMultiPicker","renderSinglePicker","cluster","BindRow","stateRule","setSourceEp","sourceEp","setDestination","destination","setDestinationEp","destinationEp","setClusters","onBindOrUnBindClick","action","onUnBind","onBind","getBidningParams","rule","targeDevice","valid","idx","targetType","sourceEndpoints","getTarget","destinationEndpoints","possibleClusters","destEndpoint","output","isNew","isValidRule","rule2key","Bind","bidingRules","bindings","targetId","convertBidningsIntoNiceStructure","renderBody","AttributePicker","attrs","clusterDefinition","attributes","getClusters","currentCluster","availableClusters","requiredRuleFileds","field","ReportingRow","setCluster","setAttribute","attribute","changeHandler","applyRule","onApply","disableRule","maximum_report_interval","SINGLE","minimum_report_interval","required","placeholder","reportable_change","Reporting","reportingRules","reportings","configured_reportings","reportingRule","States","deviceState","isLightFeature","feature","isCompositeFeature","FeatureAccessMode","booleansMap","contact","occupancy","water_leak","tamper","_default","DisplayValue","mapValue","ControlButton","valueOn","valueOff","minimal","valueExists","showOnOffButtons","BaseViewer","property","unit","NoAccessError","access","value_off","value_on","ACCESS_WRITE","ACCESS_STATE","Composite","stepsConfiguration","position","tilt","toRGB","sourceFormat","Z","hue","saturation","rgbToTargetFormat","targetFormat","hex","pridePallete","format","steps","currentColor","setCurrentColor","useEffect","step","backgroundColor","minWidth","innerFeature","features","color","isPrimitive","onSelectChange","brightness","kelvin","min","max","setId","currentValue","setCurrentValue","showRange","valueAsNumber","onMouseUp","onBlur","presets","value_max","valueMax","value_min","valueMin","Feature","onRead","featureWrapperClass","FeatureWrapper","genericParams","wrapperParams","isBinaryFeature","isNumericFeature","isTextualFeature","isEnumFeature","isSwitchFeature","isCoverFeature","isLockFeature","isColorFeature","isClimateFeature","onApplyClick","_onRead","_onChange","groupedFeatures","epName","featuresGroup","isColor","isReadable","ACCESS_READ","Exposes","exposes","ClustersComp","Clusters","epData","genericUiSchema","DeviceSettings","updateConfig","formData","config_schema","configSchema","genericDeviceSettingsSchema","definitions","properties","genericPropNames","deviceConfig","device_options","updatedProp","schema","uiSchema","filteredDeviceConfig","valueType","match","getSchemaAndConfig","onSubmit","DevicePage","tab","getDeviceLinks","activeClassName","renderContent","devicePageWithRouter","TouchlinkPage","onIdentifyClick","onResetClick","touchlinkInProgress","scope","touchlinkDevice","channel","renderNoDevices","renderTouchlinkDevices","ROOT_KEY_NAME","ingoredFields","validJsonSchemasAsTabs","removePropertiesFromSchema","names","tabs","SettingsPage","keyName","onSettingsSave","renderCategoriesTabs","renderSwitcher","renderTools","renderBridgeInfo","renderAbout","renderSettings","renderDonate","zigbee2mqttVersion","version","zigbee2mqttCommit","commit","rows","coordinator","meta","revision","row","oneOf","isValidKeyToRenderAsTab","originalConfig","configAndSchema","currentSchema","currentConfig","ignoreTabNames","getSettingsTabs","preventDefault","getSettingsInfo","renderSettingsTabs","SettingsPageWithRouter","ThemeSwitcher","switcher","themes","currentTheme","useThemeSwitcher","isDarkMode","light","dark","urls","exact","StartStopJoinButton","isComponentVisible","setIsComponentVisible","initialIsVisible","handleHideDropdown","handleClickOutside","contains","removeEventListener","useComponentVisible","selectedRouter","setSelectedRouter","routers","selectAndHide","permit_join","show","navbarIsVisible","setnavbarIsVisible","handler","listener","useOnClickOutside","restart_required","RenameGroupForm","onRename","modalIsOpened","setModalIsOpened","renameGroupForm","handleInputChange","setInput","currentTarget","useInputChange","DeviceGroupRow","groupAddress","rowNumber","getDeviceObj","DeviceGroup","onRemove","deviceFriendlyName","groupMemebershipInfo","AddDeviceToGroup","onDeviceSelect","onEpChange","deviceObj","GroupsPage","newGroupName","newGroupId","onGroupCreateSubmit","groupFriendlyName","reverse","renderGroupCreationForm","renderGroups","ActionTH","stopPropagation","column","currentDirection","renderArrow","TableHeader","sortColumn","sortDirection","onSortChange","lastSeenIsAvaliable","TableRow","last_seen","storeKey","ZigbeeTable","saveState","storeData","handleLongLoading","size","sortDir","currentTime","sortedTableData","storedState","restored","restoreState","tableData","renderDevicesTable","renderError","advanced","ALL","TextWrapper","text","Highlighted","highlight","trim","regex","parts","part","logLevels","LogsPage","search","logLevel","_search","renderSearch","StateCell","progress","secs","remaining","floor","OtaRow","date_code","software_build_id","OtaPage","checkAllOTA","getAllOtaDevices","supports_ota","otaApi","otaDevices","colSpan","ErrorBoundary","donwloadState","hasError","githubUrlParams","referrer","stack","githubUrl","URLSearchParams","prevPathname","footerFeatures","lastSeenTime","rederedFeatures","typeToClassMap","humidity","illuminance","pressure","co2","voltage","power","energy","frequency","smoke","radiation_dose_per_hour","radioactive_events_per_minute","power_factor","color_xy","color_hs","color_temp","illuminance_lux","soil_moisture","DashboardFeatureWrapper","icon","classes","temperature","getTemperatureIcon","getGenericFeatureIcon","genericRendererIgnoredNames","whitelistFeatureNames","whitelistFeatureTypes","nullish","onlyValidFeaturesForDashboard","filteredOutFeature","isArray","filteredFeatures","ExtensionsEditorPage","loadExtension","currentExtension","onExtensionCodeChange","onSaveClick","addNewExtension","ts","templatedCode","editorTheme","mode","editorProps","$blockScrolling","maxLines","Infinity","showPrintMargin","renderEditor","modalOpened","setModalOpened","ThemeSwitcherProvider","themeMap","defaultTheme","path","getElementById"],"mappings":"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","file":"main.e69eb05bc1fa208956d0.js","sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"_1TK12NlMUcpu0IZGw5KG9F\",\"img\":\"-vLZFy4QqTaA5Lql2j7WL\",\"node\":\"_3VABKCYaUBV0N55MRkEiCg\",\"link\":\"_2MMYgLsCQ5mPT-AJSdZ4Uz\",\"linkLabel\":\"EFSV-Lj6sJyoW14QA3ig0\",\"links\":\"_3m9RTJKJZqiJx1UmLLzi4\",\"nodes\":\"_1RxBn1bAxqYxk5W0mPwZMS\",\"EndDevice\":\"JhUbmgThutQMk8laPcsxg\",\"Coordinator\":\"_3F14ZWmKtSPPHai2y_MRRj\",\"Router\":\"_1I1ZcuMgRbn_B5HXF9Z2mw\",\"BrokenLink\":\"_3FeEi6FG3R9pYpboNF-OBu\",\"Coordinator2Router\":\"_2cFMSmedVqD5hjj2K7XpsQ\",\"Router2Coordinator\":\"_3KnTt0kzrMwLh56UMBBqwe\",\"Router2Router\":\"_3HeSfltIQjH_mQxhaoHnCs\",\"Coordinator2EndDevice\":\"_2zGuiMZ7r-Z4mfRvCVQEAp\",\"EndDevice2Coordinator\":\"_35uGMHQCj1Sx5FyJk5-Ec1\",\"Router2EndDevice\":\"_1nD8O-bIFFZWctv6x4zD8j\",\"EndDevice2Router\":\"_2tVxslI3DwN1gBA6s3V24b\",\"foreignObject\":\"_1PgTRqMkYD7R1RqIF7R5ni\",\"offline\":\"_3goiiMv86rV5wazL6jDpjU\",\"controls\":\"RIAc5GeET4TLTKyCVy7yK\"};","import { LinkI } from \"./types\";\nimport React, { Fragment, FunctionComponent, RefObject, useLayoutEffect, useRef } from \"react\";\nimport style from \"./map.css\";\nimport cx from \"classnames\";\nimport { select } from \"d3-selection\";\n\ninterface LinkProps {\n    link: LinkI;\n    id?: string;\n}\n\nconst Link: FunctionComponent<LinkProps> = props => {\n    const { link: { linkType }, id, ...rest } = props;\n    return <path\n        id={id}\n        className={cx(style.link, style[linkType])}\n        strokeWidth={1}\n        fill=\"transparent\"\n        {...rest}\n    />;\n};\n\ninterface LinkLabelProps extends LinkProps {\n    xlinkHref: string;\n}\n\nconst LinkLabel: FunctionComponent<LinkLabelProps> = props => {\n    const { link } = props;\n    return <text className={style.linkLabel}>{link.linkqualities.join('/')}</text>;\n};\n\ninterface LinksPros {\n    links: LinkI[];\n}\n\nconst Links: FunctionComponent<LinksPros> = props => {\n    const { links } = props;\n    const ref = useRef<SVGGElement>();\n    useLayoutEffect(() => {\n        select(ref.current as SVGGElement).selectAll(`.${style.link}`).data(links);\n        select(ref.current as SVGGElement).selectAll(`.${style.linkLabel}`).data(links);\n    }, [links.length]);\n\n    return (\n        <g ref={ref as RefObject<SVGGElement>} className={style.links}>\n            {links.map((link: LinkI) =>\n                <Fragment key={`fragment${link.sourceIeeeAddr}-${link.targetIeeeAddr}-${link.linkType}`}>\n                    <Link\n                        id={`edgepath${link.sourceIeeeAddr}-${link.targetIeeeAddr}-${link.linkType}`}\n                        link={link}\n                    />\n                    <LinkLabel\n                        xlinkHref={`#edgepath${link.sourceIeeeAddr}-${link.targetIeeeAddr}-${link.linkType}`}\n                        link={link}\n                    />\n                </Fragment>\n            )}\n        </g>\n    );\n};\nexport default Links;\n","\nimport { Device, Endpoint } from \"./types\";\nimport { GraphI, LinkI, NodeI } from \"./components/map/types\";\nimport { format, TDate } from 'timeago.js';\nimport { Group } from \"./store\";\nimport { Theme } from \"./components/theme-switcher\";\n\nexport const genDeviceDetailsLink = (deviceIdentifier: string | number): string => (`/device/${deviceIdentifier}`);\n\nexport const toHex = (input: number, padding = 4): string => {\n    return `0x${(`${'0'.repeat(padding)}${input.toString(16)}`).substr(-1 * padding).toUpperCase()}`;\n};\n\n\nexport const toHHMMSS = (secs: number): string => {\n    if (!secs) {\n        return 'N/A';\n    }\n    const hours = Math.floor(secs / 3600);\n    const minutes = Math.floor(secs / 60) % 60;\n    const seconds = Math.floor(secs % 60);\n\n    return [hours, minutes, seconds]\n        .map(v => v < 10 ? `0${v}` : v)\n        .filter((v, i) => v !== \"00\" || i > 0)\n        .join(\":\");\n};\n\nexport type CallbackHandler<T> = (err: boolean, res: T) => void;\nexport interface ApiResponse<T> {\n    success: boolean;\n    result: T;\n}\n\nexport const lastSeen = (lastSeen?: string | number, elapsed?: number): string => {\n    if (!lastSeen && !elapsed) {\n        return \"N/A\";\n    }\n    let diff: TDate;\n    if (elapsed !== undefined) {\n        diff = Date.now() - elapsed;\n    } else {\n        if (typeof lastSeen === \"string\") {\n            diff = Date.parse(lastSeen);\n        } else {\n            diff = new Date(lastSeen as number);\n        }\n    }\n    return format(diff);\n};\n\n\nexport const sanitizeGraph = (inGraph: GraphI): GraphI => {\n    const nodes = {};\n    const links = new Map<string, any>();\n\n    inGraph.nodes.forEach(node => {\n        nodes[node.ieeeAddr] = node;\n    });\n\n    inGraph.links.sort((a, b) => a.relationship - b.relationship).forEach(link => {\n        const src: NodeI = nodes[link.source.ieeeAddr];\n        const dst: NodeI = nodes[link.target.ieeeAddr];\n        if (src && dst) {\n            const linkId = [link.source.ieeeAddr, link.target.ieeeAddr].sort().join('');\n            const repeatedLink = links.get(linkId);\n            const linkType = [src.type, dst.type].join('2');\n            if (repeatedLink) {\n                repeatedLink.linkqualities.push(link.linkquality);\n                repeatedLink.relationships.push(link.relationship);\n            } else {\n                links.set(linkId, { ...link, ...{ source: link.source.ieeeAddr, linkType, target: link.target.ieeeAddr, linkqualities: [link.linkquality], relationships: [link.relationship] } });\n            }\n        } else {\n            console.warn(\"Broken link\", link);\n        }\n    });\n\n    inGraph.links = Array.from(links.values());\n    return inGraph;\n};\n\nexport const getDeviceDisplayName = (device: Device): string => {\n    return `${device.friendly_name} ${device.definition?.model ? `(${device.definition?.model})` : ''}`;\n};\n\nexport const randomString = (len: number): string => Math.random().toString(36).substr(2, len);\n\nexport const isSecurePage = (): boolean => location.protocol === 'https:';\n\n\nexport const scale = (inputY: number, yRange: Array<number>, xRange: Array<number>): number => {\n    const [xMin, xMax] = xRange;\n    const [yMin, yMax] = yRange;\n\n    const percent = (inputY - yMin) / (yMax - yMin);\n    const outputX = percent * (xMax - xMin) + xMin;\n\n    return outputX;\n};\n\n\n\n\nfunction replacer(key: string, value: object) {\n    const originalObject = this[key];\n    if (originalObject instanceof Map) {\n        return {\n            dataType: 'Map',\n            value: Array.from(originalObject.entries()),\n        };\n    } else {\n        return value;\n    }\n}\n\nfunction reviver(key: string, value: { dataType: string; value: Iterable<readonly [unknown, unknown]>; }) {\n    if (typeof value === 'object' && value !== null) {\n        if (value.dataType === 'Map') {\n            return new Map(value.value);\n        }\n    }\n    return value;\n}\n\nexport const serialize = (data: object) => {\n    return JSON.stringify(data, replacer);\n}\n\nexport const deSerialize = (str: string) => {\n    return JSON.parse(str, reviver);\n}\n\n\nexport const download = (data: object, filename: string): void => {\n    const blob = new Blob([serialize(data)], { type: 'octet/stream' });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    document.body.appendChild(a);\n    a.href = url;\n    a.download = filename;\n\n    setTimeout(() => {\n        a.click();\n        window.URL.revokeObjectURL(url);\n        document.body.removeChild(a);\n    }, 1);\n\n}\n\nexport const sanitizeZ2MDeviceName = (deviceName?: string): string => deviceName ? deviceName.replace(/:|\\s|\\//g, \"-\") : \"NA\";\n\n\nexport const getEndpoints = (obj: Device | Group): Endpoint[] => {\n    if (!obj) {\n        return [];\n    } else if ((obj as Device).endpoints) {\n        return Array.from((obj as Device).endpoints.keys());\n    } else if ((obj as Group).members) {\n        return (obj as Group).members.map(g => g.endpoint);\n    }\n    return [];\n}\n\n\nexport const stringifyWithPreservingUndefinedAsNull = (data: object): string => JSON.stringify(data, (k, v) => v === undefined ? null : v)\n\n\n\nexport const isOnlyOneBitIsSet = (b: number): number | boolean => {\n    return b && !(b & (b - 1));\n}\n\nexport const getCurrentTheme = (): Theme => localStorage.getItem('theme') as Theme ?? 'light';\nexport const saveCurrentTheme = (theme: string) => localStorage.setItem('theme', theme);\n","import React, { FunctionComponent, ImgHTMLAttributes, useState } from \"react\";\nimport genericDevice from \"../../images/generic-zigbee-device.png\";\nimport { Device, DeviceState } from \"../../types\";\nimport cx from \"classnames\";\nimport { sanitizeZ2MDeviceName } from \"../../utils\";\nimport style from \"./style.css\";\ntype DeviceImageProps = {\n    device: Device;\n    deviceStatus?: DeviceState;\n    type?: \"img\" | \"svg\";\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst genericDeiviceImageFallback = (device: Device): string => genericDevice;\nconst genSlsDeviceImageUrlZ2M = (device: Device): string => `https://www.zigbee2mqtt.io/images/devices/${sanitizeZ2MDeviceName(device?.definition?.model)}.jpg`;\n\nconst sanitizeModelIDForImageUrl = (modelName: string): string => modelName?.replace(\"/\", \"_\");\n\nexport const genSlsDeviceImageUrlSLS = (device: Device): string => (`https://slsys.github.io/Gateway/devices/png/${sanitizeModelIDForImageUrl(device.model_id)}.png`);\n\n\nconst AVALIABLE_GENERATORS = [\n    genSlsDeviceImageUrlZ2M, genSlsDeviceImageUrlSLS, genericDeiviceImageFallback\n]\n\nconst DeviceImage: FunctionComponent<DeviceImageProps & ImgHTMLAttributes<HTMLDivElement | SVGImageElement>> = (props) => {\n    const [imageGenerators, setimageGenerators] = useState(AVALIABLE_GENERATORS);\n    const { device, deviceStatus, type = \"img\", className, ...rest } = props;\n    let src = genericDeiviceImageFallback(device);\n    if (device?.definition?.model && imageGenerators.length) {\n        src = imageGenerators[0](device);\n    }\n\n    const onImageError = () => {\n        const newGenerators = [...imageGenerators];\n        newGenerators.shift();\n        setimageGenerators(newGenerators);\n    };\n    const otaSpinner = deviceStatus?.update?.state === \"updating\" ? <i title=\"Updating firmware\" className=\"fa fa-sync fa-spin position-absolute bottom-0 right-0\" /> : null;\n    const interviewSpinner = device.interviewing ? <i title=\"Interviewing\" className=\"fa fa-spinner fa-spin position-absolute bottom-0 right-0\" /> : null;\n    const unseccessfullInterview = !device.interviewing && !device.interview_completed ? <i title=\"Interview failed\" className=\"fa fa-exclamation-triangle position-absolute top-0 right-0 text-danger\" /> : null;\n    switch (type) {\n        case \"svg\":\n            return src ? <image {...rest} onError={onImageError} href={src} /> : null;\n        case \"img\":\n        default:\n            return src ? <div className={cx(className, \"position-relative\")} {...rest}>\n                <img onError={onImageError} src={src} className={style.img} />\n                {interviewSpinner}\n                {otaSpinner}\n                {unseccessfullInterview}\n            </div> : null;\n    }\n}\nexport default DeviceImage;\n","// extracted by mini-css-extract-plugin\nexport default {\"img\":\"_2MpGRLox3gkk1O7Ojpw0KG\"};","import React, { Component, createRef, RefObject } from \"react\";\nimport { LinkI, NodeI } from \"./types\";\nimport cx from \"classnames\";\nimport style from \"./map.css\";\nimport { MouseEventsResponderNode } from \".\";\nimport { Device } from \"../../types\";\nimport DeviceImage from \"../device-image\";\nimport { Simulation } from \"d3-force\";\nimport { select } from \"d3-selection\";\nimport { drag } from \"d3-drag\";\n\n\nexport const getStarShape = (innerCircleArms: number, innerRadius: number, outerRadius: number): string => {\n    const centerX = 15;\n    const centerY = 15;\n\n    const angle = Math.PI / innerCircleArms;\n    const angleOffsetToCenterStar = 60;\n    const totalArms = innerCircleArms * 2;\n    let points = \"\";\n    for (let i = 0; i < totalArms; i++) {\n        const isEvenIndex = i % 2 == 0;\n        const r = isEvenIndex ? outerRadius : innerRadius;\n        const currX = centerX + Math.cos(i * angle + angleOffsetToCenterStar) * r;\n        const currY = centerY + Math.sin(i * angle + angleOffsetToCenterStar) * r;\n        points += `${currX}, ${currY} `;\n    }\n    return points;\n};\n\ninterface NodeProps extends MouseEventsResponderNode {\n    node: NodeI;\n}\n\nconst offlineTimeout = 3600 * 2;\n\nexport const isOnline = (device: Device): boolean => {\n\n    return true; //Date.now() - device.lastSeen < offlineTimeout;\n};\n\nclass Node extends Component<NodeProps, {}> {\n    ref = createRef<SVGElement>();\n\n    componentDidMount(): void {\n        const { current } = this.ref;\n        const { node } = this.props;\n        select(current as SVGElement).data([node]);\n    }\n\n    onMouseOut = (): void => {\n        const { node, onMouseOut } = this.props;\n        this.ref && this.ref.current && onMouseOut && onMouseOut(node, this.ref.current);\n    };\n\n    onMouseOver = (): void => {\n        const { node, onMouseOver } = this.props;\n        this.ref && this.ref.current && onMouseOver && onMouseOver(node, this.ref.current);\n    };\n\n    onDblClick = (): void => {\n        const { node, onDblClick } = this.props;\n        this.ref && this.ref.current && onDblClick && onDblClick(node, this.ref.current);\n    };\n\n    render() {\n\n        const { node } = this.props;\n        const { onMouseOver, onMouseOut, onDblClick } = this;\n        const deviceType = node.type as string;\n        const cn = cx(style.node, style[deviceType]); //{ [style.offline]: !isOnline(node.device, time) }\n        return (<g className={cn}\n            ref={this.ref as RefObject<SVGImageElement>}\n            onMouseOver={onMouseOver}\n            onMouseOut={onMouseOut}\n            onDoubleClick={onDblClick}\n        >\n\n            {\n                node.type === \"Coordinator\" ? (\n                    <>\n                        <circle cx={15} cy={16} r={24} fill={\"#fff\"} stroke={\"blue\"} strokeWidth={1} />\n                        <polygon\n                            stroke=\"blue\"\n                            strokeWidth={1}\n                            points={getStarShape(5, 5, 14) as string}\n                        />\n                    </>\n                ) : (\n                        <>\n                            <circle cx={16} cy={17} r={24} fill={\"#fff\"} stroke={\"blue\"} strokeWidth={1} />\n                            <DeviceImage\n                                type=\"svg\"\n                                width={32}\n                                height={32}\n                                device={node as unknown as Device}\n                                className={`${style.img}`}\n                            />\n                        </>\n                    )\n            }\n            <text x={45} y={25}>{node.friendlyName}</text>\n        </g>);\n\n    }\n}\n\ninterface NodesProps extends MouseEventsResponderNode {\n    root: SVGElement;\n    nodes: NodeI[];\n    simulation: Simulation<NodeI, LinkI>;\n}\n\ntype NodesState = {\n    toggle: boolean;\n}\n\nexport default class Nodes extends Component<NodesProps, NodesState> {\n    state: Readonly<NodesState> = {\n        toggle: false\n    }\n    updateDrag(): void {\n        const { simulation, root } = this.props;\n        const dragForce = drag<SVGCircleElement, NodeI>()\n            .on(\"start\", (event, d) => {\n                if (!event.active) {\n                    simulation.alphaTarget(0.3).restart();\n                }\n\n                d.fx = d.x;\n                d.fy = d.y;\n            })\n            .on(\"drag\", ({ x, y }, d) => {\n                d.fx = x;\n                d.fy = y;\n            })\n            .on(\"end\", (event, d) => {\n                if (!event.active) {\n                    simulation.alphaTarget(0);\n                }\n                d.fx = undefined;\n                d.fy = undefined;\n            });\n        select(root).selectAll<SVGCircleElement, NodeI>(`.${style.node}`)\n            .call(dragForce);\n    }\n\n    componentDidMount(): void {\n        this.updateDrag();\n    }\n\n    componentDidUpdate(): void {\n        this.updateDrag();\n    }\n\n\n\n    render() {\n        const { nodes, onMouseOut, onMouseOver } = this.props;\n        return (\n            <g className={style.nodes}>\n                {nodes.map((node: NodeI) => (\n                    <Node\n                        onMouseOut={onMouseOut}\n                        onMouseOver={onMouseOver}\n                        key={node.ieeeAddr}\n                        node={node}\n                    />\n                ))}\n            </g>\n        );\n    }\n}\n","import { SimulationLinkDatum, SimulationNodeDatum } from \"d3-force\";\nimport { DeviceType, DeviceDefinition } from \"../../types\";\n\nexport interface NodeI extends SimulationNodeDatum {\n    ieeeAddr: string;\n    friendlyName?: string;\n    type?: DeviceType;\n    failed?: string[];\n    lastSeen?: number;\n    definition?: DeviceDefinition;\n}\n\nexport type LinkType =\n    \"Coordinator2EndDevice\" |\n    \"EndDevice2Coordinator\" |\n\n    \"Coordinator2Router\" |\n    \"Router2Coordinator\" |\n\n    \"EndDevice2Router\" |\n    \"Router2EndDevice\" |\n\n    \"Router2Router\" |\n\n    \"BrokenLink\";\n\nexport interface Source extends SimulationNodeDatum {\n    ieeeAddr: string;\n}\n\nexport interface Target extends SimulationNodeDatum {\n    ieeeAddr: string;\n}\nexport enum ZigbeeRelationship {\n    NeigbhorIsParent,\n    NeigbhorIsAChild,\n    NeigbhorIsASibling,\n    NoneOfTheAbove,\n    NeigbhorIsAFormerChild\n}\n\nexport interface LinkI extends SimulationLinkDatum<NodeI> {\n    source: Source;\n    target: Target;\n    linkquality: number;\n    linkqualities: number[];\n    depth: number;\n    routes: unknown[];\n    sourceIeeeAddr: string;\n    targetIeeeAddr: string;\n    sourceNwkAddr: number;\n    lqi: number;\n    relationship: ZigbeeRelationship;\n    relationships: ZigbeeRelationship[];\n    linkType: LinkType;\n}\n\nexport interface GraphI {\n    nodes: NodeI[];\n    links: LinkI[];\n}\n","import createStore from \"unistore\";\nimport devtools from \"unistore/devtools\";\nimport initialState from './initialState.txt';\n\n\nimport { Device, DeviceState, BridgeConfig, BridgeInfo, TouchLinkDevice, BridgeState } from \"./types\";\nimport { GraphI } from \"./components/map/types\";\nimport { deSerialize, getCurrentTheme } from \"./utils\";\nimport { Theme } from \"./components/theme-switcher\";\n\n\nexport interface GroupAddress {\n    endpoint: number;\n    ieee_address: string;\n}\n\nexport interface Group {\n    id: number;\n    friendly_name: string;\n    members: GroupAddress[];\n}\n\nexport interface LogMessage {\n    level: \"error\" | \"info\" | \"warning\";\n    message: string;\n}\n\nexport type Extension = {\n    name: string;\n    code: string;\n};\nexport interface GlobalState {\n    devices: Map<string, Device>;\n    deviceStates: Map<string, DeviceState>;\n    touchlinkDevices: TouchLinkDevice[];\n    touchlinkScanInProgress: boolean;\n    touchlinkIdentifyInProgress: boolean;\n    touchlinkResetInProgress: boolean;\n    networkGraph: GraphI;\n    networkGraphIsLoading: boolean;\n    groups: Group[];\n    bridgeConfig: BridgeConfig;\n    bridgeInfo: BridgeInfo;\n    bridgeState: BridgeState;\n    logs: LogMessage[];\n    extensions: Extension[];\n    theme: Theme;\n};\nconst theme = getCurrentTheme();\nconst _initState = deSerialize(initialState) as GlobalState;\n_initState.theme = theme;\n\nconst _store = createStore(_initState);\nconst store = process.env.NODE_ENV === 'production' ?  _store : devtools(_store);\n\nexport default store;\n","import ReconnectingWebSocket from \"reconnecting-websocket\";\nimport store, { Extension, Group, LogMessage } from \"./store\";\nimport { BridgeConfig, BridgeInfo, TouchLinkDevice, Device, DeviceState, BridgeState } from './types';\nimport { sanitizeGraph, isSecurePage, randomString, stringifyWithPreservingUndefinedAsNull } from \"./utils\";\nimport { Notyf } from \"notyf\";\nimport { GraphI } from \"./components/map/types\";\n\nimport orderBy from \"lodash/orderBy\";\n\n\nconst MAX_LOGS_RECORDS_IN_BUFFER = 100;\nconst TOKEN_LOCAL_STORAGE_ITEM_NAME = \"z2m-token\";\nconst AUTH_FLAG_LOCAL_STORAGE_ITEM_NAME = \"z2m-auth\";\nconst UNAUTHORIZED_ERROR_CODE = 4401;\n\nconst notyf = new Notyf();\n\ninterface Message {\n    topic: string;\n    payload: string | object | object[] | string[];\n}\n\nconst blacklistedMessages: RegExp[] = [\n    /MQTT publish/\n];\n\nconst isLogMessage = (msg: LogMessage | ResponseWithStatus): msg is LogMessage => {\n    return (msg as LogMessage).level !== undefined && (msg as LogMessage).message !== undefined;\n}\n\nconst isResponseWithStatus = (msg: LogMessage | ResponseWithStatus): msg is ResponseWithStatus => {\n    return (msg as ResponseWithStatus).status !== undefined;\n}\n\nconst showNotity = (data: LogMessage | ResponseWithStatus): void => {\n    let message = \"\", level = \"\";\n    if (isLogMessage(data)) {\n        message = data.message;\n        level = data.level;\n    } else if (isResponseWithStatus(data)) {\n        switch (data.status) {\n            case \"error\":\n                level = \"error\";\n                message = data.error as string;\n                break;\n            default:\n                break;\n        }\n    }\n\n    switch (level) {\n        case \"error\":\n        case \"warning\":\n            notyf.error(message);\n            break;\n        case \"info\":\n            notyf.success(message);\n            break;\n\n        default:\n            break;\n    }\n};\n\ninterface ResponseWithStatus {\n    status: \"ok\" | \"error\";\n    data: unknown;\n    error?: string;\n    transaction?: string;\n}\ninterface TouchllinkScanResponse extends ResponseWithStatus {\n    data: {\n        found: TouchLinkDevice[];\n    };\n}\ninterface ExtensionReadResponse extends ResponseWithStatus {\n    data: {\n        name: string;\n        content: string;\n    };\n}\ninterface Callable {\n    (): void;\n}\n\nclass Api {\n    url: string;\n    socket: ReconnectingWebSocket;\n    requests: Map<string, [Callable, Callable]> = new Map<string, [Callable, Callable]>();\n    transactionNumber = 1;\n    transactionRndPreffix: string;\n    constructor(url: string) {\n        this.url = url;\n        this.transactionRndPreffix = randomString(5);\n    }\n    send = (topic: string, payload: object): Promise<void> => {\n        console.debug(\"Calling API\", { topic, payload });\n\n        if (topic.startsWith('bridge/request/')) {\n            const transaction = `${this.transactionRndPreffix}-${this.transactionNumber++}`;\n            const promise = new Promise<void>((resolve, reject) => {\n                this.requests.set(transaction, [resolve, reject]);\n            });\n            this.socket.send(stringifyWithPreservingUndefinedAsNull({ topic, payload: { ...payload, transaction } }));\n            return promise;\n        } else {\n            this.socket.send(stringifyWithPreservingUndefinedAsNull({ topic, payload }));\n            return Promise.resolve();\n        }\n    }\n\n    urlProvider = async () => {\n        const url = new URL(this.url)\n        let token = localStorage.getItem(TOKEN_LOCAL_STORAGE_ITEM_NAME);\n        const authRequired = !!localStorage.getItem(AUTH_FLAG_LOCAL_STORAGE_ITEM_NAME);\n        if (authRequired) {\n            if (!token) {\n                token = prompt(\"enter your z2m admin token\");\n                localStorage.setItem(TOKEN_LOCAL_STORAGE_ITEM_NAME, token as string);\n            }\n            url.searchParams.append(\"token\", token as string);\n        }\n        return url.toString();\n    }\n\n    connect(): void {\n        this.socket = new ReconnectingWebSocket(this.urlProvider);\n        this.socket.addEventListener(\"message\", this.onMessage);\n        this.socket.addEventListener(\"close\", this.onClose);\n    }\n    private procsessBridgeMessage = (data: Message): void => {\n        switch (data.topic) {\n            case \"bridge/config\":\n                store.setState({\n                    bridgeConfig: data.payload as BridgeConfig\n                });\n                break;\n\n            case \"bridge/info\":\n                store.setState({\n                    bridgeInfo: data.payload as BridgeInfo\n                });\n                break;\n\n            case \"bridge/state\":\n                store.setState({\n                    bridgeState: data.payload as BridgeState\n                });\n                break;\n\n            case \"bridge/devices\":\n                {\n                    const devicesMap = new Map();\n                    orderBy((data.payload as Device[]), \"friendly_name\").forEach((device) => {\n                        const dev = { ...device };\n                        dev.endpoints = new Map(Object.entries(device.endpoints));\n                        devicesMap.set(device.ieee_address, dev);\n                    });\n                    store.setState({\n                        devices: devicesMap\n                    })\n                }\n                break;\n\n            case \"bridge/groups\":\n                store.setState({\n                    groups: data.payload as Group[]\n                })\n                break;\n\n            case \"bridge/event\":\n                break;\n\n            case \"bridge/extensions\":\n                {\n                    const extensions = data.payload as Extension[];\n                    store.setState({ extensions });\n                }\n                break;\n\n            case \"bridge/logging\":\n                {\n                    const { logs } = store.getState();\n                    const newLogs = [...logs.slice(-MAX_LOGS_RECORDS_IN_BUFFER)];\n                    newLogs.push(data.payload as LogMessage);\n                    store.setState({ logs: newLogs });\n                    const log = data.payload as LogMessage;\n                    if (blacklistedMessages.every(val => !val.test(log.message))) {\n                        showNotity(log);\n                    }\n                }\n                break;\n\n            case \"bridge/response/networkmap\":\n                {\n                    const response = data.payload as ResponseWithStatus;\n                    if (response.status == \"ok\") {\n                        const { value } = response.data as { value: unknown };\n                        store.setState({\n                            networkGraphIsLoading: false,\n                            networkGraph: sanitizeGraph(value as GraphI)\n                        });\n                    } else {\n                        store.setState({ networkGraphIsLoading: false });\n                    }\n                }\n                break;\n\n\n            case \"bridge/response/touchlink/scan\":\n                {\n                    const { status, data: payloadData } = data.payload as TouchllinkScanResponse;\n                    if (status === \"ok\") {\n                        store.setState({ touchlinkScanInProgress: false, touchlinkDevices: payloadData.found });\n                    } else {\n                        store.setState({ touchlinkScanInProgress: false });\n                    }\n                }\n                break;\n\n            case \"bridge/response/touchlink/identify\":\n                store.setState({ touchlinkIdentifyInProgress: false });\n                break;\n\n            case \"bridge/response/touchlink/factory_reset\":\n                store.setState({ touchlinkResetInProgress: false });\n                break;\n\n\n            default:\n                break;\n        }\n        if (data.topic.startsWith(\"bridge/response/\")) {\n            showNotity(data.payload as ResponseWithStatus);\n            this.resolvePromises(data.payload as ResponseWithStatus);\n        }\n    }\n\n    private resolvePromises(message: ResponseWithStatus): void {\n        const { transaction, status } = message;\n        if (transaction !== undefined && this.requests.has(transaction)) {\n            const [resolve, reject] = this.requests.get(transaction) as [Callable, Callable];\n            if (status == \"ok\" || status == undefined) {\n                resolve();\n            } else {\n                reject();\n            }\n            this.requests.delete(transaction);\n        }\n    }\n\n    private onClose = (e: CloseEvent): void => {\n        if (e.code === UNAUTHORIZED_ERROR_CODE) {\n            localStorage.setItem(AUTH_FLAG_LOCAL_STORAGE_ITEM_NAME, \"true\");\n            localStorage.removeItem(TOKEN_LOCAL_STORAGE_ITEM_NAME);\n            notyf.error(\"Unauthorized\");\n            setTimeout(() => {\n                window.location.reload();\n            }, 1000);\n        }\n    }\n\n    private onMessage = (event: MessageEvent): void => {\n        let data = {} as Message;\n        try {\n            data = JSON.parse(event.data) as Message;\n        } catch (e) {\n            notyf.error(e.message);\n            notyf.error(event.data);\n        }\n\n        if (data.topic.startsWith(\"bridge/\")) {\n            this.procsessBridgeMessage(data);\n        } else {\n            const { deviceStates } = store.getState();\n            const newDeviceStates = new Map(deviceStates);\n            newDeviceStates.set(data.topic, { ...newDeviceStates.get(data.topic), ...(data.payload as DeviceState) });\n            store.setState({ deviceStates: newDeviceStates });\n        }\n    }\n}\nconst apiUrl = `${window.location.host}${document.location.pathname}api`;\nconst api = new Api(`${isSecurePage() ? 'wss' : 'ws'}://${apiUrl}`);\nexport default api;\n","import api from \"../api\";\nimport { Device } from \"../types\";\n\nexport interface BridgeApi {\n    setPermitJoin(permit: boolean, device: Device): Promise<void>;\n    updateBridgeConfig(options: object): Promise<void>;\n    restartBridge(): Promise<void>;\n}\n\n\nexport default {\n    setPermitJoin(state, permit = true, device: Device): Promise<void> {\n        return api.send(\"bridge/request/permit_join\", { value: permit, device: device?.friendly_name });\n    },\n    updateBridgeConfig(state, options: object): Promise<void> {\n        return api.send('bridge/request/options', { options });\n    },\n    restartBridge(state): Promise<void> {\n        return api.send('bridge/request/restart', {});\n    },\n}\n","import api from \"../api\";\n\nexport interface DeviceApi {\n    renameDevice(\n        old: string,\n        newName: string,\n        homeassistantRename: boolean\n    ): Promise<void>;\n    removeDevice(dev: string, force: boolean, block: boolean): Promise<void>;\n    configureDevice(name: string): Promise<void>;\n\n    setDeviceOptions(id: string, options: object): Promise<void>;\n}\n\n\nexport default {\n    renameDevice: (\n        state,\n        from: string,\n        to: string,\n        homeassistantRename: boolean\n    ): Promise<void> => {\n        return api.send(\"bridge/request/device/rename\", {\n            from,\n            to,\n            'homeassistant_rename': homeassistantRename,\n        });\n    },\n    removeDevice: (\n        state,\n        dev: string,\n        force: boolean,\n        block: boolean\n    ): Promise<void> => {\n        return api.send(\"bridge/request/device/remove\", { id: dev, force, block });\n    },\n\n    configureDevice: (state, name: string): Promise<void> => {\n        return api.send(\"bridge/request/device/configure\", { id: name });\n    },\n\n    setDeviceOptions: (state, id: string, options: object): Promise<void> => {\n        return api.send(\"bridge/request/device/options\", { id, options });\n    }\n}\n","import api from \"../api\";\n\nexport interface GroupsApi {\n    createGroup(name: string, id?: number): Promise<void>;\n    removeGroup(name: string): Promise<void>;\n    addDeviceToGroup(device: string, group: string): Promise<void>;\n    removeDeviceFromGroup(device: string, group: string): Promise<void>;\n    renameGroup(oldName: string, newName: string): Promise<void>;\n}\n\n\nexport default {\n    createGroup: (state, group: string, id: number): Promise<void> => {\n        const payload = {\n            'friendly_name': group\n        };\n        if (id) {\n            payload['id'] = id;\n        }\n        return api.send(\"bridge/request/group/add\", payload);\n    },\n\n    removeGroup: (state, group: string): Promise<void> => {\n        return api.send(\"bridge/request/group/remove\", { id: group });\n    },\n\n    addDeviceToGroup: (state, device: string, group: string): Promise<void> => {\n        return api.send(\"bridge/request/group/members/add\", { group, device });\n    },\n\n    removeDeviceFromGroup: (\n        state,\n        device: string,\n        group: string\n    ): Promise<void> => {\n        return api.send(\"bridge/request/group/members/remove\", { device, group });\n    },\n    renameGroup: (state, oldName: string, newName: string): Promise<void> => {\n        return api.send(\"bridge/request/group/rename\", { from: oldName, to: newName });\n    },\n}\n","import api from \"../api\";\n\nexport interface StateApi {\n    setStateValue(dev: string, name: string, value: unknown): Promise<void>;\n    setDeviceState(dev: string, value: object): Promise<void>;\n    getDeviceState(dev: string, value: object): Promise<void>;\n}\n\nexport default {\n    setStateValue(\n        state,\n        dev: string,\n        name: string,\n        value: string | number | boolean\n    ): Promise<void> {\n        return api.send(`${dev}/set`, { [name]: value });\n    },\n    setDeviceState(state, dev: string, value: object) {\n        return api.send(`${dev}/set`, value);\n    },\n    getDeviceState(state, dev: string, value: object) {\n        return api.send(`${dev}/get`, value);\n    },\n}\n","import api from \"../api\";\n\nexport interface OtaApi {\n    checkOTA(deviceName: string): Promise<void>;\n    updateOTA(deviceName: string): Promise<void>;\n}\nexport default {\n    checkOTA: (state, deviceName: string): Promise<void> => {\n        return api.send(\"bridge/request/device/ota_update/check\", { id: deviceName });\n    },\n    updateOTA: (state, deviceName: string): Promise<void> => {\n        return api.send(\"bridge/request/device/ota_update/update\", { id: deviceName });\n    },\n}\n","import api from \"../api\";\nimport { Cluster } from \"../types\";\n\nexport type BindParams = {\n    from: string;\n    to: string;\n    clusters: Cluster[];\n}\nexport interface BindApi {\n    addBind(params: BindParams): Promise<void>;\n    removeBind(params: BindParams): Promise<void>;\n}\n\ntype BindOperation = \"bind\" | \"unbind\";\nconst bindOp = (operation: BindOperation, params: object) => {\n    return api.send(`bridge/request/device/${operation}`, params);\n}\nexport default {\n    addBind: (state, params: BindParams): Promise<void> => bindOp(\"bind\", params),\n    removeBind: (state, params: BindParams): Promise<void> => bindOp(\"unbind\", params),\n}\n","import api from \"../api\";\nimport store from \"../store\";\nimport { TouchLinkDevice } from \"../types\";\n\n\nexport interface TouchlinkApi {\n    touchlinkScan(): Promise<void>;\n    touchlinkIdentify(device: TouchLinkDevice): Promise<void>;\n    touchlinkReset(device: TouchLinkDevice): Promise<void>;\n}\n\nexport default {\n    touchlinkScan(state): Promise<void> {\n        store.setState({ touchlinkScanInProgress: true, touchlinkDevices: [] });\n        return api.send(\"bridge/request/touchlink/scan\", { value: true });\n    },\n    touchlinkIdentify(state, device: TouchLinkDevice): Promise<void> {\n        store.setState({ touchlinkIdentifyInProgress: true });\n        return api.send(\"bridge/request/touchlink/identify\", device);\n\n    },\n    touchlinkReset(state, device: TouchLinkDevice): Promise<void> {\n        store.setState({ touchlinkResetInProgress: true });\n        return api.send(\"bridge/request/touchlink/factory_reset\", device);\n    },\n}\n","import api from \"../api\";\nimport store, { Extension } from \"../store\";\n\n\n\nexport interface ExtensionApi {\n    updateExtensionCode(extension: Extension): Promise<void>;\n    saveExtensionCode(extension: Extension): Promise<void>;\n    removeExtension(extension: Extension): Promise<void>;\n}\n\n\nexport default {\n    updateExtensionCode: (state, extension: Extension): Promise<void> => {\n        const { extensions } = store.getState();\n        const newExtensions = extensions.filter(f => f.name !== extension.name).concat([extension]);\n        store.setState({ extensions: newExtensions });\n        return Promise.resolve();\n    },\n\n    saveExtensionCode: (state, extension: Extension): Promise<void> => {\n        return api.send(`bridge/request/extension/save`, extension);\n    },\n    removeExtension: (state, extension: Extension): Promise<void> => {\n        const { extensions } = store.getState();\n        const newExtensions = extensions.filter(f => f.name !== extension.name);\n        store.setState({ extensions: newExtensions });\n\n        return api.send(`bridge/request/extension/remove`, {name: extension.name});\n    }\n}\n","/* eslint-disable @typescript-eslint/no-unused-vars */\n\nimport store, { GlobalState } from \"../store\";\nimport { Store } from \"unistore\";\n\nimport { ReportingConfig } from \"../types\";\nimport api from \"../api\";\nimport { download, saveCurrentTheme } from \"../utils\";\nimport bridgeActions from \"./BridgeApi\";\nimport deviceActions from \"./DeviceApi\";\nimport groupActions from \"./GroupsApi\";\nimport stateActions from \"./StateApi\";\nimport otaActions from \"./OtaApi\";\nimport bindActions from \"./BindApi\";\nimport touchlinkActions from \"./TouchlinkApi\";\nimport extensionActions from \"./ExtensionApi\";\nimport { Theme } from \"../components/theme-switcher\";\n\nexport interface UtilsApi {\n    exportState(): Promise<void>;\n}\n\nexport interface MapApi {\n    networkMapRequest(): Promise<void>;\n}\nexport interface ReportingApi {\n    configureReport(device: string, config: ReportingConfig): Promise<void>;\n}\nexport interface ThemeActions {\n    setTheme(theme: Theme): Promise<void>;\n}\n\n\nconst actions = (store: Store<GlobalState>): object => ({\n    ...bridgeActions,\n    ...deviceActions,\n    ...groupActions,\n    ...stateActions,\n    ...otaActions,\n    ...bindActions,\n    ...touchlinkActions,\n    ...extensionActions,\n\n    networkMapRequest: (state): Promise<void> => {\n        store.setState({ networkGraphIsLoading: true, networkGraph: { nodes: [], links: [] } });\n        return api.send(\"bridge/request/networkmap\", { type: \"raw\", routes: false });\n    },\n\n    exportState(state): Promise<void> {\n        download(state, 'state.json');\n        return Promise.resolve();\n    },\n    configureReport(state, device: string, config: ReportingConfig): Promise<void> {\n        return api.send('bridge/request/device/configure_reporting', {\n            id: device,\n            ...config\n        });\n    },\n    setTheme(state, theme: Theme): Promise<void> {\n        saveCurrentTheme(theme);\n        store.setState({ theme });\n        return Promise.resolve();\n    }\n});\nexport default actions;\n","import React, { ButtonHTMLAttributes, Component } from \"react\";\n\ninterface ButtonProps<T> {\n    item?: T;\n    onClick?(arg1: T): void;\n    promt?: boolean | string;\n}\n\nexport default class Button<T> extends Component<ButtonProps<T> & Omit<ButtonHTMLAttributes<HTMLButtonElement>, 'onClick'>, {}> {\n    onClick = (): void => {\n        const { item, onClick, promt } = this.props;\n        let confirmed = true;\n        if (promt) {\n            confirmed = confirm(typeof promt === \"string\" ? promt : \"Are you sure?\");\n        }\n        confirmed && onClick && onClick(item as T);\n    };\n\n    render() {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { children, item, promt, ...rest } = this.props;\n        return <button type=\"button\" {...rest} onClick={this.onClick}>{children}</button>;\n    }\n}","import { ZigbeeRelationship } from \"./types\";\n\ninterface LinkType {\n  title: string;\n  relationship: ZigbeeRelationship;\n}\nexport const linkTypes: LinkType[] = [\n  {\n      title: 'IsParent',\n      relationship: ZigbeeRelationship.NeigbhorIsParent\n  },\n  {\n      title: 'IsAChild',\n      relationship: ZigbeeRelationship.NeigbhorIsAChild\n  },\n  {\n      title: 'IsASibling',\n      relationship: ZigbeeRelationship.NeigbhorIsASibling\n  },\n  {\n      title: 'NoneOfTheAbove',\n      relationship: ZigbeeRelationship.NoneOfTheAbove\n  }\n];","import React, { FunctionComponent } from \"react\";\n\nconst Spinner: FunctionComponent = () => {\n  return <div className=\"d-flex align-items-center\">\n    <strong>Loading, please wait.</strong>\n    <div className=\"spinner-border me-2\" role=\"status\">\n      <span className=\"sr-only\">Loading...</span>\n    </div>\n  </div>\n}\nexport default Spinner;","import React, { ChangeEvent, Component, createRef, Fragment } from \"react\";\nimport Links from \"./links\";\nimport Nodes, { getStarShape } from \"./nodes\";\nimport { GraphI, LinkI, NodeI, Source, Target, ZigbeeRelationship } from \"./types\";\nimport { connect } from \"unistore/react\";\nimport { GlobalState } from \"../../store\";\nimport actions, { MapApi } from \"../../actions/actions\";\n\nimport Button from \"../button\";\nimport { ForceLink, forceLink, forceCollide, forceCenter, forceSimulation, forceX, forceY } from \"d3-force\";\nimport { select, Selection } from \"d3-selection\";\nimport { forceManyBodyReuse } from \"d3-force-reuse\"\nimport { zoom, zoomIdentity, ZoomTransform } from \"d3-zoom\";\nimport { linkTypes } from \"./consts\";\nimport Spinner from \"../spinner\";\nimport intersection from \"lodash/intersection\";\nimport style from \"./map.css\";\nimport cx from \"classnames\";\nexport interface MouseEventsResponderNode {\n    onMouseOver?: (arg0: NodeI, el: SVGElement) => void;\n    onMouseOut?: (arg0: NodeI, el: SVGElement) => void;\n    onDblClick?: (arg0: NodeI, el: SVGElement) => void;\n}\n\ninterface MapState {\n    selectedNode?: NodeI;\n    width: number;\n    height: number;\n    visibleLinks: ZigbeeRelationship[];\n    legendIsVisible: boolean;\n}\n\nconst parentOrChild = [ZigbeeRelationship.NeigbhorIsAChild, ZigbeeRelationship.NeigbhorIsParent];\nconst linkStrregth = (d: LinkI) => {\n    if (d.linkType === \"Router2Router\") {\n        return 1;\n    }\n    if (parentOrChild.includes(d.relationship)) {\n        return 0.5;\n    }\n\n    return 0;\n}\nconst baseDistance = 100;\nconst distancesMap = {\n    BrokenLink: 5 * baseDistance,\n    Router2Router: 2.5 * baseDistance,\n    Coordinator2Router: 2.5 * baseDistance,\n    Coordinator2EndDevice: 1 * baseDistance,\n    EndDevice2Router: 1 * baseDistance\n};\n\n\nconst getDistance = (d: LinkI): number => {\n    return distancesMap[d.linkType] ?? 250;\n};\n\nconst computeLink = (d: LinkI, transform: ZoomTransform): string => {\n    const src = d.source;\n    const dst = d.target;\n    const [x1, y1] = transform.apply([src.x as number, src.y as number]);\n    const [x2, y2] = transform.apply([dst.x as number, dst.y as number]);\n    return `M ${x1} ${y1} L ${x2} ${y2}`;\n}\n\ntype SelNode = Selection<SVGElement, NodeI, SVGElement, {}>;\ntype SelLink = Selection<SVGElement, LinkI, SVGElement, {}>;\n\ntype TickedParams = {\n    transform: ZoomTransform;\n    node: SelNode;\n    link: SelLink;\n    linkLabel: SelLink;\n    links: LinkI[];\n}\n\n\n\nconst ticked = ({ transform, node, link, linkLabel, links }: TickedParams): void => {\n    links.forEach((d) => {\n        const [x1, y1] = transform.apply([d.source.x as number, d.source.y as number]),\n            [x2, y2] = transform.apply([d.target.x as number, d.target.y as number]);\n\n        (d as unknown as NodeI).x = (x2 + x1) / 2;\n        (d as unknown as NodeI).y = (y2 + y1) / 2;\n    });\n    link.attr(\"d\", (d) => computeLink(d, transform));\n    linkLabel\n        .attr('x', ({ source, target }) => transform.applyX(((source.x as number) + (target.x as number)) / 2))\n        .attr('y', ({ source, target }) => transform.applyY(((source.y as number) + (target.y as number)) / 2));\n\n    node.attr(\"transform\", (d: NodeI) => {\n        const imgXShift = 32 / 2;\n        const imgYShift = 32 / 2;\n        const [X, Y] = transform.apply([d.x as number, d.y as number]);\n        return `translate(${X - imgXShift}, ${Y - imgYShift})`;\n    });\n};\ntype ProcessHighlightsParams = {\n    networkGraph: GraphI;\n    links: LinkI[];\n    selectedNode?: NodeI;\n    node: SelNode;\n    link: SelLink;\n    linkLabel: SelLink;\n}\nconst processHighlights = ({ networkGraph, links, selectedNode, node, link, linkLabel }: ProcessHighlightsParams) => {\n    const linkedByIndex = new Set<string>();\n    networkGraph.nodes.forEach(n => linkedByIndex.add(n.ieeeAddr + \",\" + n.ieeeAddr));\n    links.forEach((l) => linkedByIndex.add(l.sourceIeeeAddr + \",\" + l.targetIeeeAddr));\n\n    const neighboring = (a: Source, b: Target): boolean => linkedByIndex.has(a.ieeeAddr + \",\" + b.ieeeAddr)\n    const computeOpacity = (l: LinkI) => (l.source === selectedNode || l.target === selectedNode ? 1 : 0.15);\n    if (selectedNode) {\n        node.style(\"opacity\", (o: NodeI) => neighboring(selectedNode, o) || neighboring(o, selectedNode) ? 1 : 0.15);\n        link.style(\"stroke-opacity\", computeOpacity);\n        linkLabel.style(\"opacity\", computeOpacity);\n    } else {\n        node.style(\"opacity\", 1);\n        link.style(\"stroke-opacity\", 1);\n        linkLabel.style(\"opacity\", 1);\n    }\n}\n\nexport class MapComponent extends Component<GlobalState & MapApi, MapState> {\n    ref = createRef<HTMLDivElement>();\n    svgRef = createRef<SVGSVGElement>();\n    simulation = forceSimulation<NodeI, LinkI>();\n    state: Readonly<MapState> = {\n        width: 0,\n        height: 0,\n        visibleLinks: parentOrChild,\n        legendIsVisible: true,\n    };\n    transform: ZoomTransform = zoomIdentity;\n\n    updateNodes = (): void => {\n        const { networkGraph } = this.props;\n        if (!networkGraph.nodes.length) {\n            return;\n        }\n        const { visibleLinks, selectedNode, width, height } = this.state;\n        const container = select<SVGElement, {}>(this.svgRef.current as SVGElement);\n        const node = container.selectAll<SVGElement, NodeI>(`.${style.node}`);\n        const link = container.selectAll<SVGElement, LinkI>(`.${style.link}`);\n        const linkLabel = container.selectAll<SVGElement, LinkI>(`.${style.linkLabel}`);\n\n        const links = networkGraph.links.filter(l => intersection(visibleLinks, l.relationships).length);\n        this.simulation.nodes(networkGraph.nodes.concat(links as unknown as NodeI[]));\n        this.simulation.force<ForceLink<NodeI, LinkI>>(\"link\")?.links(links);\n        this.simulation.on(\"tick\", () => ticked({ transform: this.transform, node, link, linkLabel, links }));\n\n\n        //add zoom capabilities\n        const everything = container.selectAll<SVGGeometryElement, NodeI>('.everything');\n        const zoomHandler = zoom()\n            .extent([[0, 0], [width, height]])\n            .scaleExtent([1 / 10, 8])\n            .on(\"zoom\", ({ transform }) => {\n                everything.attr(\"transform\", transform);\n            });\n        zoomHandler(container);\n\n        processHighlights({ networkGraph, links, selectedNode, node, link, linkLabel });\n        node.on(\"click\", (event, d: NodeI) => {\n            const { selectedNode } = this.state;\n            this.setState({ selectedNode: selectedNode ? null as unknown as NodeI : d });\n        });\n        this.simulation.alphaTarget(0.03).restart();\n    }\n\n\n    updateForces(width: number, height: number): void {\n        this.simulation = this.simulation\n            .force(\"link\", forceLink<NodeI, LinkI>().id(d => d.ieeeAddr).distance(getDistance).strength(linkStrregth))\n            .force(\"charge\", forceManyBodyReuse().strength(-700))\n            .force(\"collisionForce\", forceCollide())\n            .force(\"center\", forceCenter(width / 2, height / 2))\n            .force(\"x\", forceX().strength(0.1))\n            .force(\"y\", forceY().strength(0.2))\n    }\n\n    initPage = () => {\n        const { width, height } = (this.ref.current as HTMLDivElement).getBoundingClientRect();\n        this.setState({ width, height });\n        this.updateForces(width, height);\n    }\n\n    componentDidMount(): void {\n        setTimeout(this.initPage, 200);\n    }\n\n    componentDidUpdate(): void {\n        this.updateNodes();\n    }\n\n    renderMap() {\n        const { width, height, visibleLinks } = this.state;\n\n        const { networkGraph } = this.props;\n        const links = networkGraph.links.filter(l => intersection(visibleLinks, l.relationships).length > 0);\n        return (\n            <svg ref={this.svgRef} viewBox={`0 0 ${width} ${height}`}>\n                <g className=\"everything\">\n                    <Links links={links} />\n                    <Nodes\n                        root={this.svgRef.current as SVGElement}\n                        nodes={networkGraph.nodes}\n                        simulation={this.simulation}\n                    />\n                </g>\n            </svg >\n        )\n    }\n    onRequestClick = (): void => {\n        const { networkMapRequest } = this.props;\n        networkMapRequest();\n    }\n    renderMessage() {\n        const { networkGraphIsLoading } = this.props;\n        return (\n            <div className=\"h-100 d-flex justify-content-center align-items-center\">\n                {\n                    networkGraphIsLoading ? (\n                        <div>\n                            <Spinner />\n                            <div>Depending on the size of your network this can take somewhere between 10 seconds and 2 minutes.</div>\n                        </div>\n                    ) : <Button onClick={this.onRequestClick} className=\"btn btn-primary d-block\">Load map</Button>\n                }\n            </div>\n        );\n    }\n    onLinkTypeFilterChange = (e: ChangeEvent<HTMLInputElement>): void => {\n        const { visibleLinks: stateVisibleLinks } = this.state;\n        const { checked, value } = e.target;\n        const inValue = parseInt(value, 10);\n        let visibleLinks = [...stateVisibleLinks];\n        if (checked) {\n            visibleLinks.push(inValue);\n        } else {\n            visibleLinks = visibleLinks.filter((v) => v !== inValue);\n        }\n        this.setState({ visibleLinks });\n    }\n    renderMapControls() {\n        const { visibleLinks } = this.state;\n        return <div className={style.controls}>\n            {\n                linkTypes.map(linkType => (\n                    <div key={linkType.title} className=\"form-check form-check-inline\">\n                        <input onChange={this.onLinkTypeFilterChange} className=\"form-check-input\" type=\"checkbox\" id={linkType.title} value={linkType.relationship} checked={visibleLinks.includes(linkType.relationship)} />\n                        <label className=\"form-check-label\" htmlFor={linkType.title}>{linkType.title}</label>\n                    </div>\n                ))\n            }\n            {\n                <div className=\"btn-group btn-group-sm\" role=\"group\">\n                    <Button<void> title=\"Refresh data\" className=\"btn btn-primary\" onClick={this.onRequestClick}><i\n                        className=\"fa fa-sync\" /></Button>\n                </div>\n            }\n        </div>\n    }\n    renderHelp() {\n        const { legendIsVisible } = this.state;\n        return (<div className={cx(\"fixed-bottom\", { \"d-none\": !legendIsVisible })} onClick={() => this.setState({ legendIsVisible: false })}>\n            <div className={cx(style.node, style.Coordinator)}>\n                <svg width=\"28\" height=\"28\" viewBox=\"0 0 28 28\">\n                    <polygon points={getStarShape(5, 5, 14) as string} />\n                </svg> is Coordinator</div>\n            <div className={cx(style.node, style.EndDevice)}>Green means End Device</div>\n            <div className={cx(style.node, style.Router)}>Blue means Router</div>\n\n            <div>Solid lines are the link to the <span className={cx(style.node, style.Coordinator)}>Coordinator</span></div>\n            <div>Dashed lines are the link with <span className={cx(style.node, style.Coordinator)}>Router</span></div>\n            <div>Link quality is between 0 - 255 (higher is better), values with / represents multiple types of links</div>\n            <div>Click on me to hide</div>\n        </div>)\n    }\n    render() {\n        const { networkGraph } = this.props;\n\n        return (\n            <div className={style.container} ref={this.ref}>\n                {networkGraph.nodes.length ? <Fragment>{this.renderMapControls()} {this.renderMap()}</Fragment> : this.renderMessage()}\n                {this.renderHelp()}\n            </div>\n        );\n    }\n}\n\n\nconst mappedProps = [\"networkGraph\", \"networkGraphIsLoading\"];\nconst ConnectedMap = connect<{}, MapState, GlobalState, {}>(mappedProps, actions)(MapComponent);\nexport default ConnectedMap;\n","import React, { Component, FunctionComponent, Fragment } from \"react\";\nimport cx from \"classnames\";\nimport ReactDOM from \"react-dom\";\n// import * as style from \"./style.css\";\n\n\nexport const ModalHeader: FunctionComponent<{}> = props => {\n    return <div className=\"modal-header\">{props.children}</div>;\n};\n\nexport const ModalBody: FunctionComponent<{}> = props => {\n    return <div className=\"modal-body\">{props.children}</div>;\n};\n\nexport const ModalFooter: FunctionComponent<{}> = props => {\n    return <div className=\"modal-footer\">{props.children}</div>;\n};\ninterface ModalProps {\n    isOpen?: boolean;\n}\ninterface ModalState {\n    modalShow: string;\n    display: string;\n}\n\n\nclass BodyEnd extends React.Component {\n    el: HTMLDivElement;\n    constructor(props) {\n        super(props);\n        this.el = document.createElement('div');\n\n        'modal-backdrop fade show'.split(' ').map(className => this.el.classList.add(className));\n    }\n\n    componentDidMount() {\n        document.body.appendChild(this.el);\n    }\n\n    componentWillUnmount() {\n        document.body.removeChild(this.el);\n    }\n\n    render() {\n        return ReactDOM.createPortal(\n            this.props.children,\n            this.el,\n        );\n    }\n}\nclass Modal extends Component<ModalProps, {}> {\n\n\n\n    openModal = () => {\n        document.body.classList.add(\"modal-open\");\n    }\n\n    closeModal = () => {\n        document.body.classList.remove(\"modal-open\");\n    }\n\n    componentDidMount() {\n        this.props.isOpen ? this.openModal() : this.closeModal();\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.isOpen !== this.props.isOpen) {\n            this.props.isOpen ? this.openModal() : this.closeModal();\n        }\n    }\n\n    render() {\n        const { isOpen } = this.props;\n        return (\n            isOpen && <div\n                className={`modal fade show`}\n                style={{ display: 'block' }}\n            >\n                <div className=\"modal-dialog\">\n                    <div className=\"modal-content\">{this.props.children}</div>\n                </div>\n                <BodyEnd />\n            </div >\n        );\n    }\n}\n\nexport default Modal;\n\n\n\n// interface Props {\n//     onOk(): void;\n//     onCancel(): void;\n// }\n// const Modal: FunctionComponent<Props> = (props: Props) => {\n//     const { onOk, onCancel } = props;\n//     return (\n//         <Fragment>\n\n//             <button type=\"button\" className=\"btn btn-primary\" data-toggle=\"modal\" data-target=\"#exampleModal\">\n//                 Launch demo modal\n// </button>\n//             <div className=\"modal fade\" id=\"exampleModal\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n//                 <div className=\"modal-dialog\">\n//                     <div className=\"modal-content\">\n//                         <div className=\"modal-header\">\n//                             <h5 className=\"modal-title\" id=\"exampleModalLabel\">Modal title</h5>\n//                             <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n//                                 <span aria-hidden=\"true\">&times;</span>\n//                             </button>\n//                         </div>\n//                         <div className=\"modal-body\">\n//                             ...\n//                         </div>\n//                         <div className=\"modal-footer\">\n//                             <button onClick={onOk} type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n//                             <button onClick={onCancel} type=\"button\" className=\"btn btn-primary\">Ok</button>\n//                         </div>\n//                     </div>\n//                 </div>\n//             </div>\n//         </Fragment>\n//     );\n// };\n\n// export default Modal;\n","import React, { ChangeEvent, Component } from \"react\";\nimport Button from \"../button\";\nimport { Device, DeviceState } from \"../../types\";\nimport { connect } from \"unistore/react\";\nimport actions from \"../../actions/actions\";\nimport { DeviceApi } from \"../../actions/DeviceApi\";\nimport cx from \"classnames\";\nimport Modal, { ModalHeader, ModalBody, ModalFooter } from \"../modal\";\nimport { GlobalState } from \"../../store\";\ninterface DeviceControlGroupProps {\n    device: Device;\n    state?: DeviceState;\n}\ninterface DeviceRenameParams {\n    friendlyName: string;\n    isHassRename: boolean;\n}\ninterface DeviceRemovalParams {\n    block: boolean;\n    force: boolean;\n}\n\n\ninterface DeviceControlGroupState {\n    isRenameModalOpened: boolean;\n    isDeviceRemovalModalOpened: boolean;\n    removeParams: DeviceRemovalParams;\n    renameParams: DeviceRenameParams;\n\n}\n\nexport class DeviceControlGroup extends Component<DeviceControlGroupProps & DeviceApi & GlobalState, DeviceControlGroupState> {\n    state = {\n        isRenameModalOpened: false,\n        isDeviceRemovalModalOpened: false,\n        renameParams: {\n            friendlyName: this.props.device.friendly_name,\n            isHassRename: false\n        },\n        removeParams: {\n            block: false,\n            force: false\n        }\n    }\n\n    onRenameClick = async (): Promise<void> => {\n        const { renameDevice, device } = this.props;\n        const { renameParams } = this.state;\n\n        await renameDevice(device.friendly_name, renameParams.friendlyName, renameParams.isHassRename);\n        this.setState({\n            isRenameModalOpened: false\n        });\n    };\n\n\n    onRemoveClick = (): void => {\n        const { removeDevice, device } = this.props;\n        const { removeParams } = this.state;\n        removeDevice(device.friendly_name, removeParams.force, removeParams.block);\n        this.setState({\n            isDeviceRemovalModalOpened: false\n        });\n    };\n\n    toggleRenameModal = (): void => {\n        const { isRenameModalOpened } = this.state;\n        this.setState({ isRenameModalOpened: !isRenameModalOpened });\n    }\n    toggleDeviceRemovalModal = (): void => {\n        const { isDeviceRemovalModalOpened } = this.state;\n        this.setState({ isDeviceRemovalModalOpened: !isDeviceRemovalModalOpened });\n    }\n\n    onHassEntityIdChange = (e: ChangeEvent<HTMLInputElement>): void => {\n        const { renameParams } = this.state;\n        const { checked } = e.target;\n        renameParams.isHassRename = checked;\n        this.setState({ renameParams });\n    }\n    onFriendlyNameChange = (e: ChangeEvent<HTMLInputElement>): void => {\n        const { renameParams } = this.state;\n        const { value } = e.target;\n        renameParams.friendlyName = value;\n        this.setState({ renameParams });\n    }\n\n    onDeviceRemovalParamChange = (e: ChangeEvent<HTMLInputElement>): void => {\n        const { removeParams } = this.state;\n        const { checked, name } = e.target;\n        removeParams[name] = checked;\n        this.setState({ removeParams });\n    }\n    renderRenameButton() {\n        const { bridgeInfo, device } = this.props;\n        const { isRenameModalOpened, renameParams } = this.state;\n        return (<>\n            <Button<void> className=\"btn btn-primary\" onClick={this.toggleRenameModal} title=\"Rename device\"><i className=\"fa fa-edit\" /></Button>\n            <Modal isOpen={isRenameModalOpened}>\n                <ModalHeader>\n                    <h3>Rename device</h3>\n                    <small>{device.friendly_name}</small>\n                </ModalHeader>\n                <ModalBody>\n                    <div className=\"mb-3\">\n                        <label htmlFor={`fn${device.ieee_address}`} className=\"form-label\">Friendly name</label>\n                        <input id={`fn${device.ieee_address}`} onChange={this.onFriendlyNameChange} type=\"text\" className=\"form-control\" value={renameParams.friendlyName} />\n                    </div>\n                    {bridgeInfo?.config?.homeassistant ? (\n                        <div className=\"form-check form-switch\">\n                            <input className=\"form-check-input\" checked={renameParams.isHassRename} type=\"checkbox\" id={`hass${device.ieee_address}`} onChange={this.onHassEntityIdChange} />\n                            <label className=\"form-check-label\" htmlFor={`hass${device.ieee_address}`}>Update Home Assistant entity ID</label>\n                        </div>\n                    ) : null}\n                </ModalBody>\n                <ModalFooter>\n                    <button type=\"button\" className=\"btn btn-secondary\" onClick={this.toggleRenameModal}>Close</button>\n                    <button type=\"button\" className=\"btn btn-primary\" onClick={this.onRenameClick}>Save changes</button>\n                </ModalFooter>\n            </Modal>\n        </>\n        )\n    }\n    renderDeviceRemovalButton() {\n        const { device } = this.props;\n        const { isDeviceRemovalModalOpened, removeParams } = this.state;\n        const checks = [\n            { label: 'Force remove', name: 'force', value: removeParams.force },\n            { label: 'Block from joining again', name: 'block', value: removeParams.block },\n        ];\n        return (\n            <><Modal isOpen={isDeviceRemovalModalOpened}>\n                <ModalHeader>\n                    <h3>Remove device</h3>\n                    <small>{device.friendly_name}</small>\n                </ModalHeader>\n                <ModalBody>\n                    {\n                        checks.map(check => {\n                            const id = `${check.name}${device.ieee_address}`;\n                            return <div key={check.name} className=\"form-check form-switch\">\n                                <input className=\"form-check-input\" name={check.name} checked={check.value} type=\"checkbox\" id={id} onChange={this.onDeviceRemovalParamChange} />\n                                <label className=\"form-check-label\" htmlFor={id}>{check.label}</label>\n                            </div>\n                        })\n                    }\n                </ModalBody>\n                <ModalFooter>\n                    <button type=\"button\" className=\"btn btn-secondary\" onClick={this.toggleDeviceRemovalModal}>Close</button>\n                    <button type=\"button\" className=\"btn btn-danger\" onClick={this.onRemoveClick}>Delete</button>\n                </ModalFooter>\n            </Modal>\n                <button onClick={this.toggleDeviceRemovalModal} className=\"btn btn-danger\" title=\"Remove device\"><i className={cx(\"fa\", \"fa-trash\")} /></button></>\n        )\n    }\n\n    render() {\n        const { device, configureDevice } = this.props;\n        return (\n            <div className=\"btn-group btn-group-sm\" role=\"group\">\n                {this.renderRenameButton()}\n                <Button<string> className=\"btn btn-warning\" onClick={configureDevice} item={device.friendly_name} title=\"Reconfigure\" promt><i className={cx(\"fa\", \"fa-retweet\")} /></Button>\n                {this.renderDeviceRemovalButton()}\n            </div>\n        );\n    }\n}\n\nconst mappedProps = [\"bridgeInfo\"];\nconst ConnectedDeviceControlGroup = connect<DeviceControlGroupProps, {}, GlobalState, DeviceApi>(mappedProps, actions)(DeviceControlGroup);\nexport default ConnectedDeviceControlGroup;\n\n","import React, { Fragment } from \"react\";\nimport { Device } from \"../../types\";\n\ntype VendorProps = {\n    device: Device;\n    anchor?: string;\n}\nconst normalizeModel = (model: string): string => {\n  const find = '[/| |:]';\n  const re = new RegExp(find, 'g');\n  return model.replace(re, '_');\n};\n\nexport const VendorLink: React.FunctionComponent<VendorProps> = (props: VendorProps) => {\n  const { device } = props;\n  if (device.supported && device.definition) {\n    const url = `https://www.zigbee2mqtt.io/information/supported_devices.html#${encodeURIComponent(normalizeModel(device.definition.vendor?.toLowerCase()))}`;\n    return <a target=\"_blank\" rel=\"noopener noreferrer\" href={url}>{device.definition.vendor}</a>\n  }\n  return <Fragment>Unsupported</Fragment>;\n}\n\n\nexport const ModelLink: React.FunctionComponent<VendorProps> = (props: VendorProps) => {\n  const { device, anchor } = props;\n  let url = 'https://www.zigbee2mqtt.io/how_tos/how_to_support_new_devices.html#how-to-support-new-devices';\n  let title = device.model_id;\n  if (device.supported && device.definition) {\n    const detailsAcnchor = [\n      encodeURIComponent(device.definition?.vendor?.toLowerCase()),\n      encodeURIComponent(device.definition?.model?.toLowerCase()),\n    ].join('-');\n    url = `https://www.zigbee2mqtt.io/devices/${encodeURIComponent(normalizeModel(device.definition?.model))}.html#${encodeURIComponent(normalizeModel(anchor || detailsAcnchor))}`;\n    title = device.definition.model;\n  }\n  return <a target=\"_blank\" rel=\"noopener noreferrer\" href={url}>{title}</a>\n}\n","import React, { Fragment, FunctionComponent } from \"react\";\nimport { PowerSource as PowerSourceType } from \"../../types\";\nimport style from \"./style.css\";\n\n\ninterface PowerSourceProps {\n    source: PowerSourceType;\n    battery?: number;\n    batteryLow?: boolean;\n    showLevel?: boolean;\n}\n\n\nconst PowerSource: FunctionComponent<PowerSourceProps> = ({ source, battery, batteryLow, showLevel, ...rest }) => {\n    let batteryClass = \"\";\n    let title = \"\";\n\n    switch (source) {\n        case \"Battery\":\n            title = 'Battery';\n            if (batteryLow !== undefined) {\n                batteryClass = batteryLow ? `fa-battery-empty animation-blinking text-danger` : 'fa-battery-full text-success';\n                title += batteryLow ? ' LOW' : ' OK';\n            }\n            if (battery !== undefined) {\n                if (battery >= 85) {\n                    batteryClass += \" fa-battery-full\";\n                } else if (battery >= 75) {\n                    batteryClass += \" fa-battery-three-quarters\";\n                } else if (battery >= 50) {\n                    batteryClass += \" fa-battery-half\";\n                } else if (battery >= 25) {\n                    batteryClass += \" fa-battery-quarter\";\n                } else if (battery >= 10) {\n                    batteryClass += ` fa-battery-empty animation-blinking`\n                } else {\n                    return <span className={`animation-blinking text-danger`} role=\"alert\">{battery}%</span>\n                }\n            }\n            title += `${battery ? `, power level ${battery}%` : \"\"}`;\n            if (!batteryClass) {\n                batteryClass = \"fa-question\";\n            }\n            return <Fragment>{showLevel ? <span className=\"pe-2\">Battery {battery !== undefined ? `${battery}%` : null}</span> : null}<i className={`fa ${batteryClass}`} title={title} {...rest} /></Fragment>;\n\n        case \"Mains (single phase)\":\n        case \"DC Source\":\n            return <i className={`fa fa-plug ${style.plug}`} title={source} {...rest} />;\n        default:\n            return <i className={`fa fa-question`} title={source} {...rest} />;\n    }\n};\n\nexport default PowerSource;\n","/* eslint-disable react/display-name */\nimport React, { Component, Fragment } from \"react\";\nimport { Device, DeviceState } from \"../../types\";\nimport { toHex, toHHMMSS } from \"../../utils\";\nimport DeviceControlGroup from \"../device-control\";\nimport cx from \"classnames\";\nimport style from \"./style.css\";\nimport { connect } from \"unistore/react\";\nimport { GlobalState } from \"../../store\";\nimport get from 'lodash/get';\nimport DeviceImage from \"../device-image\";\nimport { ModelLink, VendorLink } from \"../vendor-links/verndor-links\";\nimport PowerSource from \"../power-source\";\n\n\ntype DeviceInfoProps = {\n    device: Device;\n}\ninterface PropsFromStore {\n    deviceStates: Map<string, DeviceState>;\n}\n// [Flower sensor](http://modkam.ru/?p=1700)\nconst markdownLinkRegex = /\\[(.*?)\\]\\((.*?)\\)/;\n\nconst displayProps = [\n    {\n        label: 'Friendly name',\n        render: (device: Device) => <dd className=\"col-12 col-md-7\"><strong>{device.friendly_name}</strong></dd>,\n    },\n    {\n        key: 'type',\n        label: 'Device type'\n    },\n    {\n        key: 'model_id',\n        label: 'Zigbee model'\n    },\n    {\n        key: 'definition.description',\n        label: 'Description',\n        if: 'supported',\n        render: (device: Device) => {\n            const result = markdownLinkRegex.exec(device.definition?.description as string);\n            let content = <span>{device.definition?.description}</span>;\n            if (result) {\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                const [all, title, link] = result;\n                content = <a target=\"_blank\" rel=\"noopener noreferrer\"href={link}>{title}</a>\n            }\n            return <dd className=\"col-12 col-md-7\">{content}</dd>\n        },\n    },\n    {\n        render: (device: Device) => <dd className=\"col-12 col-md-7\" ><p className={cx('mb-0', 'font-weight-bold', { 'text-danger': !device.supported, 'text-success': device.supported })}>{device.supported ? 'Supported' : 'Unsupported'}</p></dd>,\n        label: 'Support status'\n    },\n    {\n        render: (device: Device) => <dd className=\"col-12 col-md-7\">{device.definition?.supports}</dd>,\n        label: 'Supports',\n        if: 'definition.supports'\n    },\n    {\n        key: 'ieee_address',\n        label: 'IEEE address'\n    },\n    {\n        key: 'network_address',\n        label: 'Network address',\n        render: (device: Device) => <dd className=\"col-12 col-md-7\">{toHex(device.network_address)}</dd>,\n    },\n    {\n        key: 'date_code',\n        label: 'Firmware build date',\n        if: 'date_code'\n    },\n    {\n        key: 'software_build_id',\n        label: 'Firmware version',\n        if: 'software_build_id'\n    },\n\n    {\n        key: 'definition.vendor',\n        label: 'Vendor',\n        if: 'supported',\n        render: (device: Device) => <dd className=\"col-12 col-md-7\"><VendorLink device={device} /></dd>\n    },\n    {\n        key: 'definition.model',\n        label: 'Model',\n        if: 'supported',\n        render: (device: Device) => <dd className=\"col-12 col-md-7\"><ModelLink device={device} /></dd>\n    },\n\n    {\n        label: 'Power source',\n        render: (device: Device, deviceStatus: DeviceState) => <dd className=\"col-12 col-md-7\"><PowerSource showLevel={true} source={device.power_source} battery={deviceStatus.battery as number} batteryLow={deviceStatus.battery_low as boolean} /></dd>\n    },\n    {\n        label: 'Interview completed',\n        render: (device: Device) => <dd className=\"col-12 col-md-7\">{device.interview_completed ? 'Yes' : 'No'}</dd>\n    }\n];\n// eslint-disable-next-line react/prefer-stateless-function\nexport class DeviceInfo extends Component<DeviceInfoProps & PropsFromStore, {}> {\n    render() {\n        const { device, deviceStates } = this.props;\n        const deviceStatus: DeviceState = deviceStates.get(device.friendly_name) ?? {} as DeviceState;\n        return (\n            <Fragment>\n                <div className=\"d-flex justify-content-center\">\n                    <DeviceImage className={`card-img-top w-auto ${style[\"device-pic\"]}`} device={device} deviceStatus={deviceStatus} />\n                </div>\n\n\n                {/* <h2 className=\"card-title\">{device.friendly_name} {device.type}</h2> */}\n\n\n                <dl className=\"row\">\n                    {\n                        displayProps.filter(prop => prop.if === undefined || get(device, prop.if, false)).map(prop => (\n                            <Fragment key={prop.label}>\n                                <dt className=\"col-12 col-md-5\">{prop.label}</dt>\n                                {prop.render ?\n                                    prop.render(device, deviceStatus) : <dd className=\"col-12 col-md-7\">{get(device, prop.key)}</dd>}\n\n                            </Fragment>\n                        ))\n                    }\n                </dl>\n\n\n                <DeviceControlGroup device={device} state={deviceStatus} />\n\n            </Fragment>\n        );\n    }\n}\n\nconst mappedProps = [\"deviceStates\"];\n\nconst ConnectedDeviceInfoPage = connect<DeviceInfoProps, {}, GlobalState, PropsFromStore>(mappedProps)(DeviceInfo);\nexport default ConnectedDeviceInfoPage;","import React, { ChangeEvent, Component, SelectHTMLAttributes } from \"react\";\nimport { Device, ObjectType } from \"../../types\";\nimport { getDeviceDisplayName } from \"../../utils\";\nimport { Group } from \"../../store\";\n\ninterface DevicePickerProps {\n    type: ObjectType;\n    value: string | number;\n    label?: string;\n    devices: Map<string, Device>;\n    groups?: Group[];\n    onChange(device: Device | Group, type: ObjectType): void;\n}\nexport default class DevicePicker extends Component<DevicePickerProps & Omit<SelectHTMLAttributes<HTMLSelectElement>, 'onChange'>, {}> {\n    onSelect = (e: ChangeEvent<HTMLSelectElement>): void => {\n        const { onChange, devices, groups = [] } = this.props;\n        const { value } = e.target as HTMLSelectElement;\n\n        if (devices.has(value)) {\n            onChange(devices.get(value) as Device, \"device\");\n        } else {\n            const group = groups.find(g => parseInt(value, 10) === g.id);\n            onChange(group as Group, \"group\");\n        }\n    }\n    render() {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { devices, groups, value, type, label, onChange, ...rest } = this.props;\n        let options = [<option key=\"hidden\" hidden>Select device</option>];\n\n        const devicesOptions = [] as JSX.Element[];\n        devices.forEach((device) => {\n            devicesOptions.push(<option\n                title={device.definition?.description}\n                key={device.ieee_address}\n                value={device.ieee_address}\n            >{getDeviceDisplayName(device)}</option>);\n        });\n        if (groups && groups.length) {\n            const groupOptions = groups.map(group => <option\n                key={group.friendly_name}\n                value={group.id}>{group.friendly_name}\n            </option>);\n            options.push(<optgroup key=\"Groups\" label=\"Groups\">{groupOptions}</optgroup>);\n            options.push(<optgroup key=\"Devices\" label=\"Devices\">{devicesOptions}</optgroup>);\n        } else {\n            options = options.concat(devicesOptions);\n        }\n        return <div className=\"form-group\">\n            {label && <label className=\"form-label\">{label}</label>}\n            <select\n                value={value}\n                onChange={this.onSelect}\n                className=\"form-control\"\n                {...rest}\n            >{options}\n\n            </select>\n        </div>;\n\n    }\n}\n","import React, { ChangeEvent, Component, SelectHTMLAttributes } from \"react\";\nimport { Endpoint } from \"../../types\";\n\n\n\ninterface EndpointPickerProps {\n    onChange(endpoint: Endpoint): void;\n    value: Endpoint;\n    label?: string;\n    values: Endpoint[];\n}\n\nexport default class EndpointPicker extends Component<EndpointPickerProps & Omit<SelectHTMLAttributes<HTMLSelectElement>, 'onChange'>, {}> {\n    onSelect = (e: ChangeEvent<HTMLSelectElement>): void => {\n        const { onChange } = this.props;\n        const { value } = e.target as HTMLSelectElement;\n        onChange(value);\n    }\n    render() {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { onSelect, value, values, disabled, onChange, label, ...rest } = this.props;\n        const hasOnlyOneEP = values.length == 1;\n\n        const options = values.map(ep => <option key={ep} value={ep}>{ep}</option>)\n        options.unshift(<option key=\"hidded\" hidden>Select endpoint</option>);\n        return <div className=\"form-group\">\n            {label && <label className=\"form-label\">{label}</label>}\n            <select disabled={value && hasOnlyOneEP || disabled}\n                value={value}\n                className=\"form-control\"\n                title={hasOnlyOneEP ? 'The only endpoint' : \"\"}\n                onChange={this.onSelect}\n                {...rest}>\n                {options}\n            </select>\n        </div>\n\n    }\n}\n","import React, { ChangeEvent, Component, InputHTMLAttributes } from \"react\";\nimport { Cluster } from \"../../types\";\nimport { randomString } from \"../../utils\";\nimport { label } from \"../map/map.module.css\";\n\n\n\nconst clusterDescriptions = {\n    genPowerCfg: \"PowerCfg\",\n    genScenes: \"Scenes\",\n    genOnOff: \"OnOff\",\n    genLevelCtrl: \"LevelCtrl\",\n    lightingColorCtrl: \"LColorCtrl\",\n    closuresWindowCovering: \"Closures\",\n    genMultistateInput: \"MultistateInput\",\n    genGroups: \"Groups\",\n    genOta: \"Ota\",\n    touchlink: \"Touchlink\",\n    genIdentify: \"Identify\",\n    msTemperatureMeasurement: \"Temperature\",\n    msIlluminanceMeasurement: \"Illuminance\",\n    msRelativeHumidity: \"Humidity\",\n    msPressureMeasurement: \"Pressure\",\n    msSoilMoisture: \"Soil Moisture\",\n}\n\nexport enum PickerType {\n    MULTIPLE,\n    SINGLE\n}\nexport interface ClusterGroup {\n    name: string;\n    clusters: Cluster[];\n}\ninterface ClusterPickerProps {\n    value: Cluster[] | Cluster;\n    label?: string;\n    onChange(arg1: Cluster[] | Cluster | undefined): void;\n    clusters: Cluster[] | ClusterGroup[];\n    pickerType: PickerType;\n}\ninterface ClusterPickerState {\n    pickerId: string;\n}\n\n\n\nfunction isClusterGroup(clusters: Cluster[] | ClusterGroup[]): clusters is ClusterGroup[] {\n\n    return clusters.length > 0 && typeof clusters[0] !== 'string';\n}\n\n// eslint-disable-next-line react/prefer-stateless-function\nexport default class ClusterPicker extends Component<ClusterPickerProps & Omit<InputHTMLAttributes<HTMLInputElement | HTMLSelectElement>, 'onChange'>, ClusterPickerState> {\n    state: Readonly<ClusterPickerState> = {\n        pickerId: randomString(5)\n    }\n\n    onChange = (e: ChangeEvent<HTMLInputElement | HTMLSelectElement>): void => {\n        const { onChange, pickerType } = this.props;\n        let { value } = this.props;\n        const { name } = e.target;\n        if (pickerType === PickerType.MULTIPLE) {\n            const { checked: isChecked } = e.target as HTMLInputElement;\n            if (isChecked) {\n                (value as Cluster[]).push(name);\n            } else {\n                value = (value as Cluster[]).filter(v => v !== name);\n            }\n        } else {\n            const { value: selectedValue } = e.target as HTMLInputElement;\n            value = selectedValue;\n        }\n        onChange(value);\n    }\n    render() {\n        const { pickerType } = this.props;\n        if (pickerType === PickerType.MULTIPLE) {\n            return this.renderMultiPicker();\n        } else {\n            return this.renderSinglePicker();\n        }\n    }\n    renderMultiPicker() {\n        const { pickerId } = this.state;\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { clusters = [], value, pickerType, onChange, label, ...rest } = this.props;\n        let options = [] as JSX.Element[];\n        if (isClusterGroup(clusters)) {\n            //TODO: implement if necessary\n            console.warn(\"Not implemented\");\n        } else {\n            options = clusters.map(cluster => (\n                <div key={cluster} className=\"form-check form-check-inline\">\n                    <input className=\"form-check-input\"\n                        type=\"checkbox\"\n                        checked={value.includes(cluster)}\n                        name={cluster}\n                        id={`${pickerId}_${cluster}`}\n                        value={cluster}\n                        onChange={this.onChange}\n                        {...rest}\n                    />\n                    <label className=\"form-check-label\" htmlFor={`${pickerId}_${cluster}`} title={cluster}>{clusterDescriptions[cluster] ?? cluster}</label>\n                </div>\n            ));\n        }\n\n        return <div className=\"form-group\">\n            {label && <label className=\"form-label\">{label}</label>}\n            <div className=\"form-control border-0\">\n                {options}\n            </div>\n\n        </div>;\n    }\n\n    renderSinglePicker() {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { clusters = [], onChange, pickerType, label, ...rest } = this.props;\n        const options = [<option key=\"hidden\" hidden>Select cluster</option>];\n        if (isClusterGroup(clusters)) {\n            clusters.forEach(group => {\n                const groupOptions = group.clusters.map(cluster => <option key={cluster} value={cluster}>{clusterDescriptions[cluster] ?? cluster}</option>)\n                if (groupOptions.length === 0) {\n                    groupOptions.push(<option key=\"none\" disabled>None</option>)\n                }\n                options.push(<optgroup key={group.name} label={group.name}>{groupOptions}</optgroup>);\n            });\n\n\n        } else {\n            clusters.forEach(cluster => {\n                options.push(<option key={cluster} value={cluster}>{clusterDescriptions[cluster] ?? cluster}</option>);\n            })\n        }\n        return (<div className=\"form-group\">\n            {label && <label className=\"form-label\">{label}</label>}\n            <select className=\"form-select\" onChange={this.onChange} {...rest}>\n                {options}\n            </select>\n        </div>)\n    }\n}\n","import React, { Component } from \"react\";\nimport { Device, Endpoint, Cluster, ObjectType } from \"../../types\";\nimport DevicePicker from \"../device-picker\";\nimport EndpointPicker from \"../endpoint-picker\";\nimport ClusterPicker, { PickerType } from \"../cluster-picker\";\nimport Button from \"../button\";\nimport { Group } from \"../../store\";\nimport { NiceBindingRule } from \"./bind\";\nimport { getEndpoints } from \"../../utils\";\nimport { BindParams } from \"../../actions/BindApi\";\n\n\n\n\ninterface BindRowProps {\n    rule: NiceBindingRule;\n    idx: number;\n    devices: Map<string, Device>;\n    groups: Group[];\n    device: Device;\n    onBind(params: BindParams): void;\n    onUnBind(params: BindParams): void;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\ninterface BindRowState {\n    stateRule: NiceBindingRule;\n}\nconst getTarget = (rule: NiceBindingRule, devices: Map<string, Device>, groups: Group[]): Device | Group => {\n    if (rule.target.type === \"group\") {\n        return groups.find(g => g.id === rule.target.id) as Group;\n    }\n    return devices.get(rule.target?.ieee_address as string) as Device;\n}\ntype Action = \"Bind\" | \"Unbind\";\nexport default class BindRow extends Component<BindRowProps, BindRowState> {\n    state: Readonly<BindRowState> = {\n        stateRule: {} as NiceBindingRule\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    static getDerivedStateFromProps(props: Readonly<BindRowProps>, state: BindRowState): Partial<BindRowState> {\n        const { rule } = props;\n        return {\n            stateRule: rule\n        };\n    }\n    setSourceEp = (sourceEp: Endpoint): void => {\n        const { stateRule } = this.state;\n        stateRule.source.endpoint = sourceEp;\n        this.setState({ stateRule });\n    }\n\n    setDestination = (destination: Device | Group, type: ObjectType): void => {\n        const { stateRule } = this.state;\n        if (type === \"device\") {\n            const endpoints = getEndpoints(destination);\n            stateRule.target['ieee_address'] = (destination as Device)['ieee_address'];\n            stateRule.target.type = \"endpoint\";\n            stateRule.target.endpoint = endpoints[0];\n            delete stateRule.target.id;\n        } else if (type === \"group\") {\n            stateRule.target.id = (destination as Group).id;\n            stateRule.target.type = \"group\";\n            delete stateRule.target.ieee_address;\n        }\n        stateRule.clusters = [];\n        this.setState({ stateRule });\n    }\n\n    setDestinationEp = (destinationEp: Endpoint): void => {\n        const { stateRule } = this.state;\n        stateRule.target.endpoint = destinationEp;\n        stateRule.clusters = [];\n        this.setState({ stateRule });\n    }\n\n    setClusters = (clusters: Cluster[]): void => {\n        const { stateRule } = this.state;\n        stateRule.clusters = clusters;\n        this.setState({ stateRule });\n    }\n\n    getBidningParams(): { from: string; to: string; clusters: string[] } {\n        const { device, groups, devices } = this.props;\n        const { stateRule } = this.state;\n        const from = `${device.friendly_name}/${stateRule.source.endpoint}`;\n        let to = \"\";\n        if (stateRule.target.type === \"group\") {\n            const targetGroup = groups.find(group => group.id === stateRule.target.id) as Group;\n            to = `${targetGroup.friendly_name}`;\n        } else if (stateRule.target.type === \"endpoint\") {\n            const targeDevice = devices.get(stateRule.target?.ieee_address as string) as Device;\n            if (targeDevice.type === \"Coordinator\") {\n                to = `${targeDevice.friendly_name}`;\n            } else {\n                to = `${targeDevice.friendly_name}/${stateRule.target.endpoint}`;\n            }\n        }\n        return { from, to, clusters: stateRule.clusters };\n    }\n\n    onBindOrUnBindClick = (action: Action): void => {\n        const { onUnBind, onBind } = this.props;\n        const { from, to, clusters } = this.getBidningParams();\n        if (action == \"Bind\") {\n            onBind({ from, to, clusters });\n        } else {\n            onUnBind({ from, to, clusters });\n        }\n    }\n\n    isValidRule(): boolean {\n        const { stateRule } = this.state;\n        let valid;\n        if (stateRule.target.type == \"endpoint\") {\n            valid = stateRule.source.endpoint\n                && stateRule.target.ieee_address\n                && stateRule.target.endpoint\n                && stateRule.clusters.length > 0;\n        } else if (stateRule.target.type == \"group\") {\n            valid = stateRule.source.endpoint\n                && stateRule.target.id\n                && stateRule.clusters.length > 0;\n        }\n        return !!valid;\n    }\n\n    render() {\n        const { devices, groups, idx, device } = this.props;\n        const { stateRule } = this.state;\n\n        const targetType: ObjectType = stateRule.target.type === \"endpoint\" ? \"device\" : \"group\";\n\n        const sourceEndpoints = getEndpoints(device);\n        const target = getTarget(stateRule, devices, groups);\n        const destinationEndpoints = getEndpoints(target);\n\n        const possibleClusters: Set<Cluster> = new Set(stateRule.clusters);\n        const destEndpoint = device.endpoints.get(stateRule.source.endpoint);\n        if (destEndpoint) {\n            destEndpoint.clusters.output.forEach(cluster => possibleClusters.add(cluster));\n        }\n        return (\n            <div className=\"row pb-2 border-bottom\">\n                <div className=\"col-md-2\">\n                    <EndpointPicker label=\"Source EP\" disabled={!stateRule.isNew} values={sourceEndpoints} value={stateRule.source.endpoint} onChange={this.setSourceEp} />\n                </div>\n                <div className=\"col-md-2\">\n                    <DevicePicker label=\"Destination\" disabled={!stateRule.isNew} type={targetType} value={(stateRule.target.ieee_address || stateRule.target.id) as string} devices={devices} groups={groups} onChange={this.setDestination} />\n                </div>\n                <div className=\"col-md-2\">\n                    {stateRule.target.type === \"endpoint\" ? <EndpointPicker label=\"Destination EP\" disabled={!stateRule.isNew} values={destinationEndpoints} value={stateRule.target.endpoint as Endpoint} onChange={this.setDestinationEp} /> : null}\n                </div>\n                <div className=\"col-md-4\">\n                    <ClusterPicker label=\"Clusters\" pickerType={PickerType.MULTIPLE} clusters={Array.from(possibleClusters)} value={stateRule.clusters} onChange={this.setClusters} />\n                </div>\n                <div className=\"col-md-2\">\n                    <div className=\"form-group\">\n                        <label className=\"form-label\">Actions</label>\n                        <div className=\"form-control border-0\">\n                            <div className=\"btn-group btn-group-sm\">\n                                <Button<Action> item={\"Bind\"} disabled={!this.isValidRule()} title=\"Bind\" className=\"btn btn-primary\" onClick={this.onBindOrUnBindClick}>\n                                    Bind&nbsp;<i\n                                        className=\"fa fa-heart\" /></Button>\n                                <Button<Action> item={\"Unbind\"} disabled={!stateRule.isNew && !this.isValidRule()} title=\"Unbind\" className=\"btn btn-danger\" onClick={this.onBindOrUnBindClick}><i\n                                    className=\"fa fa-heart-broken\" />&nbsp;Unbind</Button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport { Device, Cluster, Endpoint } from \"../../types\";\nimport BindRow from \"./bind-row\";\nimport actions from \"../../actions/actions\";\nimport { BindApi } from \"../../actions/BindApi\";\nimport { connect } from \"unistore/react\";\nimport { GlobalState, Group } from \"../../store\";\nimport { getEndpoints } from \"../../utils\";\n\n\ninterface PropsFromStore {\n    devices: Map<string, Device>;\n    groups: Group[];\n}\ninterface BindProps {\n    device: Device;\n}\n\nexport interface NiceBindingRule {\n    id?: number;\n    isNew?: number;\n    source: {\n        ieee_address: string;\n        endpoint: Endpoint;\n    };\n    target: {\n        id?: number;\n        endpoint?: Endpoint;\n        ieee_address?: string;\n        type: \"endpoint\" | \"group\";\n    };\n    clusters: Cluster[];\n}\nconst rule2key = (rule: NiceBindingRule): string => `${rule.source.endpoint}-${rule.isNew}${rule.source.ieee_address}-${rule.target.id}-${rule.target.ieee_address}-${rule.clusters.join('-')}`;\nconst convertBidningsIntoNiceStructure = (device: Device): NiceBindingRule[] => {\n    const bindings = {};\n    device.endpoints.forEach((description, endpoint) => {\n        description.bindings\n            .forEach(b => {\n                let targetId = b.target.id ?? `${b.target.ieee_address}-${b.target.endpoint}`;\n\n                targetId = `${targetId}-${endpoint}`;\n\n                if (bindings[targetId]) {\n                    bindings[targetId].clusters.push(b.cluster);\n                } else {\n                    bindings[targetId] = {\n                        source: {\n                            // eslint-disable-next-line @typescript-eslint/camelcase\n                            ieee_address: device.ieee_address,\n                            endpoint\n                        },\n                        target: b.target,\n                        clusters: [b.cluster]\n                    }\n                }\n            });\n    });\n    return Object.values(bindings);\n}\ntype BindState = {\n    bidingRules: NiceBindingRule[];\n}\nexport class Bind extends Component<BindProps & PropsFromStore & BindApi, BindState> {\n    state: BindState = {\n        bidingRules: []\n    }\n    static getDerivedStateFromProps(props: Readonly<BindProps & PropsFromStore>): Partial<BindState> {\n        const { device } = props;\n        const endpoints = getEndpoints(device);\n        const bidingRules = convertBidningsIntoNiceStructure(device);\n        bidingRules.push({ isNew: Date.now(), target: {}, source: { 'ieee_address': device.ieee_address, endpoint: endpoints[0] }, clusters: [] } as unknown as NiceBindingRule);\n        return { bidingRules };\n    }\n    renderBody() {\n        const { device, devices, groups, removeBind, addBind } = this.props;\n        const { bidingRules } = this.state;\n        return bidingRules\n            .map((rule, idx) => <BindRow\n                key={rule2key(rule)}\n                rule={rule}\n                groups={groups}\n                onUnBind={removeBind}\n                onBind={addBind}\n                device={device}\n                idx={idx}\n                devices={devices} />)\n    }\n    render() {\n        return <div className=\"container-fluid\">\n            {this.renderBody()}\n        </div>;\n    }\n}\n\nconst mappedProps = [\"devices\", \"groups\"];\nconst ConnectedBindPage = connect<BindProps, {}, GlobalState, PropsFromStore & BindApi>(mappedProps, actions)(Bind);\nexport default ConnectedBindPage\n","import React, { ChangeEvent, Component, InputHTMLAttributes } from \"react\";\nimport { Attribute, Cluster } from \"../../types\";\n\nimport Clusters from \"zigbee-herdsman/dist/zcl/definition/cluster\"\n\ninterface AttributePickerProps {\n    cluster: Cluster;\n    value: Attribute;\n    label?: string;\n    onChange: (attr: Attribute) => void;\n}\n// eslint-disable-next-line react/prefer-stateless-function\nexport default class AttributePicker extends Component<AttributePickerProps & Omit<InputHTMLAttributes<HTMLSelectElement>, 'onChange'>, {}> {\n\n    onChange = (e: ChangeEvent<HTMLSelectElement>): void => {\n        const { onChange } = this.props;\n        const { value } = e.target;\n        onChange(value);\n    }\n    render() {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { cluster, onChange, label, value, ...rest } = this.props;\n        let attrs = [] as string[];\n        const clusterDefinition = Clusters[cluster];\n        if (clusterDefinition) {\n            attrs = Object.keys(clusterDefinition.attributes);\n        }\n        if (!attrs.includes(value)) {\n            attrs.push(value);\n        }\n        const options = attrs.map(attr => <option key={attr} value={attr}>{attr}</option>);\n        options.unshift(<option key=\"none\" hidden>Select attribute</option>)\n        return (<div className=\"form-group\">\n            {label && <label className=\"form-label\">{label}</label>}\n            <select disabled={attrs.length === 0} className=\"form-control\" onChange={this.onChange} value={value} {...rest}>\n                {options}\n            </select>\n        </div>)\n    }\n}\n","import React, { ChangeEvent, Component } from \"react\";\nimport { Device, Endpoint, Cluster, Attribute } from \"../../types\";\n\nimport EndpointPicker from \"../endpoint-picker\";\nimport ClusterPicker, { ClusterGroup, PickerType } from \"../cluster-picker\";\n\nimport { NiceReportingingRule } from \"./reporting\";\nimport { getEndpoints } from \"../../utils\";\nimport AttributePicker from \"../attribute-picker\";\nimport Clusters from \"zigbee-herdsman/dist/zcl/definition/cluster\"\nimport Button from \"../button\";\n\n\ninterface ReportingRowProps {\n    rule: NiceReportingingRule;\n    device: Device;\n    onApply(rule: NiceReportingingRule): void;\n}\ninterface ReportingRowState {\n    stateRule: NiceReportingingRule;\n}\n\nconst getClusters = (device: Device, endpoint: Endpoint, currentCluster: Cluster): ClusterGroup[] => {\n    let possibleClusters = Object.keys(Clusters);\n    let availableClusters = [] as Cluster[];\n    const ep = device.endpoints.get(endpoint);\n    if (ep) {\n        availableClusters = availableClusters.concat(ep.clusters.output);\n        possibleClusters = possibleClusters.filter(cluster => !availableClusters.includes(cluster))\n    }\n    if (!availableClusters.includes(currentCluster)) {\n        availableClusters.push(currentCluster);\n    }\n    return [\n        {\n            name: 'Avaliable',\n            clusters: availableClusters\n        },\n        {\n            name: 'Possible',\n            clusters: possibleClusters\n        }\n    ]\n}\nconst requiredRuleFileds = ['maximum_report_interval', 'minimum_report_interval', 'reportable_change', 'endpoint', 'cluster', 'attribute'];\nconst isValidRule = (rule: NiceReportingingRule): boolean => {\n    return requiredRuleFileds.every(field => rule[field] !== undefined)\n}\nexport default class ReportingRow extends Component<ReportingRowProps, ReportingRowState> {\n\n    state: Readonly<ReportingRowState> = {\n        stateRule: {} as NiceReportingingRule\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    static getDerivedStateFromProps(props: Readonly<ReportingRowProps>, state: ReportingRowState): Partial<ReportingRowState> {\n        const { rule } = props;\n        return {\n            stateRule: rule\n        };\n    }\n\n    setSourceEp = (sourceEp: Endpoint): void => {\n        const { stateRule } = this.state;\n        stateRule.endpoint = sourceEp;\n        this.setState({ stateRule });\n    }\n    setCluster = (cluster: Cluster): void => {\n        const { stateRule } = this.state;\n        stateRule.cluster = cluster;\n        this.setState({ stateRule });\n    }\n\n    setAttribute = (attr: Attribute): void => {\n        const { stateRule } = this.state;\n        stateRule.attribute = attr;\n        this.setState({ stateRule });\n    }\n\n    changeHandler = (event: ChangeEvent<HTMLInputElement>): void => {\n        const { stateRule } = this.state;\n        const { name, value } = event.target;\n        stateRule[name] = value;\n        this.setState({ stateRule });\n    }\n\n    applyRule = (): void => {\n        const { onApply } = this.props;\n        const { stateRule } = this.state;\n        onApply(stateRule);\n    }\n\n    disableRule = (): void => {\n        const { onApply } = this.props;\n        const { stateRule } = this.state;\n        // eslint-disable-next-line @typescript-eslint/camelcase\n        onApply({ ...stateRule, maximum_report_interval: 0xFFFF });\n    }\n\n\n    render() {\n        const { rule, device } = this.props;\n        const { stateRule } = this.state;\n        const sourceEndpoints = getEndpoints(device);\n\n        return (<div className=\"row pb-2 border-bottom\">\n\n            <div className=\"col-md-2\">\n                <EndpointPicker label=\"Endpoint\" disabled={!rule.isNew} values={sourceEndpoints} value={stateRule.endpoint} onChange={this.setSourceEp} />\n            </div>\n            <div className=\"col-md-2\">\n                <ClusterPicker label=\"Cluster\" disabled={!stateRule.endpoint} pickerType={PickerType.SINGLE} clusters={getClusters(device, stateRule.endpoint, stateRule.cluster)} value={stateRule.cluster} onChange={this.setCluster} />\n            </div>\n            <div className=\"col-md-2\">\n                <AttributePicker label=\"Attribute\" value={stateRule.attribute} cluster={stateRule.cluster} onChange={this.setAttribute} />\n            </div>\n            <div className=\"col-md-2\">\n                <div className=\"form-group\">\n                    <label className=\"form-label text-nowrap\">Min rep interval</label>\n                    <input onChange={this.changeHandler} value={stateRule.minimum_report_interval} required type=\"number\" name=\"minimum_report_interval\" className=\"form-control\" />\n                </div>\n            </div>\n            <div className=\"col-md-1\">\n                <div className=\"form-group\">\n                    <label className=\"form-label text-nowrap\">Max rep interval</label>\n                    <input onChange={this.changeHandler} value={stateRule.maximum_report_interval} required type=\"number\" name=\"maximum_report_interval\" className=\"form-control\" />\n                </div>\n            </div>\n            <div className=\"col-md-1\">\n                <div className=\"form-group\">\n                    <label className=\"form-label text-nowrap\">Min rep change</label>\n                    <input placeholder=\"Enter 65535 to disable reporting\" onChange={this.changeHandler} value={stateRule.reportable_change} required type=\"number\" name=\"reportable_change\" className=\"form-control\" />\n                </div>\n\n            </div>\n            <div className=\"col-md-2\">\n                <div className=\"form-group\">\n                    <label className=\"form-label\">Actions</label>\n                    <div className=\"form-group\">\n                        <div className=\"btn-group\" role=\"group\" aria-label=\"Basic example\">\n                            <Button<void> disabled={!isValidRule(stateRule)} className=\"btn btn-primary\" onClick={this.applyRule}>Apply</Button>\n                            {!stateRule.isNew ? <Button<void> promt className=\"btn btn-danger\" onClick={this.disableRule}>Disable</Button> : null}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>);\n    }\n}\n","import React, { Component } from \"react\";\nimport { Device, Cluster, Endpoint, Attribute } from \"../../types\";\n\nimport actions, { ReportingApi } from \"../../actions/actions\";\nimport { connect } from \"unistore/react\";\nimport { GlobalState, Group } from \"../../store\";\nimport ReportingRow from \"./reporting-row\";\n\n\ninterface PropsFromStore {\n    devices: Map<string, Device>;\n    groups: Group[];\n}\ninterface ReportingProps {\n    device: Device;\n}\n\nexport interface NiceReportingingRule {\n    id?: number;\n    isNew?: number;\n    endpoint: Endpoint;\n\n    cluster: Cluster;\n    attribute: Attribute;\n    minimum_report_interval: number;\n    maximum_report_interval: number;\n    reportable_change: number;\n}\nconst convertBidningsIntoNiceStructure = (device: Device): NiceReportingingRule[] => {\n    const reportings: NiceReportingingRule[] = [];\n    device.endpoints.forEach((description, endpoint) => {\n        description.configured_reportings\n            .forEach(reportingRule => {\n                reportings.push({\n                    ...reportingRule,\n                    endpoint\n                } as NiceReportingingRule)\n            });\n    });\n    return reportings;\n}\ntype ReportingState = {\n    reportingRules: NiceReportingingRule[];\n}\n\nconst rule2key = (rule: NiceReportingingRule): string => `${rule.isNew}${rule.endpoint}${rule.cluster}-${rule.attribute}`;\n\nexport class Reporting extends Component<ReportingProps & PropsFromStore & ReportingApi, ReportingState> {\n    state: ReportingState = {\n        reportingRules: []\n    }\n    static getDerivedStateFromProps(props: Readonly<ReportingProps & PropsFromStore>): Partial<ReportingState> {\n        const { device } = props;\n        // const endpoints = getEndpoints(device);\n        const reportingRules = convertBidningsIntoNiceStructure(device);\n\n        // eslint-disable-next-line @typescript-eslint/camelcase\n        reportingRules.push({ isNew: Date.now(), reportable_change: 0, minimum_report_interval: 60, maximum_report_interval: 3600 } as NiceReportingingRule);\n        return {\n            reportingRules\n        };\n    }\n\n    onApply = (rule: NiceReportingingRule) => {\n        const { configureReport, device } = this.props;\n        // eslint-disable-next-line @typescript-eslint/camelcase\n        const { cluster, endpoint, attribute, minimum_report_interval, maximum_report_interval, reportable_change } = rule;\n        configureReport(`${device.friendly_name}/${endpoint}`, {\n            // eslint-disable-next-line @typescript-eslint/camelcase\n            cluster, attribute, minimum_report_interval, maximum_report_interval, reportable_change\n        });\n    }\n    render() {\n        const { device } = this.props;\n        const { reportingRules } = this.state;\n\n        return (\n            <div className=\"container-fluid\">\n                {\n                    reportingRules.map((rule) =>\n                        <ReportingRow\n                            key={rule2key(rule)}\n                            rule={rule}\n                            device={device}\n                            onApply={this.onApply}\n                        />)\n                }\n\n            </div>\n        );\n    }\n}\n\nconst mappedProps = [\"devices\", \"groups\"];\nconst ConnectedReportingPage = connect<ReportingProps, {}, GlobalState, PropsFromStore & ReportingApi>(mappedProps, actions)(Reporting);\nexport default ConnectedReportingPage\n","import React, { Component } from \"react\";\nimport { Device, DeviceState } from \"../../types\";\nimport actions from \"../../actions/actions\";\nimport { StateApi } from \"../../actions/StateApi\";\nimport { connect } from \"unistore/react\";\nimport { GlobalState } from \"../../store\";\n\ninterface PropsFromStore {\n    deviceStates: Map<string, DeviceState>;\n\n}\ninterface StatesProps {\n    device: Device;\n}\n\nclass States extends Component<StatesProps & PropsFromStore & StateApi, {}> {\n    setStateValue = (name: string, value: unknown): void => {\n        const { setStateValue, device } = this.props;\n        setStateValue(device.friendly_name, name, value);\n    };\n\n    render() {\n        const { device, deviceStates } = this.props;\n        const deviceState = deviceStates.get(device.friendly_name) ?? {};\n        return <pre>{JSON.stringify(deviceState, null, 4)}</pre>;\n    }\n}\n\nconst mappedProps = [\"deviceStates\"];\nconst ConnectedDeviceStates = connect<StatesProps, {}, GlobalState, StateApi>(mappedProps, actions)(States);\nexport default ConnectedDeviceStates;\n","\nimport { GenericExposedFeature, BinaryFeature, NumericFeature, EnumFeature, LightFeature, CompositeFeature, SwitchFeature, CoverFeature, LockFeature, ColorFeature, TextualFeature, ClimateFeature } from \"../../types\";\n\nexport function isBinaryFeature(feature: GenericExposedFeature | CompositeFeature): feature is BinaryFeature {\n  return feature.type === \"binary\";\n}\n\nexport function isNumericFeature(feature: GenericExposedFeature | CompositeFeature): feature is NumericFeature {\n  return feature.type === \"numeric\";\n}\nexport function isTextualFeature(feature: GenericExposedFeature | CompositeFeature): feature is TextualFeature {\n  return feature.type === \"text\";\n}\n\nexport function isEnumFeature(feature: GenericExposedFeature | CompositeFeature): feature is EnumFeature {\n  return feature.type === \"enum\";\n}\n\nexport function isLightFeature(feature: GenericExposedFeature | CompositeFeature): feature is LightFeature {\n  return feature.type === \"light\";\n}\nexport function isSwitchFeature(feature: GenericExposedFeature | CompositeFeature): feature is SwitchFeature {\n  return feature.type === \"switch\";\n}\n\nexport function isCoverFeature(feature: GenericExposedFeature | CompositeFeature): feature is CoverFeature {\n  return feature.type === \"cover\";\n}\n\nexport function isLockFeature(feature: GenericExposedFeature | CompositeFeature): feature is LockFeature {\n  return feature.type === \"lock\";\n}\n\nexport function isCompositeFeature(feature: GenericExposedFeature | CompositeFeature): feature is CompositeFeature {\n  return feature.type === \"composite\" && (feature.name !== \"color_xy\" && feature.name !== \"color_hs\");\n}\n\nexport function isColorFeature(feature: GenericExposedFeature | CompositeFeature): feature is ColorFeature {\n  return feature.type === \"composite\" && (feature.name == \"color_xy\" || feature.name == \"color_hs\");\n}\n\nexport function isClimateFeature(feature: GenericExposedFeature | CompositeFeature): feature is ClimateFeature {\n  return feature.type === \"climate\";\n}\n","import { JSONSchema7 } from \"json-schema\";\n\nexport type DeviceType = \"EndDevice\" | \"Router\" | \"Coordinator\";\n\n\ninterface OTAState {\n    state: \"available\" | \"updating\";\n    progress: number;\n    remaining: number;\n}\nexport type RGBColor = {\n    r: number;\n    g: number;\n    b: number;\n}\nexport type HueSaturationColor = {\n    hue: number;\n    saturation: number;\n}\n\nexport type XYColor = {\n    x: number;\n    y: number;\n}\nexport type AnyColor = RGBColor | XYColor | HueSaturationColor;\nexport interface DeviceState {\n    last_seen?: string | number;\n    elapsed?: number;\n    linkquality: number;\n    update?: OTAState;\n    [k: string]: string | number | boolean | OTAState | AnyColor | undefined;\n}\n\nexport type Cluster = string;\nexport type Attribute = string;\n\nexport type Endpoint = string | number;\n\n\n\n\nexport interface Meta {\n    revision: number;\n    transportrev: number;\n    product: number;\n    majorrel: number;\n    minorrel: number;\n    maintrel: number;\n}\n\nexport interface Coordinator {\n    type: string;\n    meta: Meta;\n}\n\nexport interface Network {\n    channel: number;\n    pan_id: number;\n    extended_pan_id: number[];\n}\n\nexport interface DeviceConfig {\n    [k: string]: object | string | number | boolean;\n}\nexport interface Z2MConfig {\n    homeassistant: boolean;\n    advanced: {\n        elapsed: boolean;\n        last_seen: 'disable' | 'ISO_8601' | 'ISO_8601_local' | 'epoch';\n        legacy_api: boolean;\n    };\n    devices: {\n        [key: string]: DeviceConfig;\n    };\n    device_options: DeviceConfig;\n    [k: string]: object | string | number | boolean;\n}\nexport interface BridgeConfig {\n    version: string;\n    commit: string;\n    coordinator: Coordinator;\n    network: Network;\n    log_level: string;\n    permit_join: boolean;\n\n}\nexport type BridgeState = \"online\" | \"offline\";\nexport interface BridgeInfo {\n    config?: Z2MConfig;\n    config_schema: JSONSchema7;\n    permit_join: boolean;\n    commit?: string;\n    version?: string;\n    coordinator?: {\n        meta?: {\n            revision?: string;\n        };\n        type?: string;\n    };\n    device_options: object;\n    restart_required: boolean;\n}\n\nexport type PowerSource = \"Battery\" | \"Mains (single phase)\" | \"DC Source\";\n\nexport type GenericFeatureType = \"numeric\" | \"binary\" | \"enum\" | \"text\";\nexport type ComposeiteFeatureType = \"fan\" | \"light\" | \"switch\" | \"cover\" | \"lock\" | \"composite\" | \"climate\";\nexport type AllPossibleFeatures = GenericFeatureType & ComposeiteFeatureType;\n\n\nexport enum FeatureAccessMode {\n    NONE,\n    ACCESS_STATE = 0b001,\n    ACCESS_WRITE = 0b010,\n    ACCESS_READ = 0b100,\n}\nexport interface GenericExposedFeature {\n    type: GenericFeatureType;\n    name: string;\n    unit?: \"string\";\n    access: FeatureAccessMode;\n    endpoint?: Endpoint;\n    property: string;\n    description?: string;\n}\n\nexport interface BinaryFeature extends GenericExposedFeature {\n    type: \"binary\";\n    value_on: unknown;\n    value_off: unknown;\n    value_toggle?: unknown;\n}\n\nexport interface CompositeFeature extends Omit<GenericExposedFeature, \"type\"> {\n    type: ComposeiteFeatureType;\n    features: (GenericExposedFeature | CompositeFeature)[];\n}\n\nexport type GenericOrCompositeFeature = GenericExposedFeature | CompositeFeature;\n\nexport interface NumericFeaturePreset {\n    name: string;\n    value: number;\n    description?: string;\n}\nexport interface NumericFeature extends GenericExposedFeature {\n    type: \"numeric\";\n    value_min?: number;\n    value_max?: number;\n    presets?: NumericFeaturePreset[];\n}\n\nexport interface TextualFeature extends GenericExposedFeature {\n    type: \"text\";\n}\n\nexport interface EnumFeature extends GenericExposedFeature {\n    type: \"enum\";\n    values: unknown[];\n}\n\nexport interface LightFeature extends CompositeFeature {\n    type: \"light\";\n}\n\nexport interface SwitchFeature extends CompositeFeature {\n    type: \"switch\";\n}\n\nexport interface CoverFeature extends CompositeFeature {\n    type: \"cover\";\n}\n\nexport interface LockFeature extends CompositeFeature {\n    type: \"lock\";\n}\nexport interface FanFeature extends CompositeFeature {\n    type: \"fan\";\n}\n\nexport interface ClimateFeature extends CompositeFeature {\n    type: \"climate\";\n}\n\nexport interface ColorFeature extends CompositeFeature {\n    type: \"composite\";\n    name: \"color_xy\" | \"color_hs\";\n    features: NumericFeature[];\n}\n\nexport interface DeviceDefinition {\n    description: string;\n    model: string;\n    supports: string;\n    vendor: string;\n    exposes: GenericExposedFeature[] | CompositeFeature[];\n    supports_ota: boolean;\n}\nexport interface ReportingConfig {\n    cluster: Cluster;\n    attribute: Attribute;\n    maximum_report_interval: number;\n    minimum_report_interval: number;\n    reportable_change: number;\n}\nexport interface EndpointDescription {\n    bindings: BindRule[];\n    configured_reportings: ReportingConfig[];\n    clusters: {\n        input: Cluster[];\n        output: Cluster[];\n    };\n}\n\nexport interface Device {\n    ieee_address: string;\n    type: DeviceType;\n    network_address: number;\n    model: string;\n    friendly_name: string;\n    power_source: PowerSource;\n    model_id: string;\n    interviewing: boolean;\n    interview_completed: boolean;\n    software_build_id: number;\n    supported: boolean;\n    definition?: DeviceDefinition;\n    date_code: string;\n    endpoints: Map<Endpoint, EndpointDescription>;\n}\n\nexport type ObjectType = \"device\" | \"group\";\nexport interface BindRule {\n    cluster: Cluster;\n    target: {\n        id?: number;\n        endpoint?: Endpoint;\n        ieee_address?: string;\n        type: \"endpoint\" | \"group\";\n    };\n\n}\nexport type SortDirection = \"asc\" | \"desc\";\n\nexport interface TouchLinkDevice {\n    ieee_address: string;\n    channel: number;\n}\n\n\nexport type KVP = Record<string, unknown>\n","import React from \"react\";\n\nimport cx from \"classnames\";\ntype DisplayValueProps = {\n    name: string;\n    value: unknown;\n}\n\nconst booleansMap = {\n    contact: new Map<boolean, string | JSX.Element>([\n        [true, 'Closed'],\n        [false, 'Open'],\n    ]),\n\n    occupancy: new Map([\n        [true, 'Occupied'],\n        [false, 'Clear']\n    ]),\n\n    // eslint-disable-next-line @typescript-eslint/camelcase\n    water_leak: new Map<boolean, string | JSX.Element>([\n        [true, <span className={cx(\"text-danger\", \"animation-blinking\")} key=\"Leaking\">Leaking</span>],\n        [false, 'Clear']\n    ]),\n\n    tamper: new Map<boolean, string | JSX.Element>([\n        [true, <span className={cx(\"text-danger\", \"animation-blinking\")} key=\"tampered\">Tampered</span>],\n        [false, 'Clear']\n    ]),\n\n    _default: new Map([\n        [true, 'true'],\n        [false, 'false']\n    ])\n};\n\nexport function DisplayValue(props: DisplayValueProps) {\n    const { value, name } = props;\n    switch (typeof value) {\n        case 'boolean':\n            const mapValue = booleansMap[name] || booleansMap._default;\n            return <>{mapValue.get(value)}</>;\n        case \"undefined\":\n            return <>N/A</>;\n        case \"object\":\n            return <>{value === null ? 'null' : JSON.stringify(value)}</>;\n        case \"string\":\n            return <>{value === \"\" ? <small className=\"text-muted\">empty string</small> : value}</>;\n        default:\n            return <>{JSON.stringify(value)}</>;\n    }\n}\n","import React, { ChangeEvent, FunctionComponent } from \"react\";\n\nimport Button from \"../button\";\nimport { DisplayValue } from \"../display-value/DisplayValue\";\n\n\ntype ToggleProps = {\n    onChange(value: unknown): void;\n    value: unknown;\n    name: string;\n    valueOn: unknown;\n    valueOff: unknown;\n    minimal?: boolean;\n}\ntype ControlButtonProps = {\n    value: unknown;\n    onClick(value: unknown): void;\n    name: string;\n}\nconst ControlButton: FunctionComponent<ControlButtonProps> = (props) => {\n    const { value, onClick, name } = props;\n    return <Button<unknown> className=\"btn btn-link\" item={value} onClick={onClick}>\n        <DisplayValue value={value} name={name} />\n    </Button>\n}\n\nconst Toggle: FunctionComponent<ToggleProps> = (props) => {\n    const { onChange, value, valueOn, valueOff, minimal, name } = props;\n\n    const onCheckboxChange = (e: ChangeEvent<HTMLInputElement>) => onChange(e.target.checked ? valueOn : valueOff);\n    const valueExists = value !== undefined && value !== null;\n    const showOnOffButtons = !minimal || (minimal && !valueExists);\n    return (\n        <div>\n            {showOnOffButtons && <ControlButton value={valueOff} name={name} onClick={onChange} />}\n            {valueExists ? (\n                <div className=\"form-check form-switch form-check-inline align-middle me-0\">\n                    <input className=\"form-check-input\" type=\"checkbox\" checked={value === valueOn} onChange={onCheckboxChange} />\n                </div>\n            ) : <i className=\"fa fa-question\" title=\"Current value unknown\"></i>}\n            {showOnOffButtons && <ControlButton value={valueOn} name={name} onClick={onChange} />}\n\n        </div>\n    )\n}\n\nexport default Toggle;\n","\nimport React, { FunctionComponent, PropsWithChildren } from \"react\";\nimport { DeviceState, Device, Endpoint, GenericExposedFeature, CompositeFeature } from \"../../types\";\nimport { DisplayValue } from \"../display-value/DisplayValue\";\n\nimport { FetatureWrapperProps } from \"./composite/FeatureWrapper\";\n\nexport interface BaseFeatureProps<T> extends Omit<React.HTMLAttributes<HTMLDivElement>, \"onChange\"> {\n    feature: T;\n    deviceState: DeviceState;\n    device: Device;\n    onChange(endpoint: Endpoint, value: object): void;\n    onRead(endpoint: Endpoint, value: object): void;\n    // featureWrapperClass: React.ComponentType<FetatureWrapperProps>;\n    featureWrapperClass: FunctionComponent<PropsWithChildren<FetatureWrapperProps>>;\n    minimal?: boolean;\n\n}\n\n\nexport const BaseViewer: FunctionComponent<BaseFeatureProps<GenericExposedFeature>> = (props) => {\n    const { feature: { property, unit, name}, deviceState } = props;\n    return <div><strong><DisplayValue value={deviceState[property]} name={name} /></strong>{unit ? <small className=\"text-muted ms-1\">{unit}</small> : null}</div>\n}\n\nexport const NoAccessError: FunctionComponent<BaseFeatureProps<GenericExposedFeature | CompositeFeature>> = ({ feature: { access } }) => <div className=\"alert alert-warning p-0\" role=\"alert\">Unknown acces {JSON.stringify(access, null, 4)}</div>;\n","import React, { FunctionComponent } from \"react\";\n\nimport { BinaryFeature, Endpoint, FeatureAccessMode } from \"../../../types\";\nimport Toggle from \"../../toggle\";\n\nimport { BaseFeatureProps, BaseViewer, NoAccessError } from \"../base\";\n\ntype BinaryProps = BaseFeatureProps<BinaryFeature>;\n\nconst Binary: FunctionComponent<BinaryProps> = (props) => {\n    const { feature: { access, endpoint, name, property, value_off: valueOff, value_on: valueOn }, deviceState, onChange, minimal } = props;\n    if (access & FeatureAccessMode.ACCESS_WRITE) {\n        return <Toggle\n            onChange={(value) => onChange(endpoint as Endpoint, { [property]: value })}\n            value={deviceState[property]}\n            valueOn={valueOn}\n            valueOff={valueOff}\n            minimal={minimal}\n            name={name}\n        />\n    } else if (access & FeatureAccessMode.ACCESS_STATE) {\n        return <BaseViewer {...props} />\n    } else {\n        return <NoAccessError {...props} />\n    }\n}\nexport default Binary;\n","import React, { FunctionComponent } from \"react\";\nimport { ClimateFeature } from \"../../../types\";\n\nimport { BaseFeatureProps } from \"../base\";\nimport Composite from \"../composite/composite\";\n\n\ntype ClimateProps = BaseFeatureProps<ClimateFeature>\n\nconst Climate: FunctionComponent<ClimateProps> = (props) => <Composite type=\"climate\" {...props} />;\n\nexport default Climate;\n\n\n","import React, { FunctionComponent } from \"react\";\nimport { CoverFeature } from \"../../../types\";\nimport { ValueWithLabelOrPrimitive } from \"../../enum-editor/enum-editor\";\nimport { BaseFeatureProps } from \"../base\";\nimport Composite from \"../composite/composite\";\n\nconst stepsConfiguration = {\n  position: [0, 25, 50, 75, 100].map<ValueWithLabelOrPrimitive>(item => ({ value: item, name: item + '' })),\n  tilt: [0, 25, 50, 75, 100].map<ValueWithLabelOrPrimitive>(item => ({ value: item, name: item + '' }))\n};\n\ntype CoverProps = BaseFeatureProps<CoverFeature>\n\nconst Cover: FunctionComponent<CoverProps> = (props) => <Composite type=\"cover\" {...props} stepsConfiguration={stepsConfiguration} />;\n\nexport default Cover;\n\n\n","import React, { FunctionComponent, InputHTMLAttributes, useEffect, useState } from \"react\";\nimport * as convertColors from \"color-convert\";\nimport { AnyColor, XYColor, HueSaturationColor } from \"../../types\";\nimport Button from \"../button\";\n\n\ntype Payload = AnyColor;\n\nexport type ColorFormat = \"color_xy\" | \"color_hs\";\ntype ColorProps = {\n    value: Payload;\n    steps?: string[];\n    format: ColorFormat;\n    onChange(value: object): void;\n    minimal?: boolean;\n}\n\nexport const toRGB = (source: AnyColor, sourceFormat: ColorFormat): string => {\n    switch (sourceFormat) {\n        case \"color_xy\":\n            {\n                const { x = 0, y = 0 } = source as XYColor;\n                const z = 1.0 - x - y;\n                const Y = 1;\n                const X = (Y / y) * x;\n                const Z = (Y / y) * z;\n                return '#' + convertColors.xyz.hex([X * 100.0, Y * 100.0, Z * 100.0]);\n            }\n\n        case \"color_hs\":\n            {\n                const { hue = 0, saturation = 0 } = source as HueSaturationColor;\n                return '#' + convertColors.hsv.hex([hue, saturation, 100]);\n            }\n        default:\n            return '#FFFFFF';\n    }\n}\n\nconst rgbToTargetFormat = (source: string, targetFormat: ColorFormat): object => {\n    switch (targetFormat) {\n        case \"color_hs\":\n            const [hue, saturation, v] = convertColors.hex.hsv(source);\n            return { hue, saturation };\n\n\n        case \"color_xy\":\n            const [X, Y, Z] = convertColors.hex.xyz(source);\n            const x = X / (X + Y + Z);\n            const y = Y / (X + Y + Z);\n            return { x, y };\n\n        default:\n            return { hex: source };\n    }\n\n}\nconst pridePallete = ['#FF0018', '#FFA52C', '#FFFF41', '#008018', '#0000F9', '#86007D'];\nconst ColorEditor: FunctionComponent<ColorProps & Omit<InputHTMLAttributes<HTMLInputElement>, 'onChange' | 'value'>> = (props) => {\n\n    const { onChange, value = {} as AnyColor, format, steps = pridePallete, minimal, ...rest } = props;\n    const [currentColor, setCurrentColor] = useState<string>(toRGB(value, format));\n    useEffect(() => {\n        setCurrentColor(toRGB(value, format))\n    }, [value, format]);\n\n    return <>\n        {!minimal && <div className=\"btn-group me-2 float-start\">\n            {\n                steps.map(step => <Button<string>\n                    className=\"btn\"\n                    style={{ backgroundColor: step }}\n                    key={step}\n                    item={step}\n                    title={step}\n                    onClick={(item) => onChange(rgbToTargetFormat(item, format))}>&nbsp;&nbsp;&nbsp;</Button>)\n            }\n        </div>}\n        <input\n            type=\"color\"\n            className=\"form-control form-control-color\"\n            value={currentColor}\n            style={{ minWidth: 40 }}\n            onChange={e => {\n                onChange(rgbToTargetFormat(e.target.value, format))\n            }}\n            {...rest}\n        />\n    </>\n\n}\n\nexport default ColorEditor;\n","import React, { FunctionComponent } from \"react\";\nimport { AnyColor, ColorFeature, Endpoint } from \"../../../../types\";\nimport ColorEditor from \"../../../color-editor/color-editor\";\n\nimport { BaseFeatureProps } from \"../../base\";\n\ntype ColorProps = BaseFeatureProps<ColorFeature>;\n\nconst Light: FunctionComponent<ColorProps> = (props) => {\n\n    const { deviceState, feature, onChange, minimal } = props;\n    const value = {};\n    for (const innerFeature of feature.features) {\n        value[innerFeature.name] = deviceState[feature.property]?.[innerFeature.property] ?? 0;\n    }\n    return <ColorEditor\n        onChange={(color) => onChange(feature.endpoint as Endpoint, { color })}\n        value={value as AnyColor}\n        format={feature.name}\n        minimal={minimal} />\n}\nexport default Light;\n","import React, { FunctionComponent } from \"react\";\nimport Button from \"../button\";\nimport cx from \"classnames\";\ntype Primitive = number | string;\n\nexport type ValueWithLabel = {\n    value: number;\n    name: string;\n    description?: string;\n};\n\nexport type ValueWithLabelOrPrimitive = ValueWithLabel | Primitive;\n\ntype EnumProps = {\n    value?: ValueWithLabelOrPrimitive;\n    onChange(value: unknown): void;\n    values: ValueWithLabelOrPrimitive[];\n    minimal?: boolean;\n}\n\n\nfunction isPrimitive(step: ValueWithLabelOrPrimitive): step is Primitive {\n    return step === null || [\"number\", \"string\", \"undefined\"].includes(typeof step);\n}\n\nconst EnumEditor: FunctionComponent<EnumProps> = (props) => {\n    const { onChange, values, value, minimal } = props;\n\n    if (minimal) {\n        const onSelectChange = (e) => {\n            const selectedValue = values.find(v => isPrimitive(v) ? v == e.target.value : v.value == e.target.value);\n            onChange(selectedValue);\n        }\n        return <select className=\"form-control\" onChange={onSelectChange}\n            value={isPrimitive(value as ValueWithLabelOrPrimitive) ? value as string : (value as ValueWithLabel).value}>\n            <option key=\"hidded\" hidden>----</option>\n            {values.map(v => <option\n                key={isPrimitive(v) ? v : v.name}\n                value={isPrimitive(v) ? v : v.value}>{isPrimitive(v) ? v : v.name}\n            </option>)}\n        </select>\n\n    }\n    return <div className=\"btn-group me-2\">\n        {\n            values.map(v => <Button<ValueWithLabelOrPrimitive>\n                className={cx(\"btn btn-outline-secondary\", { active: isPrimitive(v) ? v === value : v.value == (isPrimitive(value as ValueWithLabelOrPrimitive) ? value : (value as ValueWithLabel).value) })}\n                onClick={item => onChange(item)}\n                key={isPrimitive(v) ? v : v.name}\n                item={isPrimitive(v) ? v : v.value}\n                title={isPrimitive(v) ? v as string : v.description}\n            >{isPrimitive(v) ? v : v.name}</Button>)\n        }\n    </div>;\n}\nexport default EnumEditor;\n","\n\nimport React, { FunctionComponent } from \"react\";\n\nimport { Endpoint, EnumFeature, FeatureAccessMode } from \"../../../types\";\nimport EnumEditor, { ValueWithLabelOrPrimitive } from \"../../enum-editor/enum-editor\";\n\nimport { BaseFeatureProps, BaseViewer, NoAccessError } from \"../base\";\n\ntype EnumProps = BaseFeatureProps<EnumFeature>\n\nconst Enum: FunctionComponent<EnumProps> = (props) => {\n  const { onChange, feature: { access, name, values, endpoint, property }, deviceState, minimal } = props;\n  if (access & FeatureAccessMode.ACCESS_WRITE) {\n    return <EnumEditor\n      onChange={(value) => onChange(endpoint as Endpoint, { [name]: value })}\n      values={values as unknown as ValueWithLabelOrPrimitive[]}\n        value={deviceState[property] as ValueWithLabelOrPrimitive}\n        minimal={minimal}\n    />\n  } else if (access & FeatureAccessMode.ACCESS_STATE) {\n    return <BaseViewer {...props} />\n  } else {\n    return <NoAccessError {...props} />\n  }\n}\nexport default Enum;\n","import React, { FunctionComponent } from \"react\";\nimport { LightFeature } from \"../../../types\";\nimport { scale } from \"../../../utils\";\nimport { ValueWithLabelOrPrimitive } from \"../../enum-editor/enum-editor\";\nimport { BaseFeatureProps } from \"../base\";\nimport Composite from \"../composite/composite\";\n\ntype LightProps = BaseFeatureProps<LightFeature>\nconst stepsConfiguration = {\n  brightness: [0, 25, 50, 75, 100].map<ValueWithLabelOrPrimitive>(item => ({ value: scale(item, [0, 100], [0, 255]), name: item + '%' })),\n  'color_temp': [1000, 2000, 3000, 4000, 5000, 6500].map<ValueWithLabelOrPrimitive>(kelvin => ({ value: 1000000.0 / kelvin, name: kelvin + 'K' }))\n};\n\nconst Light: FunctionComponent<LightProps> = (props) => <Composite type=\"light\" {...props} stepsConfiguration={stepsConfiguration} />;\nexport default Light;\n","import React, { FunctionComponent } from \"react\";\nimport { LockFeature } from \"../../../types\";\nimport { BaseFeatureProps } from \"../base\";\nimport Composite from \"../composite/composite\";\n\ntype LockProps = BaseFeatureProps<LockFeature>\n\nconst Lock: FunctionComponent<LockProps> = (props) => <Composite type=\"lock\" {...props} />\nexport default Lock;","import React, { Fragment, FunctionComponent, InputHTMLAttributes, useEffect, useState } from \"react\";\nimport { randomString } from \"../../utils\";\nimport cx from \"classnames\";\nimport EnumEditor, { ValueWithLabelOrPrimitive } from \"../enum-editor/enum-editor\";\n\n\n\ntype RangeProps = {\n    value: number;\n    unit?: string;\n    onChange(value: object | number): void;\n    steps?: ValueWithLabelOrPrimitive[];\n    minimal?: boolean;\n}\n\nconst RangeEditor: FunctionComponent<RangeProps & Omit<InputHTMLAttributes<HTMLInputElement>, 'onChange'>> = (props) => {\n    const { onChange, value, min, max, unit, steps, minimal, ...rest } = props;\n    const [id, setId] = useState<string>(randomString(5));\n    const [currentValue, setCurrentValue] = useState<number>(value)\n\n    useEffect(() => {\n        setCurrentValue(value)\n    }, [value]);\n\n    const showRange = min !== undefined && max !== undefined;\n    return <div className=\"input-group align-items-center\">\n        {!minimal && steps ? <EnumEditor values={steps} onChange={onChange} value={currentValue} /> : null}\n        {showRange ? <input\n            id={id}\n            min={min}\n            max={max}\n            type=\"range\"\n            className=\"form-range form-control border-0\"\n            value={currentValue}\n            onChange={e => setCurrentValue(e.target.valueAsNumber)}\n            onMouseUp={(() => onChange(currentValue))}\n            {...rest}\n        /> : null}\n        {(!minimal || !showRange) && <input\n            type=\"number\"\n            className={cx(\"form-control\", { 'ms-1': showRange })}\n            value={currentValue}\n            onChange={e => setCurrentValue(e.target.valueAsNumber)}\n            onBlur={() => onChange(currentValue)}\n            {...rest}\n            style={showRange ? { 'maxWidth': '100px' } : {}}\n        />}\n        {(!minimal && unit) ? <span className=\"input-group-text\" style={{ 'minWidth': '66px' }}>{unit}</span> : null}\n    </div>\n}\n\nexport default RangeEditor;\n","import React, { FunctionComponent } from \"react\";\nimport { Endpoint, FeatureAccessMode, NumericFeature } from \"../../../types\";\nimport { ValueWithLabelOrPrimitive } from \"../../enum-editor/enum-editor\";\nimport RangeEditor from \"../../range-editor/range-editor\";\nimport { BaseFeatureProps, BaseViewer, NoAccessError } from \"../base\";\n\ninterface NumericProps extends BaseFeatureProps<NumericFeature> {\n    steps?: ValueWithLabelOrPrimitive[];\n}\n\nconst Numeric: FunctionComponent<NumericProps> = (props) => {\n    const { feature: { presets, access, endpoint, name, property, unit, value_max: valueMax, value_min: valueMin }, deviceState, steps, onChange, minimal } = props;\n    if (access & FeatureAccessMode.ACCESS_WRITE) {\n        return <RangeEditor\n            onChange={(value) => onChange(endpoint as Endpoint, { [name]: value })}\n            value={deviceState[property] as number ?? 0}\n            min={valueMin}\n            max={valueMax}\n            steps={presets && presets.length ? presets as ValueWithLabelOrPrimitive[] : steps}\n            unit={unit}\n            minimal={minimal}\n        />\n    } else if (access & FeatureAccessMode.ACCESS_STATE) {\n        return <BaseViewer {...props} />\n    } else {\n        return <NoAccessError {...props} />\n    }\n}\n\nexport default Numeric;\n","import React, { Fragment, FunctionComponent, InputHTMLAttributes, useEffect, useState } from \"react\";\n\ntype TextualProps = {\n  value: string;\n  unit?: string;\n  onChange(value: string): void;\n}\n\nconst TextualEditor: FunctionComponent<TextualProps & Omit<InputHTMLAttributes<HTMLInputElement>, 'onChange'>> = (props) => {\n  const { onChange, value, unit, ...rest } = props;\n  const [currentValue, setCurrentValue] = useState<string>(value)\n\n  useEffect(() => {\n    setCurrentValue(value)\n  }, [value]);\n\n  return <Fragment>\n    <input\n      type=\"text\"\n      className=\"form-control\"\n      value={currentValue}\n      onChange={e => setCurrentValue(e.target.value)}\n      onBlur={() => onChange(currentValue)}\n      {...rest}\n    />\n    {unit ? <span className=\"input-group-text\" style={{'minWidth': '66px'}}>{unit}</span> : null}\n  </Fragment>\n}\n\nexport default TextualEditor;\n","import React, { FunctionComponent } from \"react\";\nimport { Endpoint, FeatureAccessMode, TextualFeature } from \"../../../types\";\nimport TextualEditor from \"../../textual-editor/textual-editor\";\n\nimport { BaseFeatureProps, BaseViewer, NoAccessError } from \"../base\";\n\ntype TextualProps = BaseFeatureProps<TextualFeature>;\n\nconst Textual: FunctionComponent<TextualProps> = (props) => {\n  const { feature: { access, endpoint, name, property }, deviceState, onChange } = props;\n  if (access & FeatureAccessMode.ACCESS_WRITE) {\n    return <TextualEditor\n      onChange={(value) => onChange(endpoint as Endpoint, { [name]: value })}\n      value={deviceState[property] as string ?? \"\"}\n    />\n  } else if (access & FeatureAccessMode.ACCESS_STATE) {\n    return <BaseViewer {...props} />\n  } else {\n    return <NoAccessError {...props} />\n  }\n}\nexport default Textual;","import React, { FunctionComponent } from \"react\";\nimport { SwitchFeature } from \"../../../types\";\nimport { BaseFeatureProps } from \"../base\";\nimport Composite from \"../composite/composite\";\n\ntype SwitchProps = BaseFeatureProps<SwitchFeature>\n\nconst Switch: FunctionComponent<SwitchProps> = (props) => <Composite type=\"switch\" {...props} />;\n\nexport default Switch;","import React, { FunctionComponent, PropsWithChildren } from \"react\";\n\nimport { CompositeFeature, Device, DeviceState, Endpoint, GenericExposedFeature } from \"../../../types\";\nimport { isBinaryFeature, isNumericFeature, isTextualFeature, isEnumFeature, isLightFeature, isSwitchFeature, isCoverFeature, isLockFeature, isColorFeature, isClimateFeature, isCompositeFeature } from \"../../device-page/type-guards\";\nimport Binary from \"../binary/binary\";\nimport Climate from \"../climate/climate\";\nimport Cover from \"../cover/cover\";\nimport Color from \"../composite/color/color\";\nimport Enum from \"../enum/enum\";\nimport Light from \"../light/light\";\nimport Lock from \"../lock/lock\";\nimport Numeric from \"../numeric/numeric\";\nimport Textual from \"../textual/textual\";\nimport Composite from \"./composite\";\nimport Switch from \"../switch/switch\";\nimport { FetatureWrapperProps } from \"./FeatureWrapper\";\n\n\ninterface FeatureProps extends Omit<React.HTMLAttributes<HTMLDivElement>, \"onChange\"> {\n    feature: CompositeFeature | GenericExposedFeature;\n    deviceState: DeviceState;\n    device: Device;\n    stepsConfiguration?: object;\n    onChange(endpoint: Endpoint, value: object): void;\n    onRead(endpoint: Endpoint, value: object): void;\n    featureWrapperClass: FunctionComponent<PropsWithChildren<FetatureWrapperProps>>;\n    minimal?: boolean;\n}\n\nexport const Feature = (props: FeatureProps) => {\n\n    const { feature, device, deviceState, stepsConfiguration, onRead, onChange, featureWrapperClass: FeatureWrapper, minimal } = props;\n\n    const genericParams = { key: JSON.stringify(feature), device, deviceState, onChange, onRead, featureWrapperClass: FeatureWrapper, minimal };\n    const wrapperParams = { key: JSON.stringify(feature), feature, onRead, deviceState };\n\n    if (isBinaryFeature(feature)) {\n        return <FeatureWrapper {...wrapperParams} >\n            <Binary feature={feature} {...genericParams} />\n        </FeatureWrapper>\n    } else if (isNumericFeature(feature)) {\n        return <FeatureWrapper {...wrapperParams}>\n            <Numeric feature={feature} {...genericParams}\n                steps={stepsConfiguration?.[feature.name]}\n            />\n        </FeatureWrapper>\n    } else if (isTextualFeature(feature)) {\n        return <FeatureWrapper {...wrapperParams}>\n            <Textual feature={feature} {...genericParams} />\n        </FeatureWrapper>\n    } else if (isEnumFeature(feature)) {\n        return <FeatureWrapper {...wrapperParams}>\n            <Enum feature={feature} {...genericParams} />\n        </FeatureWrapper>\n    } else if (isLightFeature(feature)) {\n        return <Light feature={feature} {...genericParams} />\n    } else if (isSwitchFeature(feature)) {\n        return <Switch feature={feature} {...genericParams} />\n    } else if (isCoverFeature(feature)) {\n        return <Cover feature={feature} {...genericParams} />\n    } else if (isLockFeature(feature)) {\n        return <Lock feature={feature} {...genericParams} />\n    } else if (isColorFeature(feature)) {\n        return <FeatureWrapper {...wrapperParams}>\n            <Color feature={feature} {...genericParams} />\n        </FeatureWrapper>\n    } else if (isClimateFeature(feature)) {\n        return <Climate feature={feature} {...genericParams} />\n    } else if (isCompositeFeature(feature)) {\n        return <FeatureWrapper {...wrapperParams}>\n            <Composite type=\"composite\" feature={feature} {...genericParams} />\n        </FeatureWrapper>\n    }\n    return (<FeatureWrapper {...wrapperParams}>\n        <pre>{JSON.stringify(feature, null, 4)}</pre>\n    </FeatureWrapper>);\n}\n","import React, { Component } from \"react\";\nimport { CompositeFeature, Endpoint } from \"../../../types\";\nimport { isCompositeFeature } from \"../../device-page/type-guards\";\nimport { BaseFeatureProps } from \"../base\";\nimport Button from \"../../button\";\nimport groupBy from \"lodash/groupBy\";\nimport { Feature } from \"./Feature\";\nimport cx from \"classnames\";\n\ntype CompositeType = \"composite\" | \"light\" | \"switch\" | \"cover\" | \"lock\" | \"fan\" | \"climate\";\n\ninterface CompositeProps extends BaseFeatureProps<CompositeFeature> {\n    type: CompositeType;\n    stepsConfiguration?: object;\n    minimal?: boolean;\n}\n\ninterface CompositeState {\n    [key: string]: unknown;\n}\n\n\n\nexport default class Composite extends Component<CompositeProps, CompositeState> {\n    state: Readonly<CompositeState> = {}\n    onChange = (endpoint: Endpoint, value: object) => {\n        const { onChange, feature } = this.props;\n        if (isCompositeFeature(feature)) {\n            this.setState(value)\n        } else {\n            onChange(endpoint, value);\n        }\n    }\n    onApplyClick = () => {\n        const { onChange, feature: { endpoint, property } } = this.props;\n        onChange(endpoint as Endpoint, property ? { [property]: this.state } : this.state);\n    }\n\n    onRead = (endpoint: Endpoint, property: object) => {\n        const { onRead, feature } = this.props;\n        if (isCompositeFeature(feature)) {\n            onRead(endpoint, { [feature.property]: property })\n        } else {\n            onRead(endpoint, property);\n        }\n    }\n    render() {\n        const MAGIC_NO_ENDPOINT = 'MAGIC_NO_ENDPOINT';\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { feature, device, deviceState, onRead: _onRead, onChange: _onChange, featureWrapperClass, minimal } = this.props;\n        const { features } = feature;\n\n        const doGroupingByEndpoint = !minimal;\n        let result = [] as JSX.Element[];\n        if (doGroupingByEndpoint) {\n            const groupedFeatures = groupBy(features, f => f.endpoint ?? MAGIC_NO_ENDPOINT);\n\n            if (groupedFeatures[MAGIC_NO_ENDPOINT]) {\n                result.push(...groupedFeatures[MAGIC_NO_ENDPOINT].map(f => <Feature\n                    key={f.name + f.endpoint}\n                    feature={f}\n                    device={device}\n                    deviceState={deviceState}\n                    onChange={this.onChange}\n                    onRead={this.onRead}\n                    featureWrapperClass={featureWrapperClass}\n                    minimal={minimal}\n                />));\n                delete groupedFeatures[MAGIC_NO_ENDPOINT];\n            }\n            for (const epName in groupedFeatures) {\n                const featuresGroup = groupedFeatures[epName];\n                result.push(<div key={epName}>Endpoint: {epName}<div className=\"ps-4\">{...featuresGroup.map(f => <Feature\n                    key={f.name + f.endpoint}\n                    feature={f}\n                    device={device}\n                    deviceState={deviceState}\n                    onChange={this.onChange}\n                    onRead={this.onRead}\n                    featureWrapperClass={featureWrapperClass}\n                    minimal={minimal}\n                />)}</div></div>);\n            }\n        } else {\n            result = result.concat(features.map(f => <Feature\n                key={f.name + f.endpoint}\n                feature={f}\n                device={device}\n                deviceState={deviceState}\n                onChange={this.onChange}\n                onRead={this.onRead}\n                featureWrapperClass={featureWrapperClass}\n                minimal={minimal}\n            />));\n        }\n\n\n        if (isCompositeFeature(feature)) {\n            result.push(<div key={feature.name}><Button className={cx('btn btn-primary float-end', {'btn-sm': minimal})} onClick={this.onApplyClick}>Apply</Button></div>)\n        }\n        return result;\n\n    }\n}\n","import React, { FunctionComponent, PropsWithChildren } from \"react\";\nimport { CompositeFeature, GenericExposedFeature, Endpoint, FeatureAccessMode, DeviceState } from \"../../../types\";\nimport Button from \"../../button\";\n\n\nexport type FetatureWrapperProps = {\n    feature: CompositeFeature | GenericExposedFeature;\n    deviceState?: DeviceState;\n    onRead(endpoint: Endpoint, property: object): void;\n};\nexport const FeatureWrapper: FunctionComponent<PropsWithChildren<FetatureWrapperProps>> = (props) => {\n    const { children, feature, onRead } = props;\n    const isColor = feature.name?.startsWith(\"color_\"); //hardcode for color\n    const isReadable = (feature.access & FeatureAccessMode.ACCESS_READ) || isColor;\n    return <div className=\"row border-bottom py-1 w-100\">\n        <div className=\"col-12 col-md-3\">\n            <label className=\"col-form-label w-100\">\n                <div className=\"d-flex justify-content-between\">\n                    <strong title={JSON.stringify(feature)}>{feature.name}</strong>\n                    {isReadable ? (\n                        <Button<CompositeFeature | GenericExposedFeature> item={feature} onClick={(item) => {\n                            onRead(feature.endpoint as Endpoint, { [item.property]: \"\" })\n                        }} className=\"btn btn-primary btn-sm\"><i className=\"fa fa-sync\"></i></Button>\n                    ) : null}\n                </div>\n                {feature.description ? <small className=\"d-block text-muted\">{feature.description}</small> : null}\n            </label>\n        </div>\n        <div className=\"col-12 col-md-9 d-flex align-items-center\">\n            {children}\n        </div>\n    </div>\n}\n\n\n\n","import React, { Component } from \"react\";\nimport { CompositeFeature, Device, DeviceState } from \"../../types\";\nimport actions from \"../../actions/actions\";\nimport { StateApi } from \"../../actions/StateApi\";\nimport { connect } from \"unistore/react\";\nimport { GlobalState } from \"../../store\";\n\nimport Composite from \"../features/composite/composite\";\nimport { FeatureWrapper } from \"../features/composite/FeatureWrapper\";\ninterface PropsFromStore {\n    deviceStates: Map<string, DeviceState>;\n}\ninterface ExposesProps {\n    device: Device;\n}\nclass Exposes extends Component<ExposesProps & PropsFromStore & StateApi, {}> {\n    render() {\n        const { device, deviceStates, setDeviceState, getDeviceState } = this.props;\n        const deviceState = deviceStates.get(device.friendly_name) ?? {} as DeviceState;\n        if (device.definition?.exposes) {\n            return <Composite feature={{ features: device.definition.exposes } as CompositeFeature} type=\"composite\" device={device} deviceState={deviceState}\n                onChange={(endpoint, value) => {\n                    setDeviceState(`${device.friendly_name}${endpoint ? `/${endpoint}` : ''}`, value)\n                }}\n                onRead={(endpoint, value) => {\n                    getDeviceState(`${device.friendly_name}${endpoint ? `/${endpoint}` : ''}`, value)\n                }}\n                featureWrapperClass={FeatureWrapper}\n            />\n        } else {\n            return \"Device doesn't expose anything\"\n        }\n    }\n}\n\nconst mappedProps = [\"deviceStates\"];\n\nconst ConnectedDeviceExposes = connect<ExposesProps, {}, GlobalState, StateApi>(mappedProps, actions)(Exposes);\nexport default ConnectedDeviceExposes;\n","import React, { Component, FunctionComponent } from \"react\";\nimport { Device } from \"../../types\";\nimport treeStyle from \"./tree.css\";\n\ninterface ClustersProps {\n    device: Device;\n}\ntype ClustersComp = {\n    label: string;\n    clusters: string[];\n}\nconst ClustersComp: FunctionComponent<ClustersComp> = (props) => {\n    const { label, clusters } = props;\n    if (clusters.length) {\n        return (<li>\n            <span>{label}</span>\n            <ul>{clusters.map(cluster => <li key={cluster}><span>{cluster}</span></li>)}</ul>\n        </li>)\n    } else {\n        return null;\n    }\n\n}\nexport default class Clusters extends Component<ClustersProps, {}> {\n    render() {\n        const { device } = this.props;\n        return <dl className={`${treeStyle.tree} row`}>\n            <ul>\n                <li>\n                    <span>{device.ieee_address}</span>\n                    <ul>\n                        {Array.from(device.endpoints.entries()).map(([epName, epData]) => {\n                            return (\n                                <li key={epName}>\n                                    <span>Endpoint <strong>{epName}</strong></span>\n                                    <ul>\n                                        <ClustersComp label=\"Output clusters\" clusters={epData.clusters.output} />\n                                        <ClustersComp label=\"Input clusters\" clusters={epData.clusters.input} />\n                                    </ul>\n                                </li>\n                            );\n                        })}\n                    </ul>\n                </li>\n            </ul>\n        </dl>\n\n    }\n}\n\n","/* eslint-disable react/display-name */\nimport React, { Component, ReactNode } from \"react\";\nimport { Device, DeviceState, KVP } from \"../../types\";\nimport { connect } from \"unistore/react\";\nimport { GlobalState } from \"../../store\";\nimport actions from \"../../actions/actions\";\nimport { DeviceApi } from \"../../actions/DeviceApi\";\nimport Form from '@rjsf/bootstrap-4';\nimport { JSONSchema7 } from \"json-schema\"\nimport { ISubmitEvent, UiSchema } from \"@rjsf/core\";\nimport deviceSpecificSchema from \"./deviceSpecificSchema.json\";\nimport { ModelLink } from \"../vendor-links/verndor-links\";\ntype SettingsType = \"generic\" | \"specific\";\n\ntype DeviceSettingsProps = {\n    device: Device;\n    type: SettingsType;\n}\ninterface PropsFromStore {\n    deviceStates: Map<string, DeviceState>;\n}\nconst genericUiSchema: UiSchema = {\n    \"ui:order\": [\"friendly_name\", \"retain\", \"retention\", \"qos\", \"filtered_attributes\", \"*\"]\n};\n\nconst toType = (obj: unknown): string => ({}).toString.call(obj).match(/\\s([a-zA-Z]+)/)[1].toLowerCase()\n\nexport class DeviceSettings extends Component<DeviceSettingsProps & GlobalState & PropsFromStore & DeviceApi> {\n    updateConfig = (params: ISubmitEvent<KVP | KVP[]>): void => {\n        const { formData } = params;\n        const { setDeviceOptions, type, bridgeInfo: { config_schema: configSchema, config }, device } = this.props;\n        const genericDeviceSettingsSchema = (configSchema.definitions?.device ?? { properties: {} }) as JSONSchema7;\n        const genericPropNames = Object.keys(genericDeviceSettingsSchema.properties as KVP);\n        const deviceConfig = { ...config?.device_options, ...config?.devices[device.ieee_address] };\n\n        if (type === \"generic\") {\n            setDeviceOptions(device.ieee_address, formData);\n        } else {\n            const params = {};\n            Object.entries(deviceConfig)\n                .filter(([key]) => !genericPropNames.includes(key))\n                .forEach(([key]) => {\n                    const updatedProp = (formData as KVP[]).find(f => f.key === key) as KVP;\n                    if (updatedProp !== undefined) {\n                        params[key] = updatedProp.value;\n                    } else {\n                        params[key] = undefined;\n                    }\n                });\n            setDeviceOptions(device.ieee_address, params);\n        }\n    }\n\n    getSchemaAndConfig(): { schema: JSONSchema7, data: KVP | KVP[], uiSchema: UiSchema } {\n        const { type, bridgeInfo: { config_schema: configSchema, config }, device } = this.props;\n        const genericDeviceSettingsSchema = (configSchema.definitions?.device ?? { properties: {} }) as JSONSchema7;\n        const deviceConfig = { ...config?.device_options, ...config?.devices[device.ieee_address] };\n        if (type === \"generic\") {\n            return { schema: genericDeviceSettingsSchema, data: deviceConfig, uiSchema: genericUiSchema };\n        } else {\n            const genericPropNames = Object.keys(genericDeviceSettingsSchema.properties as KVP);\n            const filteredDeviceConfig = Object.entries(deviceConfig)\n                .filter(([key]) => !genericPropNames.includes(key))\n                .map(([key, value]) => {\n                    const valueType = toType(value);\n                    return { value, valueType, key };\n                })\n            return { schema: deviceSpecificSchema, data: filteredDeviceConfig, uiSchema: {} }\n        }\n    }\n    renderHelp(): ReactNode {\n        const { type, device } = this.props;\n        if (type === \"specific\") {\n            return <h2>Get possible device specific praemeters on <ModelLink device={device} anchor=\"device-type-specific-configuration\" /></h2>\n        }\n    }\n    render(): ReactNode {\n\n        const { schema, data, uiSchema } = this.getSchemaAndConfig();\n\n        return <>\n            {this.renderHelp()}\n            <Form schema={schema as JSONSchema7}\n                formData={data}\n                onSubmit={this.updateConfig}\n                uiSchema={uiSchema}\n\n            />\n        </>;\n\n    }\n}\n\nconst mappedProps = [\"deviceStates\", \"bridgeInfo\"];\n\nconst ConnectedDeviceSettingsPage = connect<DeviceSettingsProps, {}, GlobalState, PropsFromStore & DeviceApi>(mappedProps, actions)(DeviceSettings);\nexport default ConnectedDeviceSettingsPage;\n","import React, { Component } from \"react\";\nimport { NavLink, Redirect, RouteComponentProps, withRouter } from \"react-router-dom\";\nimport { connect } from \"unistore/react\";\nimport actions from \"../../actions/actions\";\nimport { GlobalState } from \"../../store\";\nimport DeviceInfo from \"./info\";\nimport Bind from \"./bind\";\nimport Reporting from \"./reporting\";\nimport States from \"./states\";\nimport ConnectedDeviceExposes from \"./exposes\";\nimport Clusters from \"./clusters\";\nimport DeviceSettings from \"./settings\";\nimport styles from \"./style.css\";\nimport { Device } from \"../../types\";\n\n\ntype UrlParams = {\n    dev: string;\n    tab?: TabName;\n};\ntype DevicePageProps = RouteComponentProps<UrlParams>;\n\n\ntype TabName = \"info\" | \"bind\" | \"state\" | \"exposes\" | \"clusters\" | \"reporting\" | \"settings\" | \"settings-specific\";\nconst getDeviceLinks = (dev: string) => ([\n    {\n        title: 'About',\n        url: `/device/${dev}/info`\n    },\n    {\n        title: 'Exposes',\n        url: `/device/${dev}/exposes`\n    },\n    {\n        title: 'Bind',\n        url: `/device/${dev}/bind`\n    },\n    {\n        title: 'Reporting',\n        url: `/device/${dev}/reporting`\n    },\n    {\n        title: 'Settings',\n        url: `/device/${dev}/settings`\n    },\n    {\n        title: 'Settings(specific)',\n        url: `/device/${dev}/settings-specific`\n    },\n    {\n        title: 'State',\n        url: `/device/${dev}/state`\n    },\n    {\n        title: 'Clusters',\n        url: `/device/${dev}/clusters`\n    }\n]);\nexport class DevicePage extends Component<DevicePageProps & GlobalState, {}> {\n    renderContent() {\n        const { match, devices } = this.props;\n        const { tab, dev } = match.params;\n        const device = devices.get(dev) as Device;\n\n        switch (tab) {\n            case \"info\":\n                return <DeviceInfo device={device} />;\n            case \"bind\":\n                return <Bind device={device} />;\n            case \"state\":\n                return <States device={device} />;\n            case \"exposes\":\n                return <ConnectedDeviceExposes device={device} />;\n            case \"clusters\":\n                return <Clusters device={device} />\n            case \"reporting\":\n                return <Reporting device={device} />\n            case \"settings\":\n                return <DeviceSettings device={device} type=\"generic\" />\n            case \"settings-specific\":\n                return <DeviceSettings device={device} type=\"specific\" />\n            default:\n                return <Redirect to={`/device/${dev}/info`} />;\n        }\n\n    }\n    render() {\n        const { devices, match } = this.props;\n        const { dev } = match.params;\n        const device = devices.get(dev);\n        if (!device) {\n            return <div className=\"h-100 d-flex justify-content-center align-items-center\">Unknown device</div>\n        }\n        const links = getDeviceLinks(dev);\n\n        return (<>\n            <h1 className=\"h3\">{device.friendly_name}</h1>\n\n            <div className=\"tab\">\n                <ul className=\"nav nav-tabs\">\n                    {links.map(link => <li key={link.title} className=\"nav-item\">\n                        <NavLink activeClassName=\"active\" className={`nav-link ${styles['small-nav']}`} to={link.url}>{link.title}</NavLink>\n                    </li>)}\n                </ul>\n                <div className=\"tab-content\">\n                    <div className=\"tab-pane fade show active\">\n                        {this.renderContent()}\n                    </div>\n                </div>\n            </div>\n\n        </>);\n\n    }\n}\nconst devicePageWithRouter = withRouter(DevicePage);\nconst mappedProps = [\"devices\"];\nconst ConnectedDevicePage = connect<{}, {}, GlobalState, {}>(mappedProps, actions)(devicePageWithRouter);\nexport default ConnectedDevicePage;\n","import React, { Component } from \"react\";\nimport { connect } from \"unistore/react\";\nimport actions from \"../../actions/actions\";\n\nimport { GlobalState } from \"../../store\";\nimport Button from \"../button\";\nimport { TouchLinkDevice } from \"../../types\";\nimport { genDeviceDetailsLink } from \"../../utils\";\nimport cx from \"classnames\";\nimport { Link } from \"react-router-dom\";\nimport { TouchlinkApi } from \"../../actions/TouchlinkApi\";\n\n\n\n// eslint-disable-next-line react/prefer-stateless-function\nexport class TouchlinkPage extends Component<TouchlinkApi & GlobalState, {}> {\n    onIdentifyClick = (device: TouchLinkDevice): void => {\n        const { touchlinkIdentify } = this.props;\n        touchlinkIdentify(device);\n    }\n\n    onResetClick = (device: TouchLinkDevice): void => {\n        const { touchlinkReset } = this.props;\n        touchlinkReset(device);\n    }\n\n    renderTouchlinkDevices() {\n        const { touchlinkDevices, devices, touchlinkIdentifyInProgress, touchlinkResetInProgress } = this.props;\n        const touchlinkInProgress = touchlinkIdentifyInProgress || touchlinkResetInProgress;\n        return (\n            <div className=\"table-responsive\">\n                <table className=\"table align-middle\">\n                    <thead>\n                        <tr>\n                            <th scope=\"col\">#</th>\n                            <th scope=\"col\">ieee_address</th>\n                            <th scope=\"col\">friendly_name</th>\n                            <th scope=\"col\">channel</th>\n                            <th scope=\"col\">&nbsp;</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {touchlinkDevices.map((touchlinkDevice, idx) => (\n                            <tr key={touchlinkDevice.ieee_address}>\n                                <td>{idx + 1}</td>\n                                <td>{\n                                    devices.has(touchlinkDevice.ieee_address) ?\n                                        (<Link to={genDeviceDetailsLink(touchlinkDevice.ieee_address)}>{touchlinkDevice.ieee_address}</Link>) : touchlinkDevice.ieee_address}</td>\n                                <td>{devices.get(touchlinkDevice.ieee_address)?.friendly_name}</td>\n                                <td>{touchlinkDevice.channel}</td>\n                                <td>\n                                    <div className=\"btn-group float-right\" role=\"group\" aria-label=\"Basic example\">\n                                        <Button<TouchLinkDevice> disabled={touchlinkInProgress} item={touchlinkDevice} title=\"Identify\" className=\"btn btn-primary\" onClick={this.onIdentifyClick}><i\n                                            className={cx(\"fa\", { \"fa-exclamation-triangle\": !touchlinkIdentifyInProgress, \"fas fa-circle-notch fa-spin\": touchlinkIdentifyInProgress })} /></Button>\n                                        <Button<TouchLinkDevice> disabled={touchlinkInProgress} item={touchlinkDevice} title=\"Factory reset\" className=\"btn btn-danger\" onClick={this.onResetClick}><i\n                                            className={cx(\"fa\", { \"fa-broom\": !touchlinkResetInProgress, \"fas fa-circle-notch fa-spin\": touchlinkResetInProgress })} /></Button>\n                                    </div>\n                                </td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n    renderNoDevices() {\n        const { touchlinkScan } = this.props;\n        return (\n            <Button className=\"btn btn-primary mx-auto d-block\" onClick={touchlinkScan}>Scan</Button>\n        );\n    }\n    render() {\n        const { touchlinkDevices, touchlinkScanInProgress, touchlinkScan } = this.props;\n        return (\n            <div className=\"card\">\n                <div className=\"card-header allign-middle\">\n                    Detected {touchlinkDevices.length} touchlink devices.\n                        <Button title=\"Rescan\" className=\"btn btn-primary btn-sm float-right\" onClick={touchlinkScan}><i className=\"fa fa-sync\" /></Button>\n                </div>\n                <div className=\"card-body\">\n                    {touchlinkScanInProgress ? (\n                        <div className=\"d-flex justify-content-center\">\n                            <div className=\"spinner-border\" role=\"status\">\n                                <span className=\"sr-only\">Loading...</span>\n                            </div>\n                        </div>\n                    ) : touchlinkDevices.length === 0 ? this.renderNoDevices() : this.renderTouchlinkDevices()}\n\n                </div>\n            </div>\n        );\n    }\n}\nconst mappedProps = [\"touchlinkDevices\", \"devices\", \"touchlinkScanInProgress\", \"touchlinkIdentifyInProgress\", \"touchlinkResetInProgress\"];\n\nexport default connect<{}, {}, GlobalState, TouchlinkApi>(mappedProps, actions)(TouchlinkPage);\n","import React, { Component } from \"react\";\nimport { connect } from \"unistore/react\";\nimport actions, { UtilsApi } from \"../../actions/actions\";\nimport { GlobalState } from \"../../store\";\nimport { NavLink, Redirect, RouteComponentProps, withRouter } from \"react-router-dom\";\nimport Button from \"../button\";\nimport Form from '@rjsf/bootstrap-4';\nimport cx from \"classnames\";\nimport { JSONSchema7 } from \"json-schema\";\nimport cloneDeep from \"lodash/cloneDeep\";\nimport uiSchemas from \"./uiSchema.json\";\nimport { BridgeApi } from \"../../actions/BridgeApi\";\n\n\n\ntype SettingsTab = \"settings\" | \"bridge\" | \"about\" | \"tools\" | \"donate\";\n\ntype SettigsKeys = string;\ntype UrlParams = {\n    tab?: SettingsTab;\n};\ntype SettingsPageProps = RouteComponentProps<UrlParams>;\n\ndeclare const FRONTEND_VERSION: string; //injected by webpack.DefinePlugin\n\ntype SettingsPageState = {\n    keyName: SettigsKeys;\n}\n\nconst ROOT_KEY_NAME = 'main';\n\nconst ingoredFields = ['groups', 'devices', 'device_options', 'ban', 'whitelist', 'map_options'];\nconst validJsonSchemasAsTabs = ['object', 'array'];\n\nconst removePropertiesFromSchema = (names: string[], schema: JSONSchema7 = {}, config: object = {}) => {\n\n    if (schema.required) {\n        schema.required = schema.required.filter(item => names.includes(item));\n    }\n\n    for (const name of names) {\n        if (schema.properties) {\n            delete schema.properties[name];\n        }\n        delete config[name];\n    }\n\n    return { schema, config };\n}\n\nconst tabs = [\n    {\n        title: 'Settings',\n        url: `/settings/settings`\n    },\n    {\n        title: 'Tools',\n        url: `/settings/tools`\n    },\n    {\n        title: 'About',\n        url: `/settings/about`\n    },\n    {\n        title: 'Raw',\n        url: `/settings/bridge`\n    },\n    {\n        title: <i className=\"fa fa-donate\" />,\n        url: '/settings/donate'\n    }\n];\n\n\nconst isValidKeyToRenderAsTab = (key: string, value: JSONSchema7): boolean => (validJsonSchemasAsTabs.includes(value.type as string) && !ingoredFields.includes(key)) || (value && value.oneOf ? value.oneOf.length > 0 : false);\nexport class SettingsPage extends Component<SettingsPageProps & BridgeApi & GlobalState & UtilsApi, SettingsPageState> {\n    state = {\n        keyName: ROOT_KEY_NAME\n    }\n    renderCategoriesTabs() {\n        return (\n            <ul className=\"nav nav-tabs\">\n                {tabs.map(tab => <li key={tab.url} className=\"nav-item\">\n                    <NavLink className=\"nav-link\" activeClassName=\"active\" to={tab.url}>{tab.title}</NavLink>\n                </li>)}\n            </ul>\n        )\n    }\n    render() {\n        return (\n            <div className=\"tab\">\n                {this.renderCategoriesTabs()}\n                <div className=\"tab-content h-100 p-0 p-sm-3\">\n                    <div className=\"tab-pane fade show active\">\n                        {this.renderSwitcher()}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n    renderSwitcher() {\n        const { match } = this.props;\n        const { tab } = match.params;\n        switch (tab) {\n            case \"tools\":\n                return this.renderTools();\n            case \"bridge\":\n                return this.renderBridgeInfo();\n            case \"about\":\n                return this.renderAbout();\n            case \"settings\":\n                return this.renderSettings();\n            case \"donate\":\n                return this.renderDonate();\n            default:\n                return <Redirect to={`/settings/settings`} />;\n        }\n    }\n    renderAbout() {\n        const { bridgeInfo } = this.props;\n        const isZigbee2mqttDevVersion = bridgeInfo.version?.match(/^\\d+\\.\\d+\\.\\d+$/) === null;\n        const zigbee2mqttVersion = isZigbee2mqttDevVersion ?\n            bridgeInfo.version :\n            <a target=\"_blank\" rel=\"noopener noreferrer\" href={`https://github.com/Koenkk/zigbee2mqtt/releases/tag/${bridgeInfo.version}`}>{bridgeInfo.version}</a>;\n        const zigbee2mqttCommit = bridgeInfo.commit ?\n            <>commit: <a target=\"_blank\" rel=\"noopener noreferrer\" href={`https://github.com/Koenkk/zigbee2mqtt/commit/${bridgeInfo.commit}`}>{bridgeInfo.commit}</a></> :\n            null;\n\n        const rows = [\n            { title: 'Zigbee2MQTT version', content: <>{zigbee2mqttVersion} {zigbee2mqttCommit}</> },\n            { title: 'Coordinator type', content: <>{bridgeInfo.coordinator?.type ?? 'Unknown'}</> },\n            { title: 'Coordinator revision', content: <>{bridgeInfo.coordinator?.meta?.revision ?? 'Unknown'}</> },\n            { title: 'Frontend version', content: FRONTEND_VERSION },\n        ];\n\n        return <div className=\"p-3\">{rows.map(row => <dl key={row.title} className=\"row\">\n            <dt className=\"col-sm-3\">{row.title}</dt>\n            <dd className=\"col-sm-9\">{row.content}</dd>\n        </dl>)}</div>;\n\n    }\n    renderBridgeInfo() {\n        const { bridgeInfo } = this.props;\n        return <div className=\"p-3\"><pre>{JSON.stringify(bridgeInfo, null, 4)}</pre></div>\n\n    }\n\n    renderTools() {\n        const { exportState, restartBridge } = this.props;\n        return <div className=\"p-3\">\n            <Button className=\"btn btn-primary d-block mt-2\" onClick={exportState}>Download state</Button>\n            <Button className=\"btn btn-danger d-block mt-2\" onClick={restartBridge} promt>Restart Zigbee2MQTT</Button>\n        </div>\n    }\n    onSettingsSave = ({ formData }) => {\n        const { updateBridgeConfig } = this.props;\n        const { keyName } = this.state;\n        if (keyName === ROOT_KEY_NAME) {\n            updateBridgeConfig(formData);\n        } else {\n            updateBridgeConfig({ [keyName]: formData });\n        }\n    }\n\n    getSettingsTabs() {\n        const { bridgeInfo: { config_schema: configSchema = { properties: {} } } } = this.props;\n        const tabs = Object.entries<JSONSchema7>(configSchema.properties as unknown as ArrayLike<JSONSchema7>)\n            .filter(([key, value]) => isValidKeyToRenderAsTab(key, value))\n            .map(([key, value]) => ({\n                name: key,\n                title: value.title ?? key\n            }));\n        tabs.unshift({\n            name: ROOT_KEY_NAME,\n            title: 'Main'\n        });\n        return tabs;\n    }\n    getSettingsInfo() {\n        const { keyName } = this.state;\n        const { bridgeInfo: { config_schema: configSchema, config: originalConfig } } = this.props;\n\n        let configAndSchema = removePropertiesFromSchema(ingoredFields, cloneDeep(configSchema), cloneDeep(originalConfig) as object);\n\n        let currentSchema: JSONSchema7 = configAndSchema.schema;\n        let currentConfig = configAndSchema.config[keyName] as object;\n\n        if (keyName === ROOT_KEY_NAME) {\n            const ignoreTabNames = this.getSettingsTabs().map(tab => tab.name);\n            configAndSchema = removePropertiesFromSchema(ignoreTabNames, configAndSchema.schema, configAndSchema.config)\n            currentSchema = configAndSchema.schema;\n            currentConfig = configAndSchema.config;\n        } else {\n            currentConfig = configAndSchema.config[keyName] as object;\n            if (configAndSchema.schema.properties) {\n                currentSchema = configAndSchema.schema.properties[keyName] as JSONSchema7;\n            }\n        }\n        return { currentSchema, currentConfig };\n    }\n    renderSettingsTabs() {\n        const tabs = this.getSettingsTabs();\n        const { keyName } = this.state;\n        return <div className=\"nav nav-pills\">\n            {\n                tabs.map(tab =>\n                    <li key={tab.name} className=\"nav-item\">\n                        <a className={cx(\"nav-link\", { 'bg-primary active': keyName === tab.name })} aria-current=\"page\" href=\"#\" onClick={(e) => { this.setState({ keyName: tab.name }); e.preventDefault() }}>{tab.title}</a>\n                    </li>\n                )\n            }\n        </div>;\n    }\n    renderSettings() {\n        const { keyName } = this.state;\n        const { currentSchema, currentConfig } = this.getSettingsInfo();\n        return <div className=\"tab\">\n            {this.renderSettingsTabs()}\n            <div className=\"tab-content\">\n                <div className=\"tab-pane active\">\n                    <Form key={keyName} schema={currentSchema}\n                        formData={currentConfig}\n                        onSubmit={this.onSettingsSave}\n                        uiSchema={uiSchemas[keyName]}\n                    />\n                </div>\n            </div>\n        </div>\n\n    }\n\n    renderDonate() {\n        return <div>\n            <a href=\"https://www.buymeacoffee.com/nurikk\">\n                <img src=\"https://img.buymeacoffee.com/button-api/?text=Buy me a beer&emoji=🍺&slug=nurikk&button_colour=FFDD00&font_colour=000000&font_family=Arial&outline_colour=000000&coffee_colour=ffffff\" />\n            </a>\n        </div>;\n    }\n}\nconst SettingsPageWithRouter = withRouter(SettingsPage);\nconst mappedProps = [\"bridgeInfo\"];\nconst ConnectedSettingsPage = connect<{}, {}, GlobalState, BridgeApi>(mappedProps, actions)(SettingsPageWithRouter);\nexport default ConnectedSettingsPage;\n","import * as React from 'react';\n\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\nimport Button from './button';\nexport type Theme = \"light\" | \"dark\";\n\n\n\ntype ThemeSwitcherProps = {\n    saveCurrentTheme(theme: Theme): void;\n}\nexport const ThemeSwitcher = (props: ThemeSwitcherProps) => {\n    const { saveCurrentTheme } = props;\n    const { switcher, themes, status, currentTheme } = useThemeSwitcher();\n    const isDarkMode = currentTheme === 'dark';\n\n    if (status === 'loading') {\n        return <div>Loading styles...</div>;\n    }\n    const toggleDarkMode = (light: boolean) => {\n        const theme = light ? themes.light : themes.dark;\n        saveCurrentTheme(theme as Theme);\n        switcher({ theme });\n    };\n    return (\n        <Button<boolean> item={isDarkMode} className=\"btn btn-info\" onClick={toggleDarkMode}>{isDarkMode ? '🌑' : `🌞`}</Button>\n    );\n};\n","import React, { FunctionComponent, RefObject, useRef, useState } from 'react';\n\nimport { GlobalState } from '../../store';\nimport actions, { ThemeActions } from '../../actions/actions';\nimport { connect } from 'unistore/react';\nimport Button from '../button';\nimport cx from \"classnames\";\nimport { Link, NavLink } from 'react-router-dom';\nimport useComponentVisible from '../../hooks/useComponentVisible';\nimport { Device } from '../../types';\nimport style from \"./style.css\";\nimport { useOnClickOutside } from '../../hooks/useOnClickOutside';\nimport { BridgeApi } from '../../actions/BridgeApi';\nimport {  ThemeSwitcher } from '../theme-switcher';\n\nconst urls = [\n    {\n        href: '/',\n        title: 'Devices',\n        exact: true\n    },\n    {\n        href: '/dashboard',\n        title: 'Dashboard'\n    },\n    {\n        href: '/map',\n        title: 'Map'\n    },\n    {\n        href: '/settings',\n        title: 'Settings'\n    },\n    {\n        href: '/groups',\n        title: 'Groups'\n    },\n    {\n        href: '/ota',\n        title: 'OTA'\n    },\n    {\n        href: '/touchlink',\n        title: 'Touchlink'\n    },\n    {\n        href: '/logs',\n        title: 'Logs'\n    },\n    {\n        href: '/extensions',\n        title: 'Extensions'\n    }\n];\ntype StartStopJoinButtonProps = {\n    devices: Map<string, Device>;\n}\nconst StartStopJoinButton: FunctionComponent<StartStopJoinButtonProps & Pick<BridgeApi, 'setPermitJoin'> & Pick<GlobalState, 'bridgeInfo'>> = ({ devices, setPermitJoin, bridgeInfo }) => {\n    const { ref, isComponentVisible, setIsComponentVisible } = useComponentVisible(false);\n    const [selectedRouter, setSelectedRouter] = useState<Device>({} as Device);\n    const routers: JSX.Element[] = [];\n    const selectAndHide = (device: Device) => { setSelectedRouter(device); setIsComponentVisible(false) }\n    devices.forEach((device) => {\n        if (device.type == \"Router\") {\n            routers.push(<li key={device.friendly_name}>\n                <Button<Device> item={device} className=\"dropdown-item\" onClick={selectAndHide}>{device.friendly_name}</Button>\n            </li>)\n        }\n    });\n    const onBtnClick = () => {\n        setPermitJoin(!bridgeInfo.permit_join, selectedRouter);\n    }\n    return (\n        <div className=\"btn-group text-nowrap me-1\">\n            <button onClick={onBtnClick} type=\"button\" className=\"btn btn-outline-secondary\">{bridgeInfo.permit_join ? \"Disable join\" : \"Permit join\"} ({selectedRouter?.friendly_name ?? \"All\"})</button>\n            {routers.length ? (<><Button<boolean> type=\"button\" onClick={setIsComponentVisible} item={!isComponentVisible} className=\"btn btn-outline-secondary dropdown-toggle dropdown-toggle-split\" data-toggle=\"dropdown\" aria-expanded=\"false\">\n                <span className=\"visually-hidden\">Toggle Dropdown</span>\n            </Button>\n                <ul ref={ref as RefObject<HTMLUListElement>} className={cx('dropdown-menu', style['scrollable-menu'], { show: isComponentVisible })}>\n                    <li key='all'>\n                        <Button className=\"dropdown-item\" onClick={selectAndHide}>All</Button>\n                    </li>\n                    {routers}\n                </ul></>) : null}\n\n        </div>\n    );\n}\n\ntype PropsFromStore = {\n    devices: Map<string, Device>;\n    bridgeInfo: object;\n}\n\nconst NavBar: FunctionComponent<PropsFromStore & BridgeApi & Pick<GlobalState, 'bridgeInfo'> & ThemeActions> = (props) => {\n    const { devices, setPermitJoin, bridgeInfo, restartBridge, setTheme } = props;\n    const ref = useRef<HTMLDivElement>();\n    const [navbarIsVisible, setnavbarIsVisible] = useState<boolean>(false);\n    useOnClickOutside(ref, () => {\n        setnavbarIsVisible(false);\n    });\n    return (<nav className=\"navbar navbar-expand-md navbar-light\">\n        <div ref={ref as React.MutableRefObject<HTMLDivElement>} className=\"container-fluid\">\n            <Link onClick={() => setnavbarIsVisible(false)} to=\"/\">Zigbee2MQTT</Link>\n\n            <button onClick={() => { setnavbarIsVisible(!navbarIsVisible) }} className=\"navbar-toggler\" type=\"button\">\n                <span className=\"navbar-toggler-icon\" />\n            </button>\n            <div className={cx(\"navbar-collapse collapse\", { show: navbarIsVisible })}>\n                <ul className=\"navbar-nav\">\n                    {\n                        urls.map(url =>\n                            <li key={url.href} className=\"nav-item\">\n                                <NavLink onClick={() => setnavbarIsVisible(false)} exact={url.exact} className=\"nav-link\" to={url.href} activeClassName=\"active\">\n                                    {url.title}\n                                </NavLink>\n                            </li>)\n                    }\n                </ul>\n                <StartStopJoinButton\n                    devices={devices}\n                    setPermitJoin={setPermitJoin}\n                    bridgeInfo={bridgeInfo}\n                />\n                <ThemeSwitcher saveCurrentTheme={setTheme} />\n            </div>\n            {bridgeInfo.restart_required ? <Button onClick={restartBridge} promt className=\"btn btn-danger me-1\">Restart</Button> : null}\n        </div>\n    </nav>)\n}\nconst mappedProps = [\"bridgeInfo\", \"devices\"];\nconst ConnectedNavBar = connect<{}, {}, PropsFromStore, BridgeApi>(mappedProps, actions)(NavBar);\nexport default ConnectedNavBar;\n\n","import { useState, useEffect, useRef } from 'react';\n\nexport default function useComponentVisible(initialIsVisible: boolean) {\n    const [isComponentVisible, setIsComponentVisible] = useState(\n        initialIsVisible\n    );\n    const ref = useRef<HTMLElement>(null);\n\n    const handleHideDropdown = (event: KeyboardEvent) => {\n        if (event.key === \"Escape\") {\n            setIsComponentVisible(false);\n        }\n    };\n\n    const handleClickOutside = (event: MouseEvent) => {\n        if (ref.current && !ref.current.contains(event.target as Node)) {\n            setIsComponentVisible(false);\n        }\n    };\n\n    useEffect(() => {\n        document.addEventListener(\"keydown\", handleHideDropdown, true);\n        document.addEventListener(\"click\", handleClickOutside, true);\n        return () => {\n            document.removeEventListener(\"keydown\", handleHideDropdown, true);\n            document.removeEventListener(\"click\", handleClickOutside, true);\n        };\n    });\n\n    return { ref, isComponentVisible, setIsComponentVisible };\n}","// extracted by mini-css-extract-plugin\nexport default {\"scrollable-menu\":\"_36Sntvyj-B3gg7Xj6xLUaY\"};","import {  useEffect } from 'react';\n\nexport function useOnClickOutside(ref, handler) {\n  useEffect(\n    () => {\n      const listener = event => {\n        // Do nothing if clicking ref's element or descendent elements\n        if (!ref.current || ref.current.contains(event.target)) {\n          return;\n        }\n\n        handler(event);\n      };\n\n      document.addEventListener('mousedown', listener);\n      document.addEventListener('touchstart', listener);\n\n      return () => {\n        document.removeEventListener('mousedown', listener);\n        document.removeEventListener('touchstart', listener);\n      };\n    },\n    // Add ref and handler to effect dependencies\n    // It's worth noting that because passed in handler is a new ...\n    // ... function on every render that will cause this effect ...\n    // ... callback/cleanup to run every render. It's not a big deal ...\n    // ... but to optimize you can wrap handler in useCallback before ...\n    // ... passing it into this hook.\n    [ref, handler]\n  );\n}","import React, { ChangeEvent, useState } from \"react\";\nimport { useInputChange } from \"../../hooks/useInputChange\";\nimport Button from \"../button\";\nimport Modal, { ModalHeader, ModalBody, ModalFooter } from \"../modal\";\n\ninterface RenameGroupFormProps {\n  name: string;\n  onRename(oldName: string, newName: string): void;\n}\n\nexport function RenameGroupForm(props: RenameGroupFormProps) {\n  const { name, onRename } = props;\n  const [modalIsOpened, setModalIsOpened] = useState(false);\n\n  const [renameGroupForm, handleInputChange] = useInputChange({ friendlyName: name });\n\n  return (\n    <>\n      <Modal isOpen={modalIsOpened}>\n        <ModalHeader>\n          <h3>Rename group</h3>\n          <small>{name}</small>\n        </ModalHeader>\n        <ModalBody>\n          <div className=\"mb-3\">\n            <label className=\"form-label\">Friendly name</label>\n            <input name=\"friendlyName\" onChange={handleInputChange as (event: ChangeEvent<HTMLInputElement>) => void} type=\"text\" className=\"form-control\" value={renameGroupForm['friendlyName']} />\n          </div>\n        </ModalBody>\n        <ModalFooter>\n          <button type=\"button\" className=\"btn btn-secondary\" onClick={() => setModalIsOpened(false)}>Close</button>\n          <button type=\"button\" className=\"btn btn-primary\" onClick={() => { onRename(name, renameGroupForm['friendlyName']); setModalIsOpened(false) }}>Save changes</button>\n        </ModalFooter>\n      </Modal>\n      <Button<void> className=\"btn btn-primary\" onClick={() => setModalIsOpened(true)} title=\"Rename group\"><i className=\"fa fa-edit\" /></Button>\n    </>\n  )\n}\n\n","import { ChangeEvent, useState } from 'react'\ntype KVP = { [key: string]: string };\nexport const useInputChange = (initialState: KVP) => {\n  const [input, setInput] = useState<KVP>(initialState);\n\n  const handleInputChange = (e: ChangeEvent<HTMLInputElement>) => setInput({\n    ...input,\n    [e.currentTarget.name]: e.currentTarget.value\n  })\n\n  return [input, handleInputChange]\n}","import React, { ChangeEvent, Component } from \"react\";\nimport { connect } from \"unistore/react\";\nimport actions from \"../../actions/actions\";\n\nimport { GlobalState, Group, GroupAddress } from \"../../store\";\nimport Button from \"../button\";\nimport { Device, Endpoint } from \"../../types\";\nimport { genDeviceDetailsLink, getEndpoints } from \"../../utils\";\nimport style from './style.css';\nimport cx from 'classnames';\nimport EndpointPicker from \"../endpoint-picker\";\nimport DevicePicker from \"../device-picker\";\nimport { Link } from \"react-router-dom\";\nimport DeviceImage from \"../device-image\";\nimport { RenameGroupForm } from \"./RenameForm\";\nimport { GroupsApi } from \"../../actions/GroupsApi\";\n\n\ninterface GroupsPageState {\n    newGroupName: string;\n    newGroupId?: number;\n}\n\n\ninterface AddDeviceToGroupProps {\n    devices: Map<string, Device>;\n    group: Group;\n    addDeviceToGroup(deviceName: string, groupName: string): void;\n}\n\ninterface AddDeviceToGroupState {\n    device?: string;\n    endpoint?: Endpoint;\n}\n\ninterface DeviceGroupRowProps {\n    rowNumber: number;\n    groupAddress: GroupAddress;\n    devices: Map<string, Device>;\n    removeDeviceFromGroup(deviceFriendlyName: string): void;\n}\n\n// eslint-disable-next-line react/prefer-stateless-function\nclass DeviceGroupRow extends Component<DeviceGroupRowProps, {}> {\n    getDeviceObj(): Device {\n        const { groupAddress, devices } = this.props;\n        return devices.get(groupAddress.ieee_address) as Device;\n    }\n    render() {\n        const { rowNumber, groupAddress, removeDeviceFromGroup } = this.props;\n        const device = this.getDeviceObj();\n\n        return <tr>\n            <th scope=\"row\">{rowNumber + 1}</th>\n            <td className={style[\"device-pic\"]}>\n                <DeviceImage className={cx(style[\"device-image\"])} device={device} />\n            </td>\n            <td><Link to={genDeviceDetailsLink(device.ieee_address)}>{device.friendly_name}</Link></td>\n            <td>{groupAddress.ieee_address}</td>\n            <td>{groupAddress.endpoint}</td>\n            <td>{device && <Button<string> promt item={device.friendly_name} onClick={removeDeviceFromGroup} className=\"btn btn-danger btn-sm float-right\"><i className=\"fa fa-trash\" /></Button>}</td>\n        </tr>;\n    }\n}\ninterface DeviceGroupPropts {\n    group: Group;\n    devices: Map<string, Device>;\n    removeDeviceFromGroup(groupFriendlyName: string, deviceFriendlyName: string): void;\n}\n\n// eslint-disable-next-line react/prefer-stateless-function\nclass DeviceGroup extends Component<DeviceGroupPropts, {}> {\n    onRemove = (deviceFriendlyName: string): void => {\n        const { group, removeDeviceFromGroup } = this.props;\n        removeDeviceFromGroup(group.friendly_name, deviceFriendlyName);\n    }\n    render() {\n        const { group, devices } = this.props;\n        return <table className=\"table table-sm\">\n            <thead>\n                <tr>\n                    <th scope=\"col\">#</th>\n                    <th scope=\"col\">Pic</th>\n                    <th scope=\"col\">friendlyName</th>\n                    <th scope=\"col\">ieee_addr</th>\n                    <th scope=\"col\">Endpoint</th>\n                    <th scope=\"col\" className=\"text-right\">Action</th>\n                </tr>\n            </thead>\n            <tbody>\n                {group.members.map((groupMemebershipInfo, idx) => <DeviceGroupRow key={groupMemebershipInfo.ieee_address} removeDeviceFromGroup={this.onRemove} rowNumber={idx} devices={devices} groupAddress={groupMemebershipInfo} />)}\n            </tbody>\n        </table>;\n    }\n}\n\nclass AddDeviceToGroup extends Component<AddDeviceToGroupProps, AddDeviceToGroupState> {\n    state: Readonly<AddDeviceToGroupState> = {};\n\n\n    onSubmit = (): void => {\n        const { addDeviceToGroup, group } = this.props;\n        const { device, endpoint } = this.state;\n\n        addDeviceToGroup(endpoint ? `${device}/${endpoint}` : device as string, group.friendly_name);\n\n    }\n    onDeviceSelect = (device: Device): void => {\n        const endpoints = getEndpoints(device);\n        this.setState({ device: device.ieee_address, endpoint: endpoints[0] });\n    }\n\n    onEpChange = (endpoint: Endpoint): void => {\n        this.setState({ endpoint });\n    }\n    render() {\n        const { device, endpoint } = this.state;\n        const { devices } = this.props;\n        const deviceObj = devices.get(device as string) as Device;\n\n        const endpoints = getEndpoints(deviceObj);\n\n        return <div className=\"row row-cols-lg-auto align-items-center\">\n\n            <DevicePicker type=\"device\" value={device as string} devices={devices} onChange={this.onDeviceSelect} />\n            <EndpointPicker values={endpoints} value={endpoint as Endpoint} onChange={this.onEpChange} />\n\n            <Button<void> type=\"button\" onClick={this.onSubmit} className=\"btn btn-primary\">Add to group</Button>\n        </div>\n\n    }\n}\n\nexport class GroupsPage extends Component<GroupsApi & GlobalState, GroupsPageState> {\n    state: GroupsPageState = {\n        newGroupName: '',\n        newGroupId: undefined\n    }\n\n\n    changeHandler = (event: ChangeEvent<HTMLInputElement>): void => {\n        const { name, value } = event.target;\n        this.setState({ [name]: value } as unknown as GroupsPageState);\n    }\n\n    onGroupCreateSubmit = (): void => {\n        const { newGroupName, newGroupId } = this.state;\n        const { createGroup } = this.props;\n        createGroup(newGroupName, newGroupId);\n    }\n\n    renderGroupCreationForm() {\n        const { newGroupName, newGroupId } = this.state;\n        return (\n            <div className=\"card\">\n                <div className=\"card-body\">\n                    <div className=\"input-group\">\n                        <label htmlFor=\"newGroupName\" className=\"sr-only\">Group name</label>\n                        <input onChange={this.changeHandler} value={newGroupName} required type=\"text\" name=\"newGroupName\" className=\"form-control\" id=\"newGroupName\" placeholder=\"new group name\" />\n\n                        <label htmlFor=\"newGroupName\" className=\"sr-only\">Group id</label>\n                        <input onChange={this.changeHandler} value={newGroupId === undefined ? '' : newGroupId} type=\"number\" name=\"newGroupId\" className=\"form-control\" id=\"newGroupId\" placeholder=\"enter group id if necessary\" />\n\n                        <Button<void> onClick={this.onGroupCreateSubmit} className=\"btn btn-primary form-control\">Create group</Button>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n    removeGroup = (friendlyName: string): void => {\n        const { removeGroup } = this.props;\n        removeGroup(friendlyName);\n    }\n    removeDeviceFromGroup = (groupFriendlyName: string, deviceFriendlyName: string): void => {\n        const { removeDeviceFromGroup } = this.props;\n        removeDeviceFromGroup(deviceFriendlyName, groupFriendlyName);\n    }\n    renameGroup = (oldName: string, newName: string) => {\n        const { renameGroup } = this.props;\n        renameGroup(oldName, newName);\n    }\n    renderGroups() {\n        const { groups, devices, addDeviceToGroup } = this.props;\n        return groups.map(group => (\n            <div key={group.id} className=\"card\">\n                <div className=\"card-header\" id={`heading${group.id}`}>\n                    <h5 className=\"mb-0\">\n                        <button className=\"btn btn-link btn-sm\">\n                            {group.friendly_name} (#{group.id})\n                                    </button>\n                        <div className=\"btn-group float-right btn-group-sm\" role=\"group\" aria-label=\"Basic example\">\n                            <RenameGroupForm name={group.friendly_name} onRename={this.renameGroup} />\n                            <Button<string> promt title=\"Remove group\" item={group.friendly_name} onClick={this.removeGroup} className=\"btn btn-danger\"><i className=\"fa fa-trash\" /></Button>\n                        </div>\n                    </h5>\n                </div>\n\n\n                <div className=\"card-body\">\n                    <div className=\"table-responsive\">\n                        <DeviceGroup group={group} devices={devices} removeDeviceFromGroup={this.removeDeviceFromGroup} />\n                    </div>\n                </div>\n\n                <div className=\"card-footer\">\n                    <AddDeviceToGroup addDeviceToGroup={addDeviceToGroup} devices={devices} group={group} />\n                </div>\n            </div>\n        )).reverse()\n\n    }\n\n    render() {\n        return <>\n            {this.renderGroupCreationForm()}\n            {this.renderGroups()}\n        </>\n\n    }\n}\n\nconst mappedProps = [\"groups\", \"devices\"];\nconst ConnectedGroupsPage = connect<{}, {}, GlobalState, GroupsApi>(mappedProps, actions)(GroupsPage);\nexport default ConnectedGroupsPage;\n","// extracted by mini-css-extract-plugin\nexport default {\"device-pic\":\"_2p1XqBiO9XLlCB-lT60VCH\",\"device-image\":\"_3Z1i8qUrV2sErNF0__pVZt\"};","import React, { MouseEvent, ThHTMLAttributes} from \"react\";\n\n\n\nimport { SortDirection } from \"../../types\";\nimport isEqual from \"lodash/isEqual\";\n\n\ninterface ActionTHProps<T> {\n    column: T | T[];\n    current: T | T[];\n    currentDirection: SortDirection;\n    onClick?(arg1: T | T[]): void;\n}\n\nexport default class ActionTH<T> extends React.Component<ActionTHProps<T> & Omit<ThHTMLAttributes<HTMLTableHeaderCellElement>, 'onClick'>, {}> {\n    onClick = (event: MouseEvent): void => {\n        event.preventDefault();\n        event.stopPropagation();\n        const { column, onClick } = this.props;\n        onClick && onClick(column);\n    };\n\n    renderArrow () {\n        const { currentDirection, current, column } = this.props;\n        if (isEqual(current, column)) {\n            if (currentDirection == \"asc\") {\n                return <i className={`fa fa-sort-amount-down-alt`} />;\n            }\n            return <i className={`fa fa-sort-amount-down`} />;\n        }\n        return <i className={`fa fa-sort-amount-down invisible`} />;\n    }\n\n    render () {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { children, onClick, current, column, currentDirection, ...rest } = this.props;\n        return (<th {...rest}>\n            <span className=\"btn btn-link\" onClick={this.onClick}>{children}</span>\n            {this.renderArrow()}\n        </th>);\n    }\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"action-column\":\"_1AmFhCTIk_ifBlEJGnLJuK\",\"device-pic\":\"_1KD_wxLENsmTnroATY4BrA\",\"device-image\":\"_1kMXLbhsSotmS-uYUbIFl0\"};","\nimport React from \"react\";\nimport { SortColumn } from \".\";\nimport { SortDirection } from \"../../types\";\nimport ActionTH from \"./ActionTH\";\nimport style from \"./style.css\";\n\ntype TableHeaderProps = {\n    sortColumn: SortColumn | SortColumn[];\n    sortDirection: SortDirection;\n    onSortChange(column: SortColumn | SortColumn[], sortDir?: SortDirection): void;\n    lastSeenIsAvaliable: boolean;\n}\nexport const TableHeader = (props: TableHeaderProps) => {\n    const { sortColumn, sortDirection, onSortChange, lastSeenIsAvaliable } = props;\n\n    return (\n        <thead>\n            <tr className=\"text-nowrap\">\n                <th>#</th>\n                <th>Pic</th>\n                <ActionTH<SortColumn> className={style[\"action-column\"]} column=\"device.friendly_name\"\n                    currentDirection={sortDirection} current={sortColumn}\n                    onClick={onSortChange}>Friendly name</ActionTH>\n                <ActionTH<SortColumn> className={style[\"action-column\"]} column=\"device.ieee_address\"\n                    currentDirection={sortDirection} current={sortColumn}\n                    onClick={onSortChange}>IEEE address</ActionTH>\n                <ActionTH<SortColumn> className={style[\"action-column\"]} column=\"device.definition.vendor\"\n                    currentDirection={sortDirection} current={sortColumn}\n                    onClick={onSortChange} title=\"definition.vendor\">Manufacturer</ActionTH>\n                <ActionTH<SortColumn> className={style[\"action-column\"]} column=\"device.definition.model\"\n                    currentDirection={sortDirection} current={sortColumn}\n                    onClick={onSortChange}>Model</ActionTH>\n                <ActionTH<SortColumn> className={style[\"action-column\"]} column=\"state.linkquality\"\n                    currentDirection={sortDirection} current={sortColumn}\n                    onClick={onSortChange}>LQI</ActionTH>\n                {lastSeenIsAvaliable && <ActionTH<SortColumn> className={style[\"action-column\"]} column={[\"state.last_seen\", \"state.elapsed\"]}\n                    currentDirection={sortDirection} current={sortColumn}\n                    onClick={onSortChange}>Last seen</ActionTH>}\n                <ActionTH<SortColumn> className={style[\"action-column\"]} column=\"state.battery\"\n                    currentDirection={sortDirection} current={sortColumn}\n                    onClick={onSortChange}>Power</ActionTH>\n                <th>&nbsp;</th>\n            </tr>\n        </thead>\n    )\n}\n","\nimport React from \"react\";\nimport style from \"./style.css\";\nimport { Link } from \"react-router-dom\";\nimport { Device, DeviceState } from \"../../types\";\nimport { genDeviceDetailsLink, lastSeen, toHex } from \"../../utils\";\nimport  DeviceControlGroup from \"../device-control\";\nimport DeviceImage from \"../device-image\";\nimport { DisplayValue } from \"../display-value/DisplayValue\";\nimport PowerSource from \"../power-source\";\nimport { VendorLink, ModelLink } from \"../vendor-links/verndor-links\";\ntype TableRowProps = {\n    device: Device;\n    deviceState: DeviceState;\n    id: number;\n    lastSeenIsAvaliable: boolean;\n}\nexport const TableRow = (props: TableRowProps) => {\n    const { device, deviceState, id, lastSeenIsAvaliable } = props;\n    return <tr key={device.friendly_name} title={deviceState.update?.state == \"available\" ? 'Avaliable OTA update' : device.definition?.description}>\n    <td className=\"font-weight-bold\">{id + 1}</td>\n    <td className={style[\"device-pic\"]}>\n        <DeviceImage className={style[\"device-image\"]} device={device} deviceStatus={deviceState} />\n    </td>\n    <td>\n        <Link to={genDeviceDetailsLink(device.ieee_address)}>{device.friendly_name}</Link>\n    </td>\n    <td>{device.ieee_address} ({toHex(device.network_address, 4)})</td>\n    <td className=\"text-truncate text-nowrap position-relative\"><VendorLink device={device} /></td>\n    <td title={device?.definition?.description}><ModelLink device={device} /></td>\n    <td><DisplayValue value={deviceState?.linkquality} name=\"linkquality\"/></td>\n    {lastSeenIsAvaliable && <td>{lastSeen(deviceState.last_seen, deviceState.elapsed)}</td>}\n    <td className=\"text-left\">\n        <PowerSource source={device.power_source} battery={deviceState?.battery as number} batteryLow={deviceState.battery_low as boolean} />\n    </td>\n    <td>\n        <DeviceControlGroup device={device} state={deviceState} />\n    </td>\n</tr>\n}\n","import React, { Component, Fragment } from \"react\";\n\nimport { Device, SortDirection, DeviceState } from \"../../types\";\nimport { Notyf } from \"notyf\";\nimport { connect } from \"unistore/react\";\nimport { GlobalState } from \"../../store\";\nimport actions from \"../../actions/actions\";\n\nimport isEqual from \"lodash/isEqual\";\nimport orderBy from \"lodash/orderBy\";\nimport Spinner from \"../spinner\";\nimport { TableHeader } from \"./TableHeader\";\nimport { TableRow } from \"./TableRow\";\n\n\n\nexport type SortColumn =\n    | \"device.network_address\"\n    | \"device.friendly_name\"\n    | \"device.ieee_address\"\n    | \"device.definition.vendor\"\n    | \"device.definition.model\"\n    | \"state.linkquality\"\n    | \"state.last_seen\"\n    | \"state.elapsed\"\n    | \"state.battery\";\n\n\ninterface ZigbeeTableState {\n    sortDirection: SortDirection;\n    sortColumn: SortColumn | SortColumn[];\n    currentTime: number;\n    sortedTableData: ZigbeeTableData[];\n    error?: object;\n}\n\ninterface ZigbeeTableData {\n    device: Device;\n    state: DeviceState;\n}\n\nconst storeKey = \"ZigbeeTableState\";\nconst longLoadingTimeout = 15 * 1000;\n\nexport class ZigbeeTable extends Component<GlobalState, ZigbeeTableState> {\n    constructor(props) {\n        super(props);\n        this.state = {\n            sortDirection: \"desc\",\n            sortColumn: \"device.network_address\",\n            currentTime: Date.now(),\n            sortedTableData: []\n        };\n    }\n\n    restoreState(): void {\n        const { sortColumn, sortDirection } = this.state;\n\n        const storedState = localStorage.getItem(storeKey);\n        if (storedState) {\n            try {\n                const restored: Pick<ZigbeeTableState, \"sortDirection\" | \"sortColumn\"> = JSON.parse(storedState);\n                this.setState(restored);\n            } catch (e) {\n                new Notyf().error(e.toString());\n            }\n        } else {\n            this.onSortChange(sortColumn, sortDirection);\n        }\n    }\n\n    saveState = (): void => {\n        const { sortDirection, sortColumn } = this.state;\n        const storeData = {\n            sortDirection,\n            sortColumn\n        };\n        //in private mode localstorage access can throw exceptions\n        try {\n            localStorage.setItem(storeKey, JSON.stringify(storeData));\n        } catch (e) {\n            new Notyf().error(e.toString());\n        }\n    };\n    handleLongLoading = () => {\n        const { devices } = this.props;\n\n        if (devices.size == 0) {\n            const error = <Fragment>\n                <strong>Loading devices takes too long time.</strong>\n                <div>Consider reading <a href=\"https://www.zigbee2mqtt.io/information/frontend.html\">documentation</a></div>\n            </Fragment>;\n            this.setState({ error });\n        }\n    }\n    componentDidMount(): void {\n        setTimeout(this.handleLongLoading, longLoadingTimeout);\n        this.restoreState();\n    }\n\n    static getDerivedStateFromProps(props: Readonly<GlobalState>, state: ZigbeeTableState): Partial<ZigbeeTableState> {\n        const { sortColumn, sortDirection } = state;\n        const { devices, deviceStates } = props;\n        const tableData: ZigbeeTableData[] = [];\n        devices.forEach((device) => {\n            if (device.type !== \"Coordinator\") {\n                tableData.push({\n                    device,\n                    state: deviceStates.get(device.friendly_name) ?? {} as DeviceState\n\n                });\n            }\n        });\n        return { sortedTableData: orderBy<ZigbeeTableData>(tableData, sortColumn, [sortDirection]) };\n    }\n\n\n    onSortChange = (column: SortColumn | SortColumn[], sortDir?: SortDirection): void => {\n        const { sortColumn } = this.state;\n        let { sortDirection } = this.state;\n\n        if (isEqual(sortColumn, column)) {\n            if (sortDir) {\n                sortDirection = sortDir;\n            } else if (sortDirection == \"asc\") {\n                sortDirection = \"desc\";\n            } else {\n                sortDirection = \"asc\";\n            }\n        }\n\n        this.setState({ sortColumn: column, sortDirection }, this.saveState);\n    };\n\n    renderError() {\n        const { error } = this.state;\n        return (<div className=\"h-100 d-flex justify-content-center align-items-center\">\n            <div className=\"d-flex align-items-center\">\n                {error}\n            </div>\n        </div>);\n    }\n\n    render() {\n        const { error } = this.state;\n        const { devices } = this.props;\n        if (devices.size) {\n            return this.renderDevicesTable();\n        }\n        if (error) {\n            return this.renderError();\n        }\n        return (<div className=\"h-100 d-flex justify-content-center align-items-center\">\n            <Spinner />\n        </div>);\n    }\n    lastSeenIsAvaliable(): boolean {\n        const { bridgeInfo } = this.props;\n        return bridgeInfo?.config?.advanced?.elapsed || bridgeInfo?.config?.advanced?.last_seen != \"disable\";\n    }\n\n\n\n    renderDevicesTable() {\n        const { sortedTableData, sortColumn, sortDirection } = this.state;\n        return (<div className=\"card\">\n            <div className=\"table-responsive\">\n                <table className=\"table align-middle\">\n                    <TableHeader\n                        lastSeenIsAvaliable={this.lastSeenIsAvaliable()}\n                        sortColumn={sortColumn}\n                        sortDirection={sortDirection}\n                        onSortChange={this.onSortChange}\n                    />\n                    <tbody>\n                        {sortedTableData.map(({ device, state }, id) => <TableRow\n                            key={device.friendly_name}\n                            device={device}\n                            deviceState={state}\n                            id={id}\n                            lastSeenIsAvaliable={this.lastSeenIsAvaliable()}\n                        />)}\n                    </tbody>\n                </table>\n            </div>\n        </div>);\n    }\n}\n\nconst mappedProps = [\"devices\", \"deviceStates\", \"bridgeInfo\"];\nconst ConnectedZigbeePage = connect<{}, ZigbeeTableState, GlobalState, {}>(mappedProps, actions)(ZigbeeTable);\nexport default ConnectedZigbeePage;\n","import React, { Component } from \"react\";\nimport { connect } from \"unistore/react\";\nimport actions from \"../../actions/actions\";\nimport { GlobalState } from \"../../store\";\nimport cx from \"classnames\";\nimport escapeRegExp from \"lodash/escapeRegExp\";\nimport { BridgeApi } from \"../../actions/BridgeApi\";\n\ntype LogsPageState = {\n    search: string;\n    logLevel: string;\n}\nconst ALL = 'all';\nconst TextWrapper = ({text}) => <>{text}</>;\nconst Highlighted = ({ text = '', highlight = '' }) => {\n    if (!highlight.trim()) {\n        return <TextWrapper text={text} />\n    }\n    const regex = new RegExp(`(${escapeRegExp(highlight)})`, 'gi')\n    const parts = text.split(regex)\n    return (\n        <>\n            {parts.filter(part => part).map((part, i) => (\n                regex.test(part) ? <mark key={i}>{part}</mark> : <TextWrapper key={i} text={part}></TextWrapper>\n            ))}\n        </>\n    )\n}\n\nconst logLevels = [ALL, 'debug', 'info', 'warn', 'error'];\nexport class LogsPage extends Component<GlobalState & BridgeApi, LogsPageState> {\n    state = { search: '', logLevel: ALL }\n    renderSearch() {\n        const { search } = this.state;\n        return <div className=\"card\">\n            <div className=\"card-body\">\n                <form className=\"row row-cols-lg-auto g-3 align-items-center\">\n                    <div className=\"col-12\">\n                        <label htmlFor=\"log-level\" className=\"form-label\">Show only</label>\n                        <select id=\"log-level\" className=\"form-select\" onChange={e => this.setState({ logLevel: e.target.value })}>\n                            {logLevels.map(level => <option key={level} value={level}>{level}</option>)}\n                        </select>\n                    </div>\n                    <div className=\"col-12\">\n                        <label htmlFor=\"search-filter\" className=\"form-label\">Filter by text</label>\n                        <input id=\"search-filter\" className=\"form-control col-10\" placeholder=\"Enter search criteria\" value={search} onChange={(e) => this.setState({ search: e.target.value })} type=\"text\"></input>\n                    </div>\n                </form>\n            </div>\n        </div>;\n    }\n    render() {\n        let { logs } = this.props;\n        const { search, logLevel } = this.state;\n\n        const _search = new RegExp(escapeRegExp(search), 'gi');\n\n        logs = logs\n            .filter(l => (logLevel === ALL || l.level === logLevel) && (!search || _search.test(l.message)))\n            .sort();\n\n        return <>\n            {this.renderSearch()}\n            <div className=\"card\">\n                <div className=\"card-body\">\n                    {logs.length == 0 ? <h1>You don&apos;t have {logLevel === ALL ? 'any' : logLevel} logs</h1> : null}\n                    <div className=\"overflow-auto\">\n                        {\n                            logs.map((l, idx) => <div key={idx}>\n                                {logLevel === ALL && <><span className={cx(\"badge\", {\n                                    'bg-danger': l.level === 'error',\n                                    'bg-warning': l.level === 'warning',\n                                    'bg-info': l.level === 'info',\n                                    'bg-secondary': ['error', 'warning', 'info'].includes(l.level) === false,\n                                }, \"text-capitalize\")}>{l.level}</span>&nbsp;</>}<code>\n                                    <Highlighted text={l.message} highlight={search}></Highlighted>\n                                </code></div>)\n                        }\n                    </div>\n                </div>\n            </div>\n        </>\n    }\n}\n\nconst mappedProps = [\"logs\", \"bridgeInfo\"];\n\nexport default connect<{}, {}, GlobalState, {}>(mappedProps, actions)(LogsPage);\n","\nimport React, { Component, FunctionComponent } from \"react\";\n\nimport { connect } from \"unistore/react\";\nimport actions from \"../../actions/actions\";\nimport { OtaApi } from \"../../actions/OtaApi\";\nimport { GlobalState } from \"../../store\";\nimport Button from \"../button\";\nimport { genDeviceDetailsLink, toHHMMSS } from \"../../utils\";\nimport { Link } from \"react-router-dom\";\nimport { Device, DeviceState } from \"../../types\";\nimport { VendorLink, ModelLink } from \"../vendor-links/verndor-links\";\n\n\ntype OtaRowProps = {\n    device: Device;\n    state: DeviceState;\n}\n\nconst StateCell: FunctionComponent<OtaRowProps & OtaApi> = (props) => {\n    const { device, state, checkOTA, updateOTA } = props;\n    switch (state?.update?.state) {\n        case \"updating\":\n            return (<><div className=\"progress\">\n                <div className=\"progress-bar progress-bar-striped progress-bar-animated\" style={{ width: `${state.update.progress}%` }}>\n                    {state.update.progress}%</div>\n            </div>\n                <div>Remaining time {toHHMMSS(state.update.remaining)}</div>\n            </>\n            );\n        case \"available\":\n            return <Button<string> className=\"btn btn-danger btn-sm\" onClick={updateOTA} item={device.friendly_name} title=\"Update OTA\" promt>Update OTA</Button>\n        default:\n            return <Button<string> className=\"btn btn-primary btn-sm\" onClick={checkOTA} item={device.friendly_name} title=\"Check OTA\">Check OTA</Button>\n\n\n    }\n}\nconst OtaRow: FunctionComponent<OtaRowProps & OtaApi> = (props) => {\n    const { device, state, ...rest } = props;\n    return <tr>\n        <td><Link to={genDeviceDetailsLink(device.ieee_address)}>{device.friendly_name}</Link></td>\n\n        <td className=\"text-truncate text-nowrap position-relative\"><VendorLink device={device} /></td>\n        <td title={device?.definition?.description}><ModelLink device={device} /></td>\n        <td>{device.date_code}</td>\n        <td>{device.software_build_id}</td>\n        <td>\n            <StateCell device={device} state={state} {...rest} />\n        </td>\n    </tr>\n}\n\n\nclass OtaPage extends Component<GlobalState & OtaApi, {}> {\n    getAllOtaDevices() {\n        const { devices } = this.props;\n        return Array.from(devices).filter(([, device]) => device?.definition?.supports_ota)\n    }\n    checkAllOTA = () => {\n        const { checkOTA } = this.props;\n        const otaDevices = this.getAllOtaDevices();\n        otaDevices.forEach(([, d]) => checkOTA(d.friendly_name));\n    }\n    render() {\n        const { deviceStates, checkOTA, updateOTA } = this.props;\n        const otaApi = { checkOTA, updateOTA };\n        const otaDevices = this.getAllOtaDevices();\n\n        return <div className=\"card\">\n            <div className=\"card-body table-responsive\">\n                <table className=\"table\">\n                    <thead>\n                        <tr>\n                            <th scope=\"col\">Friendly name</th>\n                            <th>Manufacturer</th>\n                            <th>Model</th>\n                            <th>Firmware build date</th>\n                            <th>Firwmare version</th>\n                            <th><Button className=\"btn btn-danger btn-sm\" onClick={this.checkAllOTA} promt>Check all OTA</Button></th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {otaDevices.length === 0 ? <tr><td colSpan={6}>You don&apos;t have any devices that support OTA</td></tr> : null}\n                        {otaDevices.map(([ieeeAddr, device]) => (\n                            <OtaRow key={ieeeAddr} device={device} state={deviceStates.get(device.friendly_name) as DeviceState} {...otaApi} />\n                        ))}\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    }\n}\n\nconst mappedProps = [\"devices\", \"deviceStates\"];\n\nexport default connect<{}, {}, GlobalState, {}>(mappedProps, actions)(OtaPage);\n","import React from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport Button from \"./button\";\nimport store from \"../store\";\nimport { download } from \"../utils\";\n\ninterface ErrorBoundaryState {\n    error?: Error;\n}\ntype ErrorBoundaryProps = RouteComponentProps<{}>;\n\nexport default class ErrorBoundary extends React.Component<ErrorBoundaryProps, ErrorBoundaryState> {\n    state: Readonly<ErrorBoundaryState> = {};\n\n    static getDerivedStateFromError(error: Error) {\n        return { hasError: true, error };\n    }\n\n    donwloadState = () => {\n        download(store.getState(), 'state.json');\n    }\n\n    render() {\n        const { error } = this.state;\n\n        if (error) {\n            const githubUrlParams = {\n                title: `Got error: ${error.message}`,\n                body: [\n                    `DESCRIBE HERE WHAT HAPPENED AND WHAT YOU EXPECTED TO HAPPEN`,\n                    \"\\n\\n\\n\\n\\n\",\n\n                    `**Current url**: ${window.location.toString()}`,\n                    `**Previous url**: ${document.referrer}`,\n                    \"\\n\",\n                    `**Error type**: ${error?.name}`,\n                    `**Error message**: ${error?.message}`,\n                    \"\\n\\n\",\n                    error?.stack\n                ].join(\"\\n\")\n            } as Record<string, string>;\n\n\n            const githubUrl = `https://github.com/nurikk/z2m-frontend/issues/new?${new URLSearchParams(githubUrlParams).toString()}`\n            return <div className=\"container\">\n\n                <h1 className=\"text-danger\">Hello, you&apos;ve found a bug. Congratulations!</h1>\n                <ol>\n                    <li><strong>Calm down</strong></li>\n                    <li><strong>Raise a github issue <a target=\"_blank\" rel=\"noopener noreferrer\" href={githubUrl}>here</a></strong></li>\n                    <li><strong><span className=\"btn btn-link p-0\" onClick={this.donwloadState}>Download this file</span> and attach to the issue</strong></li>\n                    <li><strong>Take a screenshot of this page and attach to the issue</strong></li>\n                </ol>\n                <div>\n                    <div>{error.name}</div>\n                    <div>{error.message}</div>\n                    <pre>{error.stack}</pre>\n                </div>\n            </div>\n\n        }\n        return this.props.children;\n    }\n\n    componentDidUpdate(prevProps: ErrorBoundaryProps) {\n        const { location: { pathname } } = this.props;\n        const { location: { pathname: prevPathname } } = prevProps;\n        if (prevPathname !== pathname) {\n            this.setState({ error: undefined });\n        }\n    }\n}\n\n","import PowerSource from '../../components/power-source';\nimport React from 'react';\nimport { Device, DeviceDefinition, DeviceState, GenericExposedFeature } from '../../types';\nimport { lastSeen } from '../../utils';\n\n\ntype Props = {\n    device: Device;\n    deviceState: DeviceState;\n};\n\nconst footerFeatures = [\n    \"linkquality\"\n];\n\nconst DeviceFooter: React.FC<Props> = ({ device, deviceState }) => {\n    const {\n        last_seen: lastSeenTime,\n        linkquality,\n    } = deviceState;\n    const { exposes } = device.definition as DeviceDefinition;\n    const rederedFeatures = [] as JSX.Element[];\n    (exposes as GenericExposedFeature[])\n        .filter(e => footerFeatures.includes(e.name))\n        .forEach(e => {\n            switch (e.name) {\n                case \"linkquality\":\n                    linkquality && rederedFeatures.push(<span key=\"linkquality\" className=\"me-1\"><i className=\"fa fa-signal fa-fw\" /> {linkquality} LQI</span>);\n                    break;\n                default:\n                    break;\n            }\n        });\n\n    rederedFeatures.push(<PowerSource key={\"power\"} source={device.power_source} battery={deviceState.battery as number} />);\n    return (\n        <footer className=\"card-footer pt-0\">\n            <div className=\"row justify-content-between flex-nowrap\">\n                <div title=\"last update\" className=\"col text-truncate\">\n                    {lastSeen(lastSeenTime)}\n                </div>\n                <div className=\"col col-auto text-truncate\">\n                    {rederedFeatures}\n                </div>\n            </div>\n        </footer>\n    );\n};\n\nexport default DeviceFooter;\n","import React from 'react';\nimport { CompositeFeature } from '../../types';\nimport cx from \"classnames\";\nimport { BaseFeatureProps } from '../features/base';\nimport DeviceFooter from './DeviceFooter';\n\nimport styles from './DashboardDevice.scss';\n\nimport { Link } from 'react-router-dom';\nimport { genDeviceDetailsLink } from '../../utils';\n\nimport Composite from '../features/composite/composite';\nimport DeviceImage from '../device-image';\n\ntype Props = BaseFeatureProps<CompositeFeature>;\n\n\nconst DashboardDevice: React.FC<Props> = ({ onChange, onRead, device, deviceState, feature: { features }, featureWrapperClass }) => {\n    return (\n        <div className=\"col-xl-3 col-lg-4 col-sm-6 col-12 d-flex\">\n            <div className={`flex-fill card flex-shrink-1`}>\n                <div className=\"card-header pb-0\">\n                    <Link to={genDeviceDetailsLink(device.ieee_address)}>\n                        <DeviceImage device={device} className={cx(styles.deviceImage, 'me-2 d-inline')} />{device.friendly_name}\n                    </Link>\n                </div>\n                <div className={`card-body align-items-center row`}>\n                    <Composite feature={{ features } as CompositeFeature}\n                        className=\"row\"\n                        type=\"composite\"\n                        device={device}\n                        deviceState={deviceState}\n                        onChange={onChange}\n                        onRead={onRead}\n                        featureWrapperClass={featureWrapperClass}\n                        minimal={true}\n                    />\n                </div>\n                <DeviceFooter\n                    device={device}\n                    deviceState={deviceState}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default DashboardDevice;\n","// extracted by mini-css-extract-plugin\nexport default {\"deviceImage\":\"_2sZwYIX5ipSoyWG2H7AU79\"};","import camelCase from \"lodash/camelCase\";\nimport startCase from \"lodash/startCase\";\nimport React, { FunctionComponent, PropsWithChildren } from \"react\";\nimport { FetatureWrapperProps } from \"../features/composite/FeatureWrapper\";\nimport cx from \"classnames\";\n\nconst getTemperatureIcon = (temperature: number) => {\n    let icon = 'fa-thermometer-empty';\n    if (temperature >= 30) {\n        icon = 'fa-thermometer-full';\n    } else if (temperature >= 25) {\n        icon = 'fa-thermometer-three-quarters';\n    } else if (temperature >= 20) {\n        icon = 'fa-thermometer-half';\n    } else if (temperature >= 15) {\n        icon = 'fa-thermometer-quarter';\n    }\n    return icon;\n};\n\n\n\nconst typeToClassMap = {\n    humidity: ['text-info', 'fa-tint'],\n    illuminance: ['fa-sun'],\n    pressure: ['fa-cloud-download-alt'],\n    co2: ['fa-atom', 'text-warning'],\n    voltage: ['fa-bolt', 'text-success'],\n    state: ['fa-star-half-alt'],\n    brightness: ['fa-sun'],\n    occupancy: ['fa-walking'],\n    current: ['fa-copyright', 'text-warning'],\n    power: ['fa-power-off', 'text-success'],\n    energy: ['fa-plug', 'text-info'],\n    frequency: ['fa-wave-square'],\n    tamper: ['fa-exclamation-circle'],\n    smoke: ['fa-smoking', 'text-danger'],\n    radiation_dose_per_hour: ['fa-radiation', 'text-danger'],\n    radioactive_events_per_minute: ['fa-radiation-alt', 'text-warning'],\n    power_factor: ['fa-industry', 'text-danger'],\n    /* eslint-disable @typescript-eslint/camelcase */\n    color_xy: ['fa-palette'],\n    color_hs: ['fa-palette'],\n    color_temp: ['fa-sliders-h'],\n    illuminance_lux: ['fa-sun'],\n    soil_moisture: ['fa-fill-drip'],\n    water_leak: ['fa-water'],\n    /* eslint-enable @typescript-eslint/camelcase */\n};\nconst getGenericFeatureIcon = (name: string, value: unknown): string => {\n    let classes = [] as string[];\n    switch (name) {\n        case 'temperature':\n            classes.push(cx('text-danger', getTemperatureIcon(value as number)))\n            break;\n        case 'contact':\n            classes.push(cx({ 'fa-door-closed text-muted': value, 'fa-door-open text-primary': !value }))\n            break;\n        case 'occupancy':\n            classes.push(cx({ 'text-warning': value }))\n            break;\n        case 'water_leak':\n            classes.push(cx({ 'text-primary': value }));\n            break;\n        default:\n            break;\n    }\n    classes = [...classes, ...(typeToClassMap[name] ?? [])];\n    if (!classes.length) {\n        classes.push('invisible');\n    }\n    return cx(classes);\n}\n\nexport const DashboardFeatureWrapper: FunctionComponent<PropsWithChildren<FetatureWrapperProps>> = (props) => {\n    const { children, feature, deviceState = {} } = props;\n    const icon = getGenericFeatureIcon(feature.name, deviceState[feature.property]);\n\n    return <div className=\"d-flex align-items-center\">\n        {icon && <div className=\"me-1\">\n            <i className={`fa fa-fw ${icon}`} />\n        </div>}\n        <div className=\"flex-shrink-1 flex-grow-1\">{startCase(camelCase(feature.name))}{feature.endpoint ? ` (${feature.endpoint})` : null}</div>\n        <div className=\"flex-shrink-0\">{children}</div>\n    </div>\n}\n\n","import React from 'react';\n\n\nimport { connect } from 'unistore/react';\n\n\nimport DashboardDevice from './DashboardDevice';\nimport { DeviceState, CompositeFeature, GenericExposedFeature, FeatureAccessMode } from '../../types';\nimport actions from '../../actions/actions';\nimport { StateApi } from \"../../actions/StateApi\";\nimport { GlobalState } from '../../store';\nimport { DashboardFeatureWrapper } from './DashboardFeatureWrapper';\nimport { isOnlyOneBitIsSet } from '../../utils';\n\nimport { isLightFeature } from '../device-page/type-guards';\nimport groupBy from \"lodash/groupBy\";\n\n\ntype Props = Pick<GlobalState, 'devices' | 'deviceStates'> & StateApi;\n\nconst genericRendererIgnoredNames = ['linkquality', 'battery', 'battery_low', 'illuminance_lux', 'color_temp_startup', 'voltage', 'strength', 'color_options'];\nconst whitelistFeatureNames = ['state', 'brightness', 'color_temp'];\nconst whitelistFeatureTypes = ['light'];\nconst nullish = ['', null, undefined];\n\nexport const onlyValidFeaturesForDashboard = (feature: GenericExposedFeature | CompositeFeature, deviceState: DeviceState = {} as DeviceState): GenericExposedFeature | CompositeFeature | false => {\n    const { access, property, name, type } = feature;\n    let { features } = feature as CompositeFeature;\n    if (isLightFeature(feature)) {\n        features = features.map(f => onlyValidFeaturesForDashboard(f, (property ? deviceState[property] : deviceState) as DeviceState)).filter(f => f) as (GenericExposedFeature | CompositeFeature)[];\n        const groupedFeatures = groupBy(features, 'property');\n        features = Object.values(groupedFeatures).map(f => f[0]);\n    }\n    const filteredOutFeature = {...feature, features} as GenericExposedFeature | CompositeFeature;\n    if (whitelistFeatureNames.includes(name)) {\n        return filteredOutFeature;\n    }\n    if (whitelistFeatureTypes.includes(type)) {\n        return filteredOutFeature;\n    }\n    if (access && !(access & FeatureAccessMode.ACCESS_STATE && !nullish.includes(deviceState[property] as string | null | undefined))) {\n        return false;\n    }\n    if (genericRendererIgnoredNames.includes(name)) {\n        return false;\n    }\n\n    if (access & FeatureAccessMode.ACCESS_STATE && isOnlyOneBitIsSet(access)) {\n        return filteredOutFeature;\n    }\n    if (Array.isArray(features) && features.length > 0) {\n        return filteredOutFeature;\n    }\n    return false;\n}\n\nconst Dashboard: React.FC<Props> = (props) => {\n    const { setDeviceState, getDeviceState, deviceStates } = props;\n    return (\n        <div className=\"row\">\n            {Array.from(props.devices)\n                .filter(([, device]) => device.supported)\n                .map(([, device]) => ({ device, deviceState: deviceStates.get(device.friendly_name) ?? ({} as DeviceState) }))\n                .map(({ device, deviceState }) => {\n                    const _features = ((device.definition?.exposes ?? []) as (GenericExposedFeature | CompositeFeature)[]);\n                    const filteredFeatures = _features\n                        .map((e: GenericExposedFeature | CompositeFeature) => onlyValidFeaturesForDashboard(e, deviceState))\n                        .filter(f => f);\n                    return { device, deviceState, filteredFeatures };\n                })\n                .filter(({ filteredFeatures }) => filteredFeatures.length > 0)\n                .map(({ device, deviceState, filteredFeatures }) => {\n\n                    return (\n                        <DashboardDevice\n                            key={device.ieee_address}\n                            feature={{ features: filteredFeatures } as CompositeFeature}\n                            device={device}\n                            deviceState={deviceState}\n                            onChange={(endpoint, value) =>\n                                setDeviceState(`${device.friendly_name}${endpoint ? `/${endpoint}` : ''}`, value)\n                            }\n                            onRead={(endpoint, value) =>\n                                getDeviceState(`${device.friendly_name}${endpoint ? `/${endpoint}` : ''}`, value)\n                            }\n                            featureWrapperClass={DashboardFeatureWrapper}\n                        />\n                    );\n                })}\n        </div>);\n};\n\nconst mappedProps = ['devices', 'deviceStates'];\nexport default connect<{}, {}, GlobalState, {}>(mappedProps, actions)(Dashboard);\n","import React, { Component } from \"react\";\nimport { connect } from \"unistore/react\";\nimport actions from \"../../actions/actions\";\nimport { GlobalState } from \"../../store\";\n\nimport exampleExtensionCode from './example-extension.js.txt';\n\nimport { ExtensionApi } from \"../../actions/ExtensionApi\";\nimport Button from \"../button\";\nimport AceEditor from \"react-ace\";\n\nimport \"ace-builds/src-noconflict/mode-javascript\";\nimport 'ace-builds/src-noconflict/theme-github';\nimport 'ace-builds/src-noconflict/theme-dracula';\n\ntype ExtensionsEditorPageState = {\n    currentExtension?: string;\n}\nexport class ExtensionsEditorPage extends Component<GlobalState & ExtensionApi, ExtensionsEditorPageState> {\n    state: Readonly<ExtensionsEditorPageState> = {};\n    loadExtension = (e) => {\n        const { value } = e.target;\n\n        this.setState({ currentExtension: value });\n    }\n    onExtensionCodeChange = (code: string) => {\n        const { updateExtensionCode } = this.props;\n        const { currentExtension } = this.state;\n\n        currentExtension && updateExtensionCode({ name: currentExtension, code });\n    }\n    onSaveClick = () => {\n        const { saveExtensionCode } = this.props;\n        const { currentExtension } = this.state;\n        const { extensions } = this.props;\n        const extension = extensions.find(e => e.name === currentExtension);\n\n        extension && saveExtensionCode(extension);\n    }\n    removeExtension = () => {\n        const { removeExtension } = this.props;\n        const { currentExtension } = this.state;\n        const { extensions } = this.props;\n        const extension = extensions.find(e => e.name === currentExtension);\n\n        extension && removeExtension(extension);\n    }\n\n    addNewExtension = () => {\n        const { updateExtensionCode } = this.props;\n        const ts = Date.now() + '';\n        const newName = prompt(\"Enter new extension name\", `user-extension${ts}.js`);\n        const templatedCode = exampleExtensionCode.replace(/_TS_/g, ts);\n        if (newName !== null) {\n            updateExtensionCode({ name: newName, code: templatedCode });\n            this.setState({ currentExtension: newName });\n        }\n    }\n    renderEditor() {\n        const { currentExtension } = this.state;\n        const { extensions, theme } = this.props;\n        const code = extensions.find(e => e.name === currentExtension)?.code ?? \"\";\n        const editorTheme = theme === \"light\" ? \"github\" : \"dracula\";\n        return (\n            <>\n                <div className=\"row mb-2\">\n                    <div className=\"col-6\">\n                        <select value={currentExtension} className=\"form-control\" onChange={this.loadExtension}>\n                            <option key=\"hidden\" hidden>Select extension to edit</option>\n                            {extensions.map(({ name }) => <option key={name} value={name}>{name}</option>)}\n                        </select>\n                    </div>\n                    <div className=\"col-6\">\n                        <Button onClick={this.addNewExtension} className=\"btn btn-success me-2\"><i className=\"fa fa-plus\"></i></Button>\n                        <Button promt disabled={!currentExtension} onClick={this.removeExtension} className=\"btn btn-danger me-2\"><i className=\"fa fa-trash\"></i></Button>\n                        <Button disabled={!currentExtension} onClick={this.onSaveClick} className=\"btn btn-primary\">Save</Button>\n                    </div>\n                </div>\n                <AceEditor\n                    mode=\"javascript\"\n                    onChange={this.onExtensionCodeChange}\n                    name=\"UNIQUE_ID_OF_DIV\"\n                    editorProps={{ $blockScrolling: true }}\n                    value={code}\n                    width=\"100%\"\n                    maxLines={Infinity}\n                    theme={editorTheme}\n                    showPrintMargin={false}\n                />\n\n            </>\n        )\n    }\n\n    render() {\n        return <div className=\"card h-100\">\n            <div className=\"card-body h-100\">\n                {this.renderEditor()}\n            </div>\n        </div>\n    }\n}\n\nconst mappedProps = [\"extensions\", \"theme\"];\n\nexport default connect<{}, {}, GlobalState, {}>(mappedProps, actions)(ExtensionsEditorPage);\n","import React, { useEffect, useState } from \"react\";\nimport { connect } from \"unistore/react\";\nimport actions from \"../../actions/actions\";\nimport { GlobalState } from \"../../store\";\nimport Modal, { ModalHeader, ModalBody, ModalFooter } from \"../modal\";\n\nconst StateNotifier = (props: GlobalState) => {\n    const { bridgeState } = props;\n    const [modalOpened, setModalOpened] = useState(bridgeState !== \"online\");\n    useEffect(() => {\n        if (bridgeState !== \"online\") {\n            setModalOpened(true);\n        } else {\n            setModalOpened(false);\n        }\n    }, [bridgeState])\n\n    return (\n        <Modal isOpen={modalOpened}>\n            <ModalHeader>Zigbee2MQTT</ModalHeader>\n            <ModalBody>\n                <div>Hello, Zigbee2MQTT in status <span className=\"text-danger\">{bridgeState}</span>.</div>\n                <div>Please wait....</div>\n            </ModalBody>\n            <ModalFooter>\n                <button type=\"button\" className=\"btn btn-secondary\" onClick={() => setModalOpened(false)}>Close</button>\n            </ModalFooter>\n        </Modal>\n    );\n}\nconst mappedProps = [\"bridgeState\"];\nconst ConnectedStateNotifier = connect<{}, {}, GlobalState, {}>(mappedProps, actions)(StateNotifier);\nexport default ConnectedStateNotifier;\n\n","import \"notyf/notyf.min.css\";\nimport \"./styles/styles.global.scss\";\n\nimport React, { Component, FunctionComponent } from 'react';\n\nimport ConnectedMap from \"./components/map\";\n\nimport {\n    Switch,\n    Route,\n    HashRouter\n} from \"react-router-dom\";\n\nimport ConnectedDevicePage from \"./components/device-page\";\nimport TouchlinkPage from \"./components/touchlink-page\";\n\nimport store from \"./store\";\nimport { Provider } from \"unistore/react\";\nimport api from './api';\n\n\nimport ConnectedSettingsPage from \"./components/settings\";\nimport NavBar from \"./components/navbar\";\nimport ConnectedGroupsPage from \"./components/groups\";\nimport ConnectedZigbeePage from \"./components/zigbee\";\nimport LogsPage from \"./components/logs-page\";\nimport OtaPage from \"./components/ota-page\";\nimport ReactDOM from \"react-dom\";\nimport ErrorBoundary from \"./components/ErrorBoundary\";\nimport DashboardPage from \"./components/dashboard-page\";\nimport ExtensionsEditorPage from \"./components/extensions-editor\";\nimport StateNotifier from \"./components/state-notifier/StateNotifier\";\nimport { ThemeSwitcherProvider } from \"react-css-theme-switcher\";\n\n\n\nconst ConnectedDevicePageWrap: FunctionComponent<{ dev: string }> = ({ dev }) => (\n    <ConnectedDevicePageWrap dev={dev} />\n);\n\nconst themes = {\n    light: './css/light.css',\n    dark: './css/dark.css',\n};\n\napi.connect();\n\n\n// eslint-disable-next-line react/prefer-stateless-function\n\nconst Main = () => {\n    const { theme } = store.getState();\n    return <Provider store={store}>\n        <ThemeSwitcherProvider themeMap={themes} defaultTheme={theme}>\n            <HashRouter>\n                <StateNotifier />\n                <div className=\"main\">\n                    <NavBar />\n                    <main className=\"content p-0 p-sm-3\">\n                        <div className=\"container-fluid p-0 h-100\">\n                            <Switch>\n                                <Route path=\"/ota\" render={(props) => <ErrorBoundary {...props}><OtaPage /></ErrorBoundary>} />\n                                <Route path=\"/map\" render={(props) => <ErrorBoundary {...props}><ConnectedMap /></ErrorBoundary>} />\n                                <Route path=\"/device/:dev/:tab?\" render={(props) => <ErrorBoundary {...props}><ConnectedDevicePage /></ErrorBoundary>} />\n                                <Route path=\"/settings/:tab?\" render={(props) => <ErrorBoundary {...props}><ConnectedSettingsPage /></ErrorBoundary>} />\n                                <Route path=\"/groups\" render={(props) => <ErrorBoundary {...props}><ConnectedGroupsPage /></ErrorBoundary>} />\n                                <Route path=\"/logs\" render={(props) => <ErrorBoundary {...props}><LogsPage /></ErrorBoundary>} />\n                                <Route path=\"/touchlink\" render={(props) => <ErrorBoundary {...props}><TouchlinkPage /></ErrorBoundary>} />\n                                <Route path=\"/dashboard\" render={(props) => <ErrorBoundary {...props}><DashboardPage /></ErrorBoundary>} />\n                                <Route path=\"/extensions\" render={(props) => <ErrorBoundary {...props}><ExtensionsEditorPage /></ErrorBoundary>} />\n                                <Route path=\"/\" render={(props) => <ErrorBoundary {...props}><ConnectedZigbeePage /></ErrorBoundary>} />\n                            </Switch>\n                        </div>\n                    </main>\n                </div>\n            </HashRouter>\n        </ThemeSwitcherProvider>\n    </Provider >\n}\n\nReactDOM.render(<Main />, document.getElementById(\"root\"));\n"],"sourceRoot":""}