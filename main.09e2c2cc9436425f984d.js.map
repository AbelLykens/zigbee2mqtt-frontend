{"version":3,"sources":["webpack:///./src/components/map/types.ts","webpack:///./src/components/map/map.css","webpack:///./src/components/map/links.tsx","webpack:///./src/images/generic-zigbee-device.png","webpack:///./src/components/device-image/index.tsx","webpack:///./src/components/map/nodes.tsx","webpack:///./src/utils.ts","webpack:///./src/store.ts","webpack:///./src/initialState.txt","webpack:///./src/api.ts","webpack:///./src/actions.ts","webpack:///./src/components/button/index.tsx","webpack:///./src/components/map/consts.ts","webpack:///./src/components/map/index.tsx","webpack:///./src/components/modal/index.tsx","webpack:///./src/components/device-control/index.tsx","webpack:///./src/components/device-page/style.css","webpack:///./src/components/power-source/style.css","webpack:///./src/components/power-source/index.tsx","webpack:///./src/components/device-page/info.tsx","webpack:///./src/components/device-picker/index.tsx","webpack:///./src/components/endpoint-picker/index.tsx","webpack:///./src/components/cluster-picker/index.tsx","webpack:///./src/components/device-page/bind-row.tsx","webpack:///./src/components/device-page/bind.tsx","webpack:///./src/components/enum-editor/enum-editor.tsx","webpack:///./src/components/range-editor/range-editor.tsx","webpack:///./src/components/universal-editor/index.tsx","webpack:///./src/components/device-page/states.tsx","webpack:///./src/components/device-page/type-guards.ts","webpack:///./src/components/features/numeric/numeric.tsx","webpack:///./src/components/toggle/index.tsx","webpack:///./src/components/features/binary/binary.tsx","webpack:///./src/components/features/enum/enum.tsx","webpack:///./src/components/features/light/light.tsx","webpack:///./src/components/features/switch/switch.tsx","webpack:///./src/components/features/cover/cover.tsx","webpack:///./src/components/features/lock/lock.tsx","webpack:///./src/components/color-editor/color-editor.tsx","webpack:///./src/components/features/composite/color/color.tsx","webpack:///./src/components/textual-editor/textual-editor.tsx","webpack:///./src/components/features/textual/textual.tsx","webpack:///./src/components/features/composite/composite.tsx","webpack:///./src/components/device-page/exposes.tsx","webpack:///./src/components/device-page/tree.css","webpack:///./src/components/device-page/clusters.tsx","webpack:///./src/components/device-page/index.tsx","webpack:///./src/components/touchlink-page/index.tsx","webpack:///./src/components/settings/index.tsx","webpack:///./src/hooks/useComponentVisible.tsx","webpack:///./src/components/navbar/style.css","webpack:///./src/components/navbar/index.tsx","webpack:///./src/components/groups/style.css","webpack:///./src/components/groups/index.tsx","webpack:///./src/components/zigbee/style.css","webpack:///./src/components/zigbee/ActionTH.tsx","webpack:///./src/components/zigbee/index.tsx","webpack:///./src/components/logs-page/index.tsx","webpack:///./src/components/ErrorBoundary.tsx","webpack:///./src/index.tsx"],"names":["ZigbeeRelationship","ref","componentDidMount","current","this","link","props","data","render","id","rest","linkType","className","strokeWidth","fill","linkLabel","linkquality","links","map","sourceIeeeAddr","targetIeeeAddr","key","xlinkHref","AVALIABLE_GENERATORS","device","definition","model","replace","imageGenerators","setimageGenerators","deviceStatus","type","src","length","onImageError","newGenerators","shift","otaSpinner","update","state","title","interviewSpinner","interviewing","unseccessfullInterview","interview_completed","onError","href","getStarShape","innerCircleArms","styleStarWidth","innerOuterRadiusRatio","centerX","centerY","innerRadius","outerRadius","angle","Math","PI","totalArms","points","i","r","cos","sin","calcStarPoints","onMouseOut","node","onMouseOver","onDblClick","deviceType","cn","onDoubleClick","width","height","img","friendlyName","toggle","updateDrag","simulation","dragForce","drag","on","event","d","active","alphaTarget","restart","fx","x","fy","y","undefined","selectAll","call","componentDidUpdate","nodes","ieeeAddr","genDeviceDetailsLink","deviceIdentifier","toHex","input","padding","repeat","toString","substr","toUpperCase","randomString","len","random","replacer","value","originalObject","Map","dataType","Array","from","entries","reviver","str","serialize","JSON","stringify","download","filename","blob","Blob","url","window","URL","createObjectURL","a","document","createElement","body","appendChild","setTimeout","click","revokeObjectURL","removeChild","parse","notyf","blacklistedMessages","showNotity","msg","message","level","status","isResponseWithStatus","error","success","send","topic","payload","socket","procsessBridgeMessage","setState","bridgeConfig","bridgeInfo","forEach","dev","endpoints","Object","set","ieee_address","devices","groups","logs","getState","newLogs","slice","push","every","val","test","response","networkGraphIsLoading","networkGraph","inGraph","createdLinks","Set","sort","b","relationship","source","dst","target","linkId","join","repeatedLink","has","add","repeated","console","warn","payloadData","touchlinkScanInProgress","touchlinkDevices","found","touchlinkIdentifyInProgress","touchlinkResetInProgress","startsWith","onMessage","e","deviceStates","newDeviceStates","get","connect","addEventListener","apiUrl","location","host","pathname","protocol","store","addBind","to","clusters","bindParams","Promise","resolve","removeBind","setStateValue","name","setDeviceState","getStateValue","isArray","n","setPermitJoin","permit","friendly_name","renameDevice","homeassistantRename","removeDevice","force","block","configureDevice","networkMapRequest","routes","createGroup","group","removeGroup","addDeviceToGroup","removeDeviceFromGroup","touchlinkScan","touchlinkIdentify","touchlinkReset","checkOTA","deviceName","updateOTA","updateConfigValue","resetZnp","exportState","onClick","item","promt","confirmed","confirm","children","linkTypes","NeigbhorIsParent","NeigbhorIsAChild","NeigbhorIsASibling","NoneOfTheAbove","s","t","atan2","distancesMap","BrokenLink","Router2Router","Coordinator2Router","Coordinator2EndDevice","EndDevice2Router","getDistance","distance","min","depth","ticked","transform","attr","radius","x1","applyX","max","y1","applyY","x2","y2","dx","dy","dr","sqrt","computeLink","offset","processHighlights","selectedNode","linkedByIndex","l","neighboring","computeOpacity","style","o","svgRef","visibleLinks","updateNodes","filter","includes","everything","zoomHandler","onRequestClick","onLinkTypeFilterChange","stateVisibleLinks","checked","inValue","parseInt","v","updateForces","linkForce","strength","chargeForce","distanceMin","distanceMax","repelForce","collisionForce","centerForce","initPage","getBoundingClientRect","renderMap","viewBox","renderMessage","role","renderMapControls","controls","onChange","htmlFor","container","ModalHeader","ModalBody","ModalFooter","modalShow","display","openModal","bind","closeModal","isOpen","prevProps","isRenameModalOpened","isDeviceRemovalModalOpened","renameParams","isHassRename","removeParams","onRenameClick","onRemoveClick","toggleRenameModal","toggleDeviceRemovalModal","onHassEntityIdChange","onFriendlyNameChange","onDeviceRemovalParamChange","renderRenameButton","config","homeassistant","renderDeviceRemovalButton","battery","batteryClass","displayProps","label","if","supported","supports","network_address","power_source","secs","prop","progress","remaining","floor","onSelect","find","g","options","hidden","devicesOptions","description","getDeviceDisplayName","groupOptions","concat","values","disabled","hasOnlyOneEP","ep","unshift","clusterDescriptions","genScenes","genOnOff","genLevelCtrl","lightingColorCtrl","closuresWindowCovering","pickerId","isChecked","cluster","defaultProps","getEndpoints","obj","keys","members","endpoint","stateRule","setSourceEp","sourceEp","setDestination","destination","setDestinationEp","destinationEp","setClusters","onBindClick","onBind","getBidningParams","onUnBindClick","onUnBind","getDerivedStateFromProps","targeDevice","isValidRule","valid","idx","targetType","sourceEndpoints","rule","getTarget","destinationEndpoints","possibleClusters","output","scope","isNew","rule2key","bidingRules","bindings","targetId","convertBidningsIntoNiceStructure","Date","now","isPrimitive","step","steps","currentValue","setCurrentValue","valueAsNumber","onMouseUp","togglePairs","BluringInput","internalValue","setInternalValue","onBlur","isToggleParameter","fieldProps","brightness","color_temp","readonlyFields","deviceState","kv","kvp","param","isBinaryFeature","feature","isNumericFeature","isTextualFeature","isEnumFeature","isLightFeature","isSwitchFeature","isCoverFeature","isLockFeature","isColorFeature","isCompositeFeature","renderEditor","property","valueMax","valueMin","renderView","unit","valueOn","valueOff","toRGB","sourceFormat","X","Z","hex","Y","hue","saturation","rgbToTargetFormat","targetFormat","hsv","xyz","pridePallete","format","currentColor","setCurrentColor","backgroundColor","features","innerFeature","color","stepsConfiguration","light","inputY","yRange","xRange","xMin","xMax","yMin","kelvin","cover","position","tilt","FeatureWrapper","renderFeature","genericParams","wrapperParams","exposes","ClustersComp","tree","epName","epData","renderContent","match","params","tab","activeClassName","devicePageWithRouter","onIdentifyClick","onResetClick","renderTouchlinkDevices","touchlinkInProgress","touchlinkDevice","channel","renderNoDevices","settings","path","updateConfig","renderSwitcher","renderSettings","renderBridgeInfo","renderLegacyApiSettings","setting","advanced","legacy_api","SettingsPageWithRouter","useComponentVisible","initialIsVisible","isComponentVisible","setIsComponentVisible","handleHideDropdown","handleClickOutside","contains","removeEventListener","urls","exact","StartStopJoinButton","selectedRouter","setSelectedRouter","routers","selectAndHide","show","permit_join","getDeviceObj","groupAddress","rowNumber","onRemove","deviceFriendlyName","groupMemebershipInfo","onSubmit","onDeviceSelect","onEpChange","deviceObj","newGroupName","changeHandler","onGroupCreateSubmit","groupFriendlyName","renderGroupCreationForm","required","placeholder","renderGroups","reverse","preventDefault","stopPropagation","column","renderArrow","currentDirection","Component","saveState","storeData","sortDirection","sortColumn","localStorage","setItem","handleLongLoading","size","onSortChange","sortDir","currentTime","sortedTableData","restoreState","storedState","getItem","restored","tableData","renderError","renderDevicesTable","lastSeenIsAvaliable","elapsed","last_seen","vendor","lastSeen","diff","donwloadState","getDerivedStateFromError","hasError","stack","getElementById"],"mappings":"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","file":"main.09e2c2cc9436425f984d.js","sourcesContent":["import { SimulationLinkDatum, SimulationNodeDatum } from \"d3-force\";\nimport { DeviceType, DeviceDefinition } from \"../../types\";\n\nexport interface NodeI extends SimulationNodeDatum {\n    ieeeAddr: string;\n    friendlyName?: string;\n    type?: DeviceType;\n    failed?: string[];\n    lastSeen?: number;\n    definition?: DeviceDefinition;\n}\n\nexport type LinkType =\n    \"Coordinator2EndDevice\" |\n    \"EndDevice2Coordinator\" |\n\n    \"Coordinator2Router\" |\n    \"Router2Coordinator\" |\n\n    \"EndDevice2Router\" |\n    \"Router2EndDevice\" |\n\n    \"Router2Router\" |\n\n    \"BrokenLink\";\n\nexport interface Source extends SimulationNodeDatum {\n    ieeeAddr: string;\n}\n\nexport interface Target extends SimulationNodeDatum {\n    ieeeAddr: string;\n}\nexport enum ZigbeeRelationship {\n    NeigbhorIsParent,\n    NeigbhorIsAChild,\n    NeigbhorIsASibling,\n    NoneOfTheAbove,\n    NeigbhorIsAFormerChild\n}\n\nexport interface LinkI extends SimulationLinkDatum<NodeI> {\n    source: Source;\n    target: Target;\n    linkquality: number;\n    depth: number;\n    routes: unknown[];\n    sourceIeeeAddr: string;\n    targetIeeeAddr: string;\n    sourceNwkAddr: number;\n    lqi: number;\n    relationship: ZigbeeRelationship;\n    linkType: LinkType;\n    repeated?: boolean;\n}\n\nexport interface GraphI {\n    nodes: NodeI[];\n    links: LinkI[];\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"_1TK12NlMUcpu0IZGw5KG9F\",\"img\":\"-vLZFy4QqTaA5Lql2j7WL\",\"node\":\"_3VABKCYaUBV0N55MRkEiCg\",\"link\":\"_2MMYgLsCQ5mPT-AJSdZ4Uz\",\"linkLabel\":\"EFSV-Lj6sJyoW14QA3ig0\",\"links\":\"_3m9RTJKJZqiJx1UmLLzi4\",\"nodes\":\"_1RxBn1bAxqYxk5W0mPwZMS\",\"EndDevice\":\"JhUbmgThutQMk8laPcsxg\",\"Coordinator\":\"_3F14ZWmKtSPPHai2y_MRRj\",\"Router\":\"_1I1ZcuMgRbn_B5HXF9Z2mw\",\"BrokenLink\":\"_3FeEi6FG3R9pYpboNF-OBu\",\"Coordinator2Router\":\"_2cFMSmedVqD5hjj2K7XpsQ\",\"Router2Coordinator\":\"_3KnTt0kzrMwLh56UMBBqwe\",\"Router2Router\":\"_3HeSfltIQjH_mQxhaoHnCs\",\"Coordinator2EndDevice\":\"_2zGuiMZ7r-Z4mfRvCVQEAp\",\"EndDevice2Coordinator\":\"_35uGMHQCj1Sx5FyJk5-Ec1\",\"Router2EndDevice\":\"_1nD8O-bIFFZWctv6x4zD8j\",\"EndDevice2Router\":\"_2tVxslI3DwN1gBA6s3V24b\",\"foreignObject\":\"_1PgTRqMkYD7R1RqIF7R5ni\",\"offline\":\"_3goiiMv86rV5wazL6jDpjU\",\"controls\":\"RIAc5GeET4TLTKyCVy7yK\"};","import { LinkI } from \"./types\";\nimport React, { Component, createRef, FunctionComponent, RefObject } from \"react\";\nimport style from \"./map.css\";\nimport cx from \"classnames\";\nimport { select } from \"d3-selection\";\n\ninterface LinkProps {\n    link: LinkI;\n    id?: string;\n}\n\nclass Link extends Component<LinkProps, {}> {\n    ref = createRef<SVGPathElement>();\n\n    componentDidMount(): void {\n        const { current } = this.ref;\n        const { link } = this.props;\n        select(current as SVGPathElement).data([link]);\n    }\n\n    render() {\n        const { link, id, ...rest } = this.props;\n        const { linkType } = link;\n\n        return (\n            <path\n                id={id}\n                {...rest}\n                className={cx(style.link, style[linkType])}\n                ref={this.ref as RefObject<SVGPathElement>}\n                strokeWidth={1}\n                fill=\"transparent\"\n            />\n        );\n    }\n}\n\ninterface LinkLabelProps extends LinkProps {\n    xlinkHref: string;\n}\n\nclass LinkLabel extends Component<LinkLabelProps, {}> {\n    ref = createRef<SVGTextElement>();\n\n    componentDidMount(): void {\n        const { current } = this.ref;\n        const { link } = this.props;\n        select(current as SVGTextElement).data([link]);\n    }\n\n    render() {\n        const { link } = this.props;\n        return (\n            <text\n                className={style.linkLabel}\n                ref={this.ref}\n            >\n                {link.linkquality}\n            </text>\n        );\n    }\n}\n\ninterface LinksPros {\n    links: LinkI[];\n}\n\nconst Links: FunctionComponent<LinksPros> = props => {\n    const { links } = props;\n    return (\n        <g className={style.links}>\n            {links.map((link: LinkI) => <Link\n                id={`edgepath${link.sourceIeeeAddr}-${link.targetIeeeAddr}-${link.linkType}`}\n                key={`link${link.sourceIeeeAddr}-${link.targetIeeeAddr}-${link.linkType}`}\n                link={link}\n            />)}\n            {links.map((link: LinkI) => (\n                <LinkLabel\n                    xlinkHref={`#edgepath${link.sourceIeeeAddr}-${link.targetIeeeAddr}-${link.linkType}`}\n                    key={`label${link.sourceIeeeAddr}-${link.targetIeeeAddr}-${link.linkType}`}\n                    link={link}\n                />\n            ))}\n        </g>\n    );\n};\nexport default Links;\n","export default __webpack_public_path__ + \"d921749ee5fe6bc67e4ca4a150544be0.png\";","import React, { FunctionComponent, ImgHTMLAttributes, useState } from \"react\";\nimport genericDevice from \"../../images/generic-zigbee-device.png\";\nimport { Device, DeviceState } from \"../../types\";\nimport cx from \"classnames\";\ntype DeviceImageProps = {\n    device: Device;\n    deviceStatus?: DeviceState;\n    type?: \"img\" | \"svg\";\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst genericDeiviceImageFallback = (device: Device): string => genericDevice;\nconst genSlsDeviceImageUrlZ2M = (device: Device): string => `https://www.zigbee2mqtt.io/images/devices/${device?.definition?.model?.replace(/:|\\s|\\//g, \"-\")}.jpg`;\nconst genSlsDeviceImageUrlSLS = (device: Device): string => `https://slsys.github.io/Gateway/devices/png/${device?.definition?.model?.replace(\"/\", \"_\")}.png`;\n\nconst AVALIABLE_GENERATORS = [\n    genSlsDeviceImageUrlZ2M, genSlsDeviceImageUrlSLS, genericDeiviceImageFallback\n]\n\nconst DeviceImage: FunctionComponent<DeviceImageProps & ImgHTMLAttributes<HTMLDivElement | SVGImageElement>> = (props) => {\n    const [imageGenerators, setimageGenerators] = useState(AVALIABLE_GENERATORS);\n    const { device, deviceStatus, type = \"img\", className, ...rest } = props;\n    const src = imageGenerators.length ? imageGenerators[0](device) : false;\n    const onImageError = () => {\n        const newGenerators = [...imageGenerators];\n        newGenerators.shift();\n        setimageGenerators(newGenerators);\n    };\n    const otaSpinner = deviceStatus?.update?.state === \"updating\" ? <i title=\"Updating firmware\" className=\"fa fa-sync fa-spin position-absolute bottom-0 right-0\" /> : null;\n    const interviewSpinner = device.interviewing ? <i title=\"Interviewing\" className=\"fa fa-spinner fa-spin position-absolute bottom-0 right-0\" /> : null;\n    const unseccessfullInterview = !device.interviewing && !device.interview_completed ? <i title=\"Interview failed\" className=\"fa fa-exclamation-triangle position-absolute top-0 right-0 text-danger\" /> : null;\n    switch (type) {\n        case \"svg\":\n            return src ? <image {...rest} onError={onImageError} href={src} /> : null;\n        case \"img\":\n        default:\n            return src ? <div className={cx(className, \"position-relative\")} {...rest}>\n                <img  onError={onImageError} src={src} className={\"position-relative\"} />\n                {interviewSpinner}\n                {otaSpinner}\n                {unseccessfullInterview}\n            </div> : null;\n    }\n}\nexport default DeviceImage;","import React, { Component, createRef, RefObject } from \"react\";\nimport { LinkI, NodeI, Source, Target } from \"./types\";\nimport cx from \"classnames\";\nimport style from \"./map.css\";\nimport { MouseEventsResponderNode } from \".\";\nimport { Device } from \"../../types\";\nimport DeviceImage from \"../device-image\";\nimport { Simulation } from \"d3-force\";\nimport { select, selectAll } from \"d3-selection\";\nimport { drag } from \"d3-drag\";\n\n\nconst calcStarPoints = (\n    centerX: number,\n    centerY: number,\n    innerCircleArms: number,\n    innerRadius: number,\n    outerRadius: number\n): string => {\n    const angle = Math.PI / innerCircleArms;\n    const angleOffsetToCenterStar = 60;\n    const totalArms = innerCircleArms * 2;\n    let points = \"\";\n    for (let i = 0; i < totalArms; i++) {\n        const isEvenIndex = i % 2 == 0;\n        const r = isEvenIndex ? outerRadius : innerRadius;\n        const currX = centerX + Math.cos(i * angle + angleOffsetToCenterStar) * r;\n        const currY = centerY + Math.sin(i * angle + angleOffsetToCenterStar) * r;\n        points += `${currX}, ${currY} `;\n    }\n    return points;\n};\n\n\nconst getStarShape = (innerCircleArms: number, styleStarWidth: number, innerOuterRadiusRatio: number): string => {\n    return calcStarPoints(\n        15,\n        15,\n        innerCircleArms,\n        styleStarWidth,\n        innerOuterRadiusRatio\n    );\n};\n\ninterface NodeProps extends MouseEventsResponderNode {\n    node: NodeI;\n}\n\nconst offlineTimeout = 3600 * 2;\n\nexport const isOnline = (device: Device): boolean => {\n\n    return true; //Date.now() - device.lastSeen < offlineTimeout;\n};\n\nclass Node extends Component<NodeProps, {}> {\n    ref = createRef<SVGPolygonElement | SVGCircleElement | SVGImageElement>();\n\n    componentDidMount(): void {\n        const { current } = this.ref;\n        const { node } = this.props;\n        select(current as SVGElement).data([node]);\n    }\n\n    onMouseOut = (): void => {\n        const { node, onMouseOut } = this.props;\n        onMouseOut && onMouseOut(node, this.ref.current);\n    };\n\n    onMouseOver = (): void => {\n        const { node, onMouseOver } = this.props;\n        onMouseOver && onMouseOver(node, this.ref.current);\n    };\n\n    onDblClick = (): void => {\n        const { node, onDblClick } = this.props;\n        onDblClick && onDblClick(node, this.ref.current);\n    };\n\n    render() {\n\n        const { node } = this.props;\n        const { onMouseOver, onMouseOut, onDblClick } = this;\n        const deviceType = node.type as string;\n        const cn = cx(style.node, style[deviceType]); //{ [style.offline]: !isOnline(node.device, time) }\n        return (<g className={cn}\n            ref={this.ref as RefObject<SVGImageElement>}\n            onMouseOver={onMouseOver}\n            onMouseOut={onMouseOut}\n            onDoubleClick={onDblClick}\n        >\n            {\n                node.type === \"Coordinator\" ? (\n                    <polygon\n                        points={getStarShape(5, 5, 14) as string}\n                    />\n                ) : (\n                        <DeviceImage\n                            type=\"svg\"\n                            width={32}\n                            height={32}\n                            device={node as unknown as Device}\n                            className={`${style.img}`}\n                        />\n                    )\n            }\n            <text>{node.friendlyName}</text>\n\n        </g>);\n\n    }\n}\n\ninterface NodesProps extends MouseEventsResponderNode {\n    nodes: NodeI[];\n    simulation: Simulation<NodeI, LinkI>;\n}\n\ntype NodesState = {\n    toggle: boolean;\n}\n\nexport default class Nodes extends Component<NodesProps, NodesState> {\n    state: Readonly<NodesState> = {\n        toggle: false\n    }\n    updateDrag(): void {\n        const { simulation } = this.props;\n        const dragForce = drag<SVGCircleElement, NodeI>()\n            .on(\"start\", (event, d) => {\n                if (!event.active) {\n                    simulation.alphaTarget(0.3).restart();\n                }\n                d.fx = d.x;\n                d.fy = d.y;\n            })\n            .on(\"drag\", (event, d) => {\n                d.fx = event.x;\n                d.fy = event.y;\n            })\n            .on(\"end\", (event, d) => {\n                if (!event.active) {\n                    simulation.alphaTarget(0);\n                }\n                d.fx = undefined;\n                d.fy = undefined;\n            });\n\n\n        selectAll<SVGCircleElement, NodeI>(`.${style.node}`)\n            .call(dragForce);\n    }\n\n    componentDidMount(): void {\n        this.updateDrag();\n    }\n\n    componentDidUpdate(): void {\n        this.updateDrag();\n    }\n\n   \n\n    render() {\n        const { nodes, onMouseOut, onMouseOver } = this.props;\n        return (\n            <g className={style.nodes}>\n                {nodes.map((node: NodeI) => (\n                    <Node\n                        onMouseOut={onMouseOut}\n                        onMouseOver={onMouseOver}\n                        key={node.ieeeAddr}\n                        node={node}\n                    />\n                ))}\n            </g>\n        );\n    }\n}\n","\nimport { Device, Endpoint } from \"./types\";\nimport { GraphI, NodeI } from \"./components/map/types\";\nimport { format } from 'timeago.js';\n\nexport const genDeviceDetailsLink = (deviceIdentifier: string | number): string => (`/device/${deviceIdentifier}`);\n\nexport const toHex = (input: number, padding = 4): string => {\n    return `0x${(`${'0'.repeat(padding)}${input.toString(16)}`).substr(-1 * padding).toUpperCase()}`;\n};\n\n\nexport const toHHMMSS = (secs: number): string => {\n    const hours = Math.floor(secs / 3600);\n    const minutes = Math.floor(secs / 60) % 60;\n    const seconds = Math.floor(secs % 60);\n\n    return [hours, minutes, seconds]\n        .map(v => v < 10 ? `0${v}` : v)\n        .filter((v, i) => v !== \"00\" || i > 0)\n        .join(\":\");\n};\n\nexport type CallbackHandler<T> = (err: boolean, res: T) => void;\nexport interface ApiResponse<T> {\n    success: boolean;\n    result: T;\n}\n\nexport const lastSeen = (lastSeen: string, elapsed: number): string => {\n    if (!lastSeen && !elapsed) {\n        return \"N/A\";\n    }\n    const diff = elapsed ? Date.now() - elapsed : Date.parse(lastSeen);\n    return format(diff);\n};\n\n\nexport const sanitizeGraph = (inGraph: GraphI): GraphI => {\n    const nodes = {};\n    const links = [];\n    const createdLinks = new Set<string>();\n\n    inGraph.nodes.forEach(node => {\n        nodes[node.ieeeAddr] = node;\n    });\n\n    inGraph.links.sort((a, b) => a.relationship - b.relationship).forEach(link => {\n        const src: NodeI = nodes[link.source.ieeeAddr];\n        const dst: NodeI = nodes[link.target.ieeeAddr];\n        if (src && dst) {\n            const linkId = [link.source.ieeeAddr, link.target.ieeeAddr].sort().join('');\n            const repeatedLink = createdLinks.has(linkId);\n            createdLinks.add(linkId);\n            const linkType = [src.type, dst.type].join('2');\n            links.push({ ...link, ...{ source: link.source.ieeeAddr, target: link.target.ieeeAddr, linkType, repeated: repeatedLink } });\n        } else {\n            console.warn(\"Broken link\", link);\n        }\n    });\n\n    inGraph.links = links;\n    return inGraph;\n};\n\nexport const getDeviceDisplayName = (device: Device): string => {\n    return `${device.friendly_name} ${device.definition?.model ? `(${device.definition?.model})` : ''}`;\n};\n\nexport const randomString = (len: number): string => Math.random().toString(36).substr(2, len);\n\nexport const isSecurePage = (): boolean => location.protocol === 'https:';\n\n\nexport const scale = (inputY: number, yRange: Array<number>, xRange: Array<number>): number => {\n    const [xMin, xMax] = xRange;\n    const [yMin, yMax] = yRange;\n\n    const percent = (inputY - yMin) / (yMax - yMin);\n    const outputX = percent * (xMax - xMin) + xMin;\n\n    return outputX;\n};\n\n\n\n\nfunction replacer(key: string, value: object) {\n    const originalObject = this[key];\n    if (originalObject instanceof Map) {\n        return {\n            dataType: 'Map',\n            value: Array.from(originalObject.entries()),\n        };\n    } else {\n        return value;\n    }\n}\n\nfunction reviver(key: string, value: { dataType: string; value: Iterable<readonly [unknown, unknown]>; }) {\n    if (typeof value === 'object' && value !== null) {\n        if (value.dataType === 'Map') {\n            return new Map(value.value);\n        }\n    }\n    return value;\n}\n\nexport const serialize = (data: object) => {\n    return JSON.stringify(data, replacer);\n}\n\nexport const deSerialize = (str: string) => {\n    return JSON.parse(str, reviver);\n}\n\n\nexport const download = (data: object, filename: string): void => {\n    const blob = new Blob([serialize(data)], { type: 'octet/stream' });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    document.body.appendChild(a);\n    a.href = url;\n    a.download = filename;\n\n    setTimeout(() => {\n        a.click();\n        window.URL.revokeObjectURL(url);\n        document.body.removeChild(a);\n    }, 1);\n\n}","import createStore from \"unistore\";\nimport devtools from \"unistore/devtools\";\nimport initialState from './initialState.txt';\n\n\nimport { Device, DeviceState, BridgeConfig, BridgeInfo, TouchLinkDevice } from \"./types\";\nimport { GraphI } from \"./components/map/types\";\nimport { deSerialize } from \"./utils\";\n\nexport interface GroupAddress {\n    endpoint: number;\n    ieee_address: string;\n}\n\nexport interface Group {\n    id: number;\n    friendly_name: string;\n    members: GroupAddress[];\n}\n\nexport interface LogMessage {\n    level: \"error\" | \"info\" | \"warning\";\n    message: string;\n}\n\nexport interface GlobalState {\n    devices: Map<string, Device>;\n    deviceStates: Map<string, DeviceState>;\n    touchlinkDevices: TouchLinkDevice[];\n    touchlinkScanInProgress: boolean;\n    touchlinkIdentifyInProgress: boolean;\n    touchlinkResetInProgress: boolean;\n    networkGraph: GraphI;\n    networkGraphIsLoading: boolean;\n    groups: Group[];\n    bridgeConfig: BridgeConfig;\n    bridgeInfo: BridgeInfo;\n    logs: LogMessage[];\n};\nconst _store = createStore(deSerialize(initialState) as GlobalState);\nconst store = process.env.NODE_ENV === 'production' ?  _store : devtools(_store);\n\nexport default store;","export default \"{\\n  \\\"devices\\\": {\\\"dataType\\\":\\\"Map\\\",\\\"value\\\":[]},\\n  \\\"deviceStates\\\": {\\\"dataType\\\":\\\"Map\\\",\\\"value\\\":[]},\\n  \\\"touchlinkDevices\\\": [],\\n  \\\"touchlinkScanInProgress\\\": false,\\n  \\\"touchlinkIdentifyInProgress\\\": false,\\n  \\\"touchlinkResetInProgress\\\": false,\\n  \\\"networkGraph\\\": {\\n    \\\"links\\\": [],\\n    \\\"nodes\\\": []\\n  },\\n  \\\"networkGraphIsLoading\\\": false,\\n  \\\"groups\\\": [],\\n  \\\"bridgeConfig\\\": {},\\n  \\\"bridgeInfo\\\": {},\\n  \\\"logs\\\": []\\n}\";","import ReconnectingWebSocket from \"reconnecting-websocket\";\nimport store, { Group, LogMessage } from \"./store\";\nimport { BridgeConfig, BridgeInfo, TouchLinkDevice, Device, DeviceState } from './types';\nimport { sanitizeGraph, isSecurePage } from \"./utils\";\nimport { Notyf } from \"notyf\";\nimport { GraphI } from \"./components/map/types\";\n\nimport orderBy from \"lodash/orderBy\";\n\n\nconst MAX_LOGS_RECORDS_IN_BUFFER = 100;\n\nconst notyf = new Notyf();\n\ninterface Message {\n    topic: string;\n    payload: string | object | object[] | string[];\n}\n\nconst blacklistedMessages: RegExp[] = [\n    /MQTT publish/\n];\n\nconst isLogMessage = (msg: LogMessage | ResponseWithStatus): msg is LogMessage => {\n    return (msg as LogMessage).level !== undefined && (msg as LogMessage).message !== undefined;\n}\n\nconst isResponseWithStatus = (msg: LogMessage | ResponseWithStatus): msg is ResponseWithStatus => {\n    return (msg as ResponseWithStatus).status !== undefined;\n}\n\nconst showNotity = (data: LogMessage | ResponseWithStatus): void => {\n    let message = \"\", level = \"\";\n    if (isLogMessage(data)) {\n        message = data.message;\n        level = data.level;\n    } else if (isResponseWithStatus(data)) {\n        switch (data.status) {\n            case \"error\":\n                level = \"error\";\n                message = data.error;\n                break;\n            default:\n                break;\n        }\n    }\n\n    switch (level) {\n        case \"error\":\n        case \"warning\":\n            notyf.error(message);\n            break;\n        case \"info\":\n            notyf.success(message);\n            break;\n\n        default:\n            break;\n    }\n};\n\ninterface ResponseWithStatus {\n    status: \"ok\" | \"error\";\n    data: unknown;\n    error?: string;\n}\ninterface TouchllinkScanResponse extends ResponseWithStatus {\n    data: {\n        found: TouchLinkDevice[];\n    };\n}\nclass Api {\n    url: string;\n    socket: ReconnectingWebSocket;\n    constructor(url: string) {\n        this.url = url;\n    }\n    send = (topic: string, payload: unknown): void => {\n        this.socket.send(JSON.stringify({ topic, payload }));\n    }\n\n    connect(): void {\n        this.socket = new ReconnectingWebSocket(this.url);\n\n        this.socket.addEventListener(\"message\", this.onMessage);\n    }\n    private procsessBridgeMessage = (data: Message): void => {\n        switch (data.topic) {\n            case \"bridge/config\":\n                store.setState({\n                    bridgeConfig: data.payload as BridgeConfig\n                });\n                break;\n\n            case \"bridge/info\":\n                store.setState({\n                    bridgeInfo: data.payload as BridgeInfo\n                });\n                break;\n\n            case \"bridge/devices\":\n                {\n                    const devicesMap = new Map();\n                    orderBy((data.payload as Device[]), \"friendly_name\").forEach((device) => {\n                        const dev = { ...device };\n                        dev.endpoints = new Map(Object.entries(device.endpoints));\n                        devicesMap.set(device.ieee_address, dev);\n                    });\n                    store.setState({\n                        devices: devicesMap\n                    })\n                }\n                break;\n\n            case \"bridge/groups\":\n                store.setState({\n                    groups: data.payload as Group[]\n                })\n                break;\n\n            case \"bridge/event\":\n                break;\n\n            case \"bridge/logging\":\n                {\n                    const { logs } = store.getState();\n                    const newLogs = [...logs.slice(-MAX_LOGS_RECORDS_IN_BUFFER)];\n                    newLogs.push(data.payload as LogMessage);\n                    store.setState({ logs: newLogs });\n                    const log = data.payload as LogMessage;\n                    if (blacklistedMessages.every(val => !val.test(log.message))) {\n                        showNotity(log);\n                    }\n                }\n                break;\n\n            case \"bridge/response/networkmap\":\n                {\n                    const response = data.payload as ResponseWithStatus;\n                    if (response.status == \"ok\") {\n                        const { value } = response.data as {value: unknown};\n                        store.setState({\n                            networkGraphIsLoading: false,\n                            networkGraph: sanitizeGraph(value as GraphI)\n                        });\n                    } else {\n                        store.setState({ networkGraphIsLoading: false });\n                    }\n                }\n                break;\n\n\n            case \"bridge/response/touchlink/scan\":\n                {\n                    const { status, data: payloadData } = data.payload as TouchllinkScanResponse;\n                    if (status === \"ok\") {\n                        store.setState({ touchlinkScanInProgress: false, touchlinkDevices: payloadData.found });\n                    } else {\n                        store.setState({ touchlinkScanInProgress: false });\n                    }\n                }\n                break;\n\n            case \"bridge/response/touchlink/identify\":\n                store.setState({ touchlinkIdentifyInProgress: false });\n                break;\n\n            case \"bridge/response/touchlink/factory_reset\":\n                store.setState({ touchlinkResetInProgress: false });\n                break;\n\n            default:\n                break;\n        }\n        if (data.topic.startsWith(\"bridge/response/\")) {\n            showNotity(data.payload as ResponseWithStatus);\n        }\n    }\n\n    private onMessage = (event: MessageEvent): void => {\n        let data = {} as Message;\n        try {\n            data = JSON.parse(event.data) as Message;\n        } catch (e) {\n            notyf.error(e.message);\n            notyf.error(event.data);\n        }\n\n        if (data.topic.startsWith(\"bridge/\")) {\n            this.procsessBridgeMessage(data);\n        }  else {\n            const { deviceStates } = store.getState();\n            const newDeviceStates = new Map(deviceStates);\n            newDeviceStates.set(data.topic, { ...newDeviceStates.get(data.topic), ...(data.payload as DeviceState) });\n            store.setState({ deviceStates: newDeviceStates });\n        }\n    }\n}\nconst apiUrl = `${window.location.host}${document.location.pathname}api`;\nconst api = new Api(`${isSecurePage() ? 'wss' : 'ws'}://${apiUrl}`);\nexport default api;","/* eslint-disable @typescript-eslint/no-unused-vars */\n\nimport { GlobalState } from \"./store\";\nimport { Store } from \"unistore\";\n\nimport { Cluster, Device, TouchLinkDevice } from \"./types\";\nimport api from \"./api\";\nimport { endDevice2Router } from \"./components/map/map.module.css\";\nimport { download } from \"./utils\";\n\nexport interface UtilsApi {\n    exportState(): Promise<void>;\n}\n\nexport interface TouchlinkApi {\n    touchlinkScan(): Promise<void>;\n    touchlinkIdentify(device: TouchLinkDevice): Promise<void>;\n    touchlinkReset(device: TouchLinkDevice): Promise<void>;\n}\n\nexport interface OtaApi {\n    checkOTA(deviceName: string): Promise<void>;\n    updateOTA(deviceName: string): Promise<void>;\n}\nexport interface DeviceApi {\n    renameDevice(\n        old: string,\n        newName: string,\n        homeassistantRename: boolean\n    ): Promise<void>;\n    removeDevice(dev: string, force: boolean, block: boolean): Promise<void>;\n    configureDevice(name: string): Promise<void>;\n}\n\nexport interface StateApi {\n    setStateValue(dev: string, name: string, value: unknown): Promise<void>;\n    getStateValue(dev: string, name: string | string[]): Promise<void>;\n    setDeviceState(dev: string, value: object): Promise<void>;\n}\n\nexport interface GroupsApi {\n    createGroup(name: string): Promise<void>;\n    removeGroup(name: string): Promise<void>;\n    addDeviceToGroup(device: string, group: string): Promise<void>;\n    removeDeviceFromGroup(device: string, group: string): Promise<void>;\n}\nexport interface BindApi {\n    addBind(from: string, to: string, clusters: Cluster[]): Promise<void>;\n    removeBind(from: string, to: string, clusters: Cluster[]): Promise<void>;\n}\nexport interface BridgeApi {\n    setPermitJoin(permit: boolean, device: Device): Promise<void>;\n    updateConfigValue(name: string, value: unknown): Promise<void>;\n}\nexport interface MapApi {\n    networkMapRequest(): Promise<void>;\n}\n\nexport interface LegacyApi {\n    resetZnp(): Promise<void>;\n}\n\nconst actions = (store: Store<GlobalState>): object => ({\n    addBind: (\n        state,\n        from: string,\n        to: string,\n        clusters: Cluster[]\n    ): Promise<void> => {\n        const bindParams = {\n            from,\n            to,\n            clusters,\n        };\n        api.send(\"bridge/request/device/bind\", bindParams);\n        return Promise.resolve();\n    },\n    removeBind: (\n        state,\n        from: string,\n        to: string,\n        clusters: Cluster[]\n    ): Promise<void> => {\n        const bindParams = {\n            from,\n            to,\n            clusters,\n        };\n        api.send(\"bridge/request/device/unbind\", bindParams);\n        return Promise.resolve();\n    },\n\n    setStateValue(\n        state,\n        dev: string,\n        name: string,\n        value: string | number | boolean\n    ): Promise<void> {\n        api.send(`${dev}/set`, { [name]: value });\n        return Promise.resolve();\n    },\n    setDeviceState(state, dev: string, value: object) {\n        api.send(`${dev}/set`, value);\n        return Promise.resolve();\n    },\n\n    getStateValue(state, dev: string, name: string | string[]): Promise<void> {\n        const payload = {};\n        if (typeof name === \"string\") {\n            payload[name] = \"\";\n        } else if (Array.isArray(name)) {\n            name.forEach((n) => {\n                payload[n] = \"\";\n            });\n        }\n        api.send(`${dev}/get`, payload);\n        return Promise.resolve();\n    },\n\n    setPermitJoin(state, permit = true, device: Device): Promise<void> {\n        api.send(\"bridge/request/permit_join\", { value: permit, device: device?.friendly_name });\n        return Promise.resolve();\n    },\n\n    renameDevice: (\n        state,\n        from: string,\n        to: string,\n        homeassistantRename: boolean\n    ): Promise<void> => {\n        api.send(\"bridge/request/device/rename\", {\n            from,\n            to,\n            'homeassistant_rename': homeassistantRename,\n        });\n        return Promise.resolve();\n    },\n    removeDevice: (\n        state,\n        dev: string,\n        force: boolean,\n        block: boolean\n    ): Promise<void> => {\n        api.send(\"bridge/request/device/remove\", { id: dev, force, block });\n        return Promise.resolve();\n    },\n\n    configureDevice: (state, name: string): Promise<void> => {\n        api.send(\"bridge/request/device/configure\", { id: name });\n        return Promise.resolve();\n    },\n\n    networkMapRequest: (state): Promise<void> => {\n        store.setState({ networkGraphIsLoading: true });\n        api.send(\"bridge/request/networkmap\", { type: \"raw\", routes: false });\n        return Promise.resolve();\n    },\n    createGroup: (state, group: string): Promise<void> => {\n        api.send(\"bridge/request/group/add\", group);\n        return Promise.resolve();\n    },\n\n    removeGroup: (state, group: string): Promise<void> => {\n        api.send(\"bridge/request/group/remove\", group);\n        return Promise.resolve();\n    },\n\n    addDeviceToGroup: (state, device: string, group: string): Promise<void> => {\n        api.send(\"bridge/request/group/members/add\", { group, device });\n        return Promise.resolve();\n    },\n\n    removeDeviceFromGroup: (\n        state,\n        device: string,\n        group: string\n    ): Promise<void> => {\n        api.send(\"bridge/request/group/members/remove\", { device, group });\n        return Promise.resolve();\n    },\n\n    touchlinkScan(): Promise<void> {\n        store.setState({ touchlinkScanInProgress: true, touchlinkDevices: [] });\n        api.send(\"bridge/request/touchlink/scan\", \"\");\n        return Promise.resolve();\n    },\n    touchlinkIdentify(state, device: TouchLinkDevice): Promise<void> {\n        store.setState({ touchlinkIdentifyInProgress: true });\n        api.send(\"bridge/request/touchlink/identify\", device);\n        return Promise.resolve();\n    },\n    touchlinkReset(state, device: TouchLinkDevice): Promise<void> {\n        store.setState({ touchlinkResetInProgress: true });\n        api.send(\"bridge/request/touchlink/factory_reset\", device);\n        return Promise.resolve();\n    },\n\n    checkOTA: (state, deviceName: string): Promise<void> => {\n        api.send(\"bridge/request/device/ota_update/check\", { id: deviceName });\n        return Promise.resolve();\n    },\n    updateOTA: (state, deviceName: string): Promise<void> => {\n        api.send(\"bridge/request/device/ota_update/update\", { id: deviceName });\n        return Promise.resolve();\n    },\n    updateConfigValue(state, name: string, value: unknown): Promise<void> {\n        api.send(`bridge/request/config/${name}`, value);\n        return Promise.resolve();\n    },\n\n    resetZnp(state): Promise<void> {\n        api.send(`bridge/config/reset`, \"\");\n        return Promise.resolve();\n    },\n    exportState(state): Promise<void> {\n        download(state, 'state.json');\n        return Promise.resolve();\n    }\n});\nexport default actions;\n","import React, { ButtonHTMLAttributes, Component } from \"react\";\n\ninterface ButtonProps<T> {\n    item?: T;\n    onClick?(arg1: T): void;\n    promt?: boolean | string;\n}\n\nexport default class Button<T> extends Component<ButtonProps<T> & Omit<ButtonHTMLAttributes<HTMLButtonElement>, 'onClick'>, {}> {\n    onClick = (): void => {\n        const { item, onClick, promt } = this.props;\n        let confirmed = true;\n        if (promt) {\n            confirmed = confirm(typeof promt === \"string\" ? promt : \"Are you sure?\");\n        }\n        confirmed && onClick && onClick(item);\n    };\n\n    render() {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { children, item, promt, ...rest } = this.props;\n        return <button type=\"button\" {...rest} onClick={this.onClick}>{children}</button>;\n    }\n}","import { ZigbeeRelationship } from \"./types\";\n\ninterface LinkType {\n  title: string;\n  relationship: ZigbeeRelationship;\n}\nexport const linkTypes: LinkType[] = [\n  {\n      title: 'IsParent',\n      relationship: ZigbeeRelationship.NeigbhorIsParent\n  },\n  {\n      title: 'IsAChild',\n      relationship: ZigbeeRelationship.NeigbhorIsAChild\n  },\n  {\n      title: 'IsASibling',\n      relationship: ZigbeeRelationship.NeigbhorIsASibling\n  },\n  {\n      title: 'NoneOfTheAbove',\n      relationship: ZigbeeRelationship.NoneOfTheAbove\n  }\n];","import React, { ChangeEvent, Component, createRef, Fragment } from \"react\";\nimport Links from \"./links\";\nimport Nodes from \"./nodes\";\nimport style from \"./map.css\";\nimport { GraphI, LinkI, NodeI, Source, Target, ZigbeeRelationship } from \"./types\";\nimport { connect } from \"unistore/react\";\nimport { GlobalState } from \"../../store\";\nimport actions, { MapApi } from \"../../actions\";\n\nimport Button from \"../button\";\nimport { ForceLink, forceLink, forceCollide, forceCenter, forceSimulation, forceX, forceY } from \"d3-force\";\nimport { select, selectAll, Selection } from \"d3-selection\";\nimport { forceManyBodyReuse } from \"d3-force-reuse\"\nimport { zoom, zoomIdentity, ZoomTransform } from \"d3-zoom\";\nimport { linkTypes } from \"./consts\";\n\nexport interface MouseEventsResponderNode {\n    onMouseOver?: (arg0: NodeI, el: SVGPolygonElement | SVGCircleElement | SVGImageElement) => void;\n    onMouseOut?: (arg0: NodeI, el: SVGPolygonElement | SVGCircleElement | SVGImageElement) => void;\n    onDblClick?: (arg0: NodeI, el: SVGPolygonElement | SVGCircleElement | SVGImageElement) => void;\n}\n\ninterface MapState {\n    selectedNode: NodeI;\n    width: number;\n    height: number;\n    visibleLinks: ZigbeeRelationship[];\n}\nconst angle = (s: Source, t: Target) => Math.atan2(t.y - s.y, t.x - s.x);\nconst xpos = (offset: number, s: Source, t: Target) => offset * Math.cos(angle(s, t)) + s.x;\nconst ypos = (offset: number, s: Source, t: Target) => offset * Math.sin(angle(s, t)) + s.y;\n\nconst distancesMap = {\n    BrokenLink: 450,\n    Router2Router: 300,\n    Coordinator2Router: 400,\n    Coordinator2EndDevice: 100,\n    EndDevice2Router: 100\n};\n\nconst getDistance = (d: LinkI): number => {\n    const distance = distancesMap[d.linkType] ?? 200;\n    const depth = ~~(Math.min(4, d.depth));\n    return 50 * depth + distance;\n};\n\nconst computeLink = (d: LinkI, transform: ZoomTransform, radius: number, width: number, height: number): string => {\n    const src = d.source;\n    const dst = d.target;\n    const x1 = transform.applyX(Math.max(radius, Math.min(width - radius, src.x)));\n    const y1 = transform.applyY(Math.max(radius, Math.min(height - radius, src.y)));\n    const x2 = transform.applyX(Math.max(radius, Math.min(width - radius, dst.x)));\n    const y2 = transform.applyY(Math.max(radius, Math.min(height - radius, dst.y)));\n\n    const dx = x2 - x1, dy = y2 - y1;\n    const dr = Math.sqrt(dx * dx + dy * dy);\n    if (d.repeated) {\n        return `M${x1},${y1} A${dr},${dr} 0 0, 1${x2},${y2}`;\n    }\n    return `M ${x1} ${y1} L ${x2} ${y2}`;\n}\n\ntype SelNode = Selection<SVGElement, NodeI, HTMLElement, unknown>;\ntype SelLink = Selection<SVGElement, LinkI, HTMLElement, unknown>;\n\nconst ticked = (transform: ZoomTransform, node: SelNode, link: SelLink, linkLabel: SelLink, width: number, height: number): void => {\n    const radius = 40;\n    link.attr(\"d\", (d) => computeLink(d, transform, radius, width, height));\n\n    linkLabel\n        .attr('text-anchor', (d) => d.repeated ? 'start' : 'end')\n        .attr('x', (d) => transform.applyX(xpos(d.repeated ? 30 : 60, d.source, d.target)))\n        .attr('y', (d) => transform.applyY(ypos(d.repeated ? 30 : 60, d.source, d.target)))\n\n    const imgXShift = 32 / 2;\n    const imgYShift = 32 / 2;\n    const computeTransform = (d: NodeI) => {\n        const nodeX = Math.max(radius, Math.min(width - radius, transform.applyX(d.x))) - imgXShift;\n        const nodeY = Math.max(radius, Math.min(height - radius, transform.applyY(d.y))) - imgYShift;\n        return `translate(${nodeX}, ${nodeY})`;\n    }\n    node.attr(\"transform\", computeTransform);\n};\n\nconst processHighlights = (networkGraph: GraphI, links: LinkI[], selectedNode: NodeI, node: SelNode, link: SelLink, linkLabel: SelLink,) => {\n    const linkedByIndex = new Set<string>();\n    networkGraph.nodes.forEach(n => linkedByIndex.add(n.ieeeAddr + \",\" + n.ieeeAddr));\n    links.forEach((l) => linkedByIndex.add(l.sourceIeeeAddr + \",\" + l.targetIeeeAddr));\n\n    const neighboring = (a: Source, b: Target): boolean => linkedByIndex.has(a.ieeeAddr + \",\" + b.ieeeAddr)\n    const computeOpacity = (l: LinkI) => (l.source === selectedNode || l.target === selectedNode ? 1 : 0.15);\n    if (selectedNode) {\n        node.style(\"opacity\", (o: NodeI) => neighboring(selectedNode, o) || neighboring(o, selectedNode) ? 1 : 0.15);\n        link.style(\"stroke-opacity\", computeOpacity);\n        linkLabel.style(\"opacity\", computeOpacity);\n    } else {\n        node.style(\"opacity\", 1);\n        link.style(\"stroke-opacity\", 1);\n        linkLabel.style(\"opacity\", 1);\n    }\n}\n\nexport class MapComponent extends Component<GlobalState & MapApi, MapState> {\n    ref = createRef<HTMLDivElement>();\n    svgRef = createRef<SVGSVGElement>();\n    simulation = forceSimulation<NodeI, LinkI>();\n    state: Readonly<MapState> = {\n        selectedNode: null,\n        width: 0,\n        height: 0,\n        visibleLinks: [ZigbeeRelationship.NeigbhorIsAChild]\n    };\n    transform: ZoomTransform = zoomIdentity;\n\n    updateNodes = (): void => {\n        const { networkGraph } = this.props;\n        const { visibleLinks, selectedNode, width, height } = this.state;\n\n        const node = selectAll<SVGElement, NodeI>(`.${style.node}`);\n        const link = selectAll<SVGElement, LinkI>(`.${style.link}`);\n        const linkLabel = selectAll<SVGElement, LinkI>(`.${style.linkLabel}`);\n\n        const links = networkGraph.links.filter(l => visibleLinks.includes(l.relationship));\n        this.simulation.nodes(networkGraph.nodes);\n        this.simulation.force<ForceLink<NodeI, LinkI>>(\"link\").links(links);\n        this.simulation.on(\"tick\", () => ticked(this.transform, node, link, linkLabel, width, height));\n        this.simulation.restart();\n\n\n        //add zoom capabilities\n        const everything = select<SVGGeometryElement, NodeI>('.everything');\n        const zoomHandler = zoom().on(\"zoom\", ({ transform }) => {\n            everything.attr(\"transform\", transform);\n            this.transform = transform;\n            ticked(transform, node, link, linkLabel, width, height);\n        });\n        zoomHandler(select(this.svgRef.current));\n\n        processHighlights(networkGraph, links, selectedNode, node, link, linkLabel);\n        node.on(\"click\", (event, d: NodeI) => {\n            const { selectedNode } = this.state;\n            this.setState({ selectedNode: selectedNode ? null : d });\n        });\n    }\n\n\n    updateForces(width: number, height: number): void {\n        const linkForce = forceLink<NodeI, LinkI>()\n            .id(d => d.ieeeAddr)\n            .distance(getDistance)\n            .strength(0.2);\n\n        const chargeForce = forceManyBodyReuse()\n            .distanceMin(200)\n            .distanceMax(1000)\n            .strength(-200);\n\n        const repelForce = forceManyBodyReuse()\n            .strength(-140)\n            .distanceMax(50)\n            .distanceMin(20);\n\n        const collisionForce = forceCollide(40)\n            .strength(1);\n\n        const centerForce = forceCenter(width / 2, height / 2);\n\n        this.simulation = forceSimulation<NodeI, LinkI>()\n            .force(\"link\", linkForce)\n            .force(\"charge\", chargeForce)\n            .force(\"collisionForce\", collisionForce)\n            .force(\"repelForce\", repelForce)\n            .force(\"center\", centerForce)\n            .force(\"x\", forceX())\n            .force(\"y\", forceY())\n    }\n\n    initPage(): void {\n        const { width, height } = (this.ref.current as HTMLDivElement).getBoundingClientRect();\n        this.setState({ width, height });\n        this.updateForces(width, height);\n    }\n\n    componentDidMount(): void {\n        this.initPage()\n    }\n\n    componentDidUpdate(): void {\n        this.updateNodes();\n    }\n\n    renderMap() {\n        const { width, height, visibleLinks } = this.state;\n        const { networkGraph } = this.props;\n        const links = networkGraph.links.filter(l => visibleLinks.includes(l.relationship));\n        return (\n            <svg ref={this.svgRef} viewBox={`0 0 ${width} ${height}`}>\n                <g className=\"everything\">\n                    <Links links={links} />\n                    <Nodes\n                        nodes={networkGraph.nodes}\n                        simulation={this.simulation}\n                    />\n                </g>\n            </svg >\n        )\n    }\n    onRequestClick = (): void => {\n        const { networkMapRequest } = this.props;\n        networkMapRequest();\n    }\n    renderMessage() {\n        const { networkGraphIsLoading } = this.props;\n        return (\n            <div className=\"h-100 d-flex justify-content-center align-items-center\">\n                {\n                    networkGraphIsLoading ? (\n                        <div>\n                            <div className=\"d-flex align-items-center\">\n                                <strong>Loading, please wait.</strong>\n                                <div className=\"spinner-border ml-2\" role=\"status\">\n                                    <span className=\"sr-only\">Loading...</span>\n                                </div>\n                            </div>\n                            <div>Depending on the size of your network this can take somewhere between 10 seconds and 2 minutes.</div>\n                        </div>\n\n                    ) : <Button onClick={this.onRequestClick} className=\"btn btn-primary d-block\">Load map</Button>\n                }\n            </div>\n        );\n    }\n    onLinkTypeFilterChange = (e: ChangeEvent<HTMLInputElement>): void => {\n        const { visibleLinks: stateVisibleLinks } = this.state;\n        const { checked, value } = e.target;\n        const inValue = parseInt(value, 10);\n        let visibleLinks = [...stateVisibleLinks];\n        if (checked) {\n            visibleLinks.push(inValue);\n        } else {\n            visibleLinks = visibleLinks.filter((v) => v !== inValue);\n        }\n        this.setState({ visibleLinks });\n    }\n    renderMapControls() {\n        const { visibleLinks } = this.state;\n        return <div className={style.controls}>\n            {\n                linkTypes.map(linkType => (\n                    <div key={linkType.title} className=\"form-check form-check-inline\">\n                        <input onChange={this.onLinkTypeFilterChange} className=\"form-check-input\" type=\"checkbox\" id={linkType.title} value={linkType.relationship} checked={visibleLinks.includes(linkType.relationship)} />\n                        <label className=\"form-check-label\" htmlFor={linkType.title}>{linkType.title}</label>\n                    </div>\n                ))\n            }\n            {\n                <div className=\"btn-group btn-group-sm\" role=\"group\">\n                    <Button<void> title=\"Refresh data\" className=\"btn btn-primary\" onClick={this.onRequestClick}><i\n                        className=\"fa fa-sync\" /></Button>\n                </div>\n            }\n        </div>\n    }\n    render() {\n        const { networkGraph } = this.props;\n        return (\n            <div className={style.container} ref={this.ref}>\n                {networkGraph.nodes.length ? <Fragment>{this.renderMapControls()} {this.renderMap()}</Fragment> : this.renderMessage()}\n            </div>\n        );\n    }\n}\n\n\nconst mappedProps = [\"networkGraph\", \"networkGraphIsLoading\"];\nconst ConnectedMap = connect<{}, MapState, GlobalState, {}>(mappedProps, actions)(MapComponent);\nexport default ConnectedMap;\n","import React, { Component, FunctionComponent,  Fragment } from \"react\";\nimport cx from \"classnames\";\n// import * as style from \"./style.css\";\n\n\nexport const ModalHeader: FunctionComponent<{}> = props => {\n    return <div className=\"modal-header\">{props.children}</div>;\n};\n\nexport const ModalBody: FunctionComponent<{}> = props => {\n    return <div className=\"modal-body\">{props.children}</div>;\n};\n\nexport const ModalFooter: FunctionComponent<{}> = props => {\n    return <div className=\"modal-footer\">{props.children}</div>;\n};\ninterface ModalProps {\n    isOpen?: boolean;\n}\ninterface ModalState {\n    modalShow: string;\n    display: string;\n}\n\nclass Modal extends Component<ModalProps, ModalState> {\n    constructor(props: ModalProps) {\n        super(props);\n        this.state = {\n            modalShow: '',\n            display: 'none'\n        };\n        this.openModal = this.openModal.bind(this);\n        this.closeModal = this.closeModal.bind(this);\n    }\n\n    openModal() {\n        this.setState({\n            modalShow: 'show',\n            display: 'block'\n        });\n    }\n\n    closeModal() {\n        this.setState({\n            modalShow: '',\n            display: 'none'\n        });\n    }\n\n    componentDidMount() {\n        this.props.isOpen ? this.openModal() : this.closeModal();\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.isOpen !== this.props.isOpen) {\n            this.props.isOpen ? this.openModal() : this.closeModal();\n        }\n    }\n\n    render() {\n        return (\n            <div\n                className={`modal fade ${ this.state.modalShow}`}\n\n                role=\"dialog\"\n                aria-hidden=\"true\"\n                style={{ display: this.state.display }}\n            >\n                <div className=\"modal-dialog\" role=\"document\">\n                    <div className=\"modal-content\">{this.props.children}</div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Modal;\n\n\n\n// interface Props {\n//     onOk(): void;\n//     onCancel(): void;\n// }\n// const Modal: FunctionComponent<Props> = (props: Props) => {\n//     const { onOk, onCancel } = props;\n//     return (\n//         <Fragment>\n\n//             <button type=\"button\" className=\"btn btn-primary\" data-toggle=\"modal\" data-target=\"#exampleModal\">\n//                 Launch demo modal\n// </button>\n//             <div className=\"modal fade\" id=\"exampleModal\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n//                 <div className=\"modal-dialog\">\n//                     <div className=\"modal-content\">\n//                         <div className=\"modal-header\">\n//                             <h5 className=\"modal-title\" id=\"exampleModalLabel\">Modal title</h5>\n//                             <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n//                                 <span aria-hidden=\"true\">&times;</span>\n//                             </button>\n//                         </div>\n//                         <div className=\"modal-body\">\n//                             ...\n//                         </div>\n//                         <div className=\"modal-footer\">\n//                             <button onClick={onOk} type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n//                             <button onClick={onCancel} type=\"button\" className=\"btn btn-primary\">Ok</button>\n//                         </div>\n//                     </div>\n//                 </div>\n//             </div>\n//         </Fragment>\n//     );\n// };\n\n// export default Modal;\n","import React, { ChangeEvent, Component } from \"react\";\nimport Button from \"../button\";\nimport { Device, DeviceState } from \"../../types\";\nimport { connect } from \"unistore/react\";\nimport actions, { OtaApi, DeviceApi } from \"../../actions\";\nimport cx from \"classnames\";\nimport Modal, { ModalHeader, ModalBody, ModalFooter } from \"../modal\";\nimport { GlobalState } from \"../../store\";\ninterface DeviceControlGroupProps {\n    device: Device;\n    state?: DeviceState;\n}\ninterface DeviceRenameParams {\n    friendlyName: string;\n    isHassRename: boolean;\n}\ninterface DeviceRemovalParams {\n    block: boolean;\n    force: boolean;\n}\n\n\ninterface DeviceControlGroupState {\n    isRenameModalOpened: boolean;\n    isDeviceRemovalModalOpened: boolean;\n    removeParams: DeviceRemovalParams;\n    renameParams: DeviceRenameParams;\n\n}\n\nexport class DeviceControlGroup extends Component<DeviceControlGroupProps & DeviceApi & OtaApi & GlobalState, DeviceControlGroupState> {\n    state = {\n        isRenameModalOpened: false,\n        isDeviceRemovalModalOpened: false,\n        renameParams: {\n            friendlyName: this.props.device.friendly_name,\n            isHassRename: false\n        },\n        removeParams: {\n            block: false,\n            force: false\n        }\n    }\n\n    onRenameClick = async (): Promise<void> => {\n        const { renameDevice, device } = this.props;\n        const { renameParams } = this.state;\n\n        await renameDevice(device.friendly_name, renameParams.friendlyName, renameParams.isHassRename);\n        this.setState({\n            isRenameModalOpened: false\n        });\n    };\n\n\n    onRemoveClick = (): void => {\n        const { removeDevice, device } = this.props;\n        const { removeParams } = this.state;\n        removeDevice(device.friendly_name, removeParams.force, removeParams.block);\n        this.setState({\n            isDeviceRemovalModalOpened: false\n        });\n    };\n\n    toggleRenameModal = (): void => {\n        const { isRenameModalOpened } = this.state;\n        this.setState({ isRenameModalOpened: !isRenameModalOpened });\n    }\n    toggleDeviceRemovalModal = (): void => {\n        const { isDeviceRemovalModalOpened } = this.state;\n        this.setState({ isDeviceRemovalModalOpened: !isDeviceRemovalModalOpened });\n    }\n\n    onHassEntityIdChange = (e: ChangeEvent<HTMLInputElement>): void => {\n        const { renameParams } = this.state;\n        const { checked } = e.target;\n        renameParams.isHassRename = checked;\n        this.setState({ renameParams });\n    }\n    onFriendlyNameChange = (e: ChangeEvent<HTMLInputElement>): void => {\n        const { renameParams } = this.state;\n        const { value } = e.target;\n        renameParams.friendlyName = value;\n        this.setState({ renameParams });\n    }\n\n    onDeviceRemovalParamChange = (e: ChangeEvent<HTMLInputElement>): void => {\n        const { removeParams } = this.state;\n        const { checked, name } = e.target;\n        removeParams[name] = checked;\n        this.setState({ removeParams });\n    }\n    renderRenameButton() {\n        const { bridgeInfo, device } = this.props;\n        const { isRenameModalOpened, renameParams } = this.state;\n        return (\n            <><Button<void> className=\"btn btn-secondary\" onClick={this.toggleRenameModal} title=\"Rename device\"><i className=\"fa fa-edit\" /></Button>\n                <Modal isOpen={isRenameModalOpened}>\n                    <ModalHeader>\n                        <h3>Rename device</h3>\n                        <button type=\"button\" className=\"close\" aria-label=\"Close\" onClick={this.toggleRenameModal}>\n                            <span aria-hidden=\"true\">&times;</span>\n                        </button>\n                    </ModalHeader>\n                    <ModalBody>\n                        <div className=\"mb-3\">\n                            <label htmlFor={`fn${device.ieee_address}`} className=\"form-label\">Friendly name</label>\n                            <input id={`fn${device.ieee_address}`} onChange={this.onFriendlyNameChange} type=\"text\" className=\"form-control\" value={renameParams.friendlyName} />\n                        </div>\n                        {bridgeInfo.config.homeassistant ? (\n                            <div className=\"form-check form-switch\">\n                                <input className=\"form-check-input\" checked={renameParams.isHassRename} type=\"checkbox\" id={`hass${device.ieee_address}`} onChange={this.onHassEntityIdChange} />\n                                <label className=\"form-check-label\" htmlFor={`hass${device.ieee_address}`}>Update Home Assistant entity ID</label>\n                            </div>\n                        ) : null}\n                    </ModalBody>\n                    <ModalFooter>\n                        <button type=\"button\" className=\"btn btn-secondary\" onClick={this.toggleRenameModal}>Close</button>\n                        <button type=\"button\" className=\"btn btn-primary\" onClick={this.onRenameClick}>Save changes</button>\n                    </ModalFooter>\n                </Modal></>\n        )\n    }\n    renderDeviceRemovalButton() {\n        const { device } = this.props;\n        const { isDeviceRemovalModalOpened, removeParams } = this.state;\n        return (\n            <><Modal isOpen={isDeviceRemovalModalOpened}>\n                <ModalHeader>\n                    <h3>Remove device</h3>\n                    <button type=\"button\" className=\"close\" aria-label=\"Close\" onClick={this.toggleDeviceRemovalModal}><span aria-hidden=\"true\">&times;</span></button>\n                </ModalHeader>\n                <ModalBody>\n                    <div className=\"form-check form-switch\">\n                        <input className=\"form-check-input\" name=\"force\" checked={removeParams.force} type=\"checkbox\" id={`force${device.ieee_address}`} onChange={this.onDeviceRemovalParamChange} />\n                        <label className=\"form-check-label\" htmlFor={`force${device.ieee_address}`}>Force remove</label>\n                    </div>\n                    <div className=\"form-check form-switch\">\n                        <input className=\"form-check-input\" name=\"block\" checked={removeParams.block} type=\"checkbox\" id={`block${device.ieee_address}`} onChange={this.onDeviceRemovalParamChange} />\n                        <label className=\"form-check-label\" htmlFor={`block${device.ieee_address}`}>Block from joining again</label>\n                    </div>\n                </ModalBody>\n                <ModalFooter>\n                    <button type=\"button\" className=\"btn btn-secondary\" onClick={this.toggleDeviceRemovalModal}>Close</button>\n                    <button type=\"button\" className=\"btn btn-danger\" onClick={this.onRemoveClick}>Delete</button>\n                </ModalFooter>\n            </Modal>\n                <button onClick={this.toggleDeviceRemovalModal} className=\"btn btn-danger\" title=\"Remove device\"><i className={cx(\"fa\", \"fa-trash\")} /></button></>\n        )\n    }\n    render() {\n        const { device, configureDevice, checkOTA, updateOTA, state } = this.props;\n        return (\n            <div className=\"btn-group btn-group-sm\" role=\"group\">\n                {this.renderRenameButton()}\n                <Button<string> className=\"btn btn-secondary\" onClick={configureDevice} item={device.friendly_name} title=\"Reconfigure\" promt><i className={cx(\"fa\", \"fa-cogs\")} /></Button>\n                {\n                    state?.update?.state === \"available\" ?\n                        <Button<string> className=\"btn btn-secondary\" onClick={updateOTA} item={device.friendly_name} title=\"Update OTA\" promt><i className={cx(\"fa\", \"fa-cloud-download-alt\")} /></Button>\n                        : <Button<string> className=\"btn btn-secondary\" onClick={checkOTA} item={device.friendly_name} title=\"Check OTA\"><i className={cx(\"fa\", \"fa-cloud\")} /></Button>\n                }\n                {this.renderDeviceRemovalButton()}\n\n\n            </div>\n        );\n    }\n}\n\nconst mappedProps = [\"bridgeInfo\"];\nconst ConnectedDeviceControlGroup = connect<DeviceControlGroupProps, {}, GlobalState, DeviceApi & OtaApi>(mappedProps, actions)(DeviceControlGroup);\nexport default ConnectedDeviceControlGroup;\n\n","// extracted by mini-css-extract-plugin\nexport default {\"device-pic\":\"_2UWt6cv5iKbBWQ1njU-Knh\"};","// extracted by mini-css-extract-plugin\nexport default {\"plug\":\"_2Qj8QVth6tVVFe6VESug0N\",\"blinking\":\"t22iUK3r3w1jlcSwxWXN9\",\"blinker\":\"_3SpBv5_CMt6ERjs-mp41bf\"};","import  React, { FunctionComponent} from \"react\";\nimport { PowerSource as PowerSourceType } from \"../../types\";\nimport style from \"./style.css\";\n\n\ninterface PowerSourceProps {\n    source: PowerSourceType;\n    battery?: number;\n}\n\n\nconst PowerSource: FunctionComponent<PowerSourceProps> = ({ source, battery, ...rest }) => {\n    let batteryClass = \"\";\n\n    switch (source) {\n        case \"Battery\":\n            if (battery >= 85) {\n                batteryClass = \"fa-battery-full\";\n            } else if (battery >= 75) {\n                batteryClass = \"fa-battery-three-quarters\";\n            } else if (battery >= 50) {\n                batteryClass = \"fa-battery-half\";\n            } else if (battery >= 25) {\n                batteryClass = \"fa-battery-quarter\";\n            } else if (battery >= 10) {\n                batteryClass = `fa-battery-empty ${style.blinking}`\n            } else {\n                return <span className={`${style.blinking} text-danger`} role=\"alert\">{battery}%</span>\n            }\n            return <i className={`fa ${batteryClass}`}\n                title={`${source} ${battery ? `, power level ${battery}%` : \"\"} `} {...rest} />;\n\n        case \"Mains (single phase)\":\n        case \"DC Source\":\n            return <i className={`fa fa-plug ${style.plug}`} title={source} {...rest} />;\n        default:\n            return <i className={`fa fa-question`} title={source} {...rest} />;\n    }\n};\n\nexport default PowerSource;\n","/* eslint-disable react/display-name */\nimport React, { Component, Fragment } from \"react\";\nimport { Device, DeviceState } from \"../../types\";\nimport { toHex, toHHMMSS } from \"../../utils\";\nimport DeviceControlGroup from \"../device-control\";\nimport cx from \"classnames\";\nimport style from \"./style.css\";\nimport { connect } from \"unistore/react\";\nimport { GlobalState } from \"../../store\";\nimport PowerSourceComp from \"../power-source\";\nimport get from 'lodash/get';\nimport DeviceImage from \"../device-image\";\n\n\ntype DeviceInfoProps = {\n    device: Device;\n}\ninterface PropsFromStore {\n    deviceStates: Map<string, DeviceState>;\n}\n\nconst displayProps = [\n    {\n        key: 'definition.description',\n        label: 'Description',\n        if: 'supported'\n    },\n    {\n        render: (device: Device) => <dd className=\"col-7\" ><p className={cx('mb-0', 'font-weight-bold', { 'text-danger': !device.supported, 'text-success': device.supported })}>{device.supported ? 'Supported' : 'Unsupported'}</p></dd>,\n        label: 'Support status'\n    },\n    {\n        render: (device: Device) => <dd className=\"col-7\">{device.definition.supports}</dd>,\n        label: 'Supports',\n        if: 'definition.supports'\n    },\n    {\n        key: 'ieee_address',\n        label: 'IEEE address'\n    },\n    {\n        key: 'network_address',\n        label: 'Network address',\n        render: (device: Device) => <dd className=\"col-7\">{toHex(device.network_address)}</dd>,\n    },\n    {\n        key: 'date_code',\n        label: 'Firmware build date',\n        if: 'date_code'\n    },\n    {\n        key: 'software_build_id',\n        label: 'Firmware version',\n        if: 'software_build_id'\n    },\n\n    {\n        key: 'definition.vendor',\n        label: 'Vendor',\n        if: 'supported'\n    },\n    {\n        key: 'definition.model',\n        label: 'Model',\n        if: 'supported'\n    },\n\n    {\n        label: 'Power source',\n        render: (device: Device) => <dd className=\"col-7\"><PowerSourceComp source={device.power_source} /></dd>\n    },\n    {\n        label: 'Interview completed',\n        render: (device: Device) => <dd className=\"col-7\">{device.interview_completed ? 'Yes' : 'No'}</dd>\n    }\n];\n// eslint-disable-next-line react/prefer-stateless-function\nexport class DeviceInfo extends Component<DeviceInfoProps & PropsFromStore, {}> {\n    render() {\n        const { device, deviceStates } = this.props;\n        const deviceStatus: DeviceState = deviceStates.get(device.friendly_name);\n\n        return (\n            <div className=\"card\">\n                <div className=\"d-flex justify-content-center\">\n                    <DeviceImage className={`card-img-top w-auto ${style[\"device-pic\"]}`} device={device} deviceStatus={deviceStatus} />\n                </div>\n\n                <div className=\"card-body\">\n                    <h5 className=\"card-title\">{device.type}</h5>\n\n                    <dl className=\"row\">\n                        {\n                            displayProps.filter(prop => get(device, prop.if, false)).map(prop => (\n                                <Fragment key={prop.label}>\n                                    <dt className=\"col-5\">{prop.label}</dt>\n                                    {prop.render ?\n                                        prop.render(device) : <dd className=\"col-7\">{get(device, prop.key)}</dd>}\n\n                                </Fragment>\n                            ))\n                        }\n                        {\n                            deviceStatus?.update?.state === \"updating\" ? (\n                                <Fragment>\n                                    <dt className=\"col-5\">Updating firmware</dt>\n                                    <dd className=\"col-7\">\n                                        <div className=\"progress\">\n                                            <div className=\"progress-bar progress-bar-striped progress-bar-animated\" style={{ width: `${deviceStatus.update.progress}%` }}>\n                                                {deviceStatus.update.progress}%\n                                        </div>\n                                        </div>\n                                        <div>Remaining time {toHHMMSS(deviceStatus.update.remaining)}</div>\n                                    </dd>\n                                </Fragment>\n                            ) : null\n                        }\n                    </dl>\n                </div>\n                <div className=\"card-footer\">\n                    <DeviceControlGroup device={device} state={deviceStatus} />\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mappedProps = [\"deviceStates\"];\n\nconst ConnectedDeviceInfoPage = connect<DeviceInfoProps, {}, GlobalState, PropsFromStore>(mappedProps)(DeviceInfo);\nexport default ConnectedDeviceInfoPage;","import React, { ChangeEvent, Component, SelectHTMLAttributes } from \"react\";\nimport { Device, ObjectType } from \"../../types\";\nimport { getDeviceDisplayName } from \"../../utils\";\nimport { Group } from \"../../store\";\nconst DELIMITER = '|';\ninterface DevicePickerProps {\n    type: ObjectType;\n    value: string | number;\n    devices: Map<string, Device>;\n    groups?: Group[];\n    onChange(device: Device | Group, type: ObjectType): void;\n}\nexport default class DevicePicker extends Component<DevicePickerProps & Omit<SelectHTMLAttributes<HTMLSelectElement>, 'onChange'>, {}> {\n    onSelect = (e: ChangeEvent<HTMLSelectElement>): void => {\n        const { onChange, devices, groups = [] } = this.props;\n        const { value } = e.target as HTMLSelectElement;\n\n        if (devices.has(value)) {\n            onChange(devices.get(value), \"device\");\n        } else {\n            const group = groups.find(g => parseInt(value, 10) === g.id);\n            onChange(group, \"group\");\n        }\n    }\n    render() {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { devices, groups, value, type, onChange, ...rest } = this.props;\n        let options = [<option key=\"hidden\" hidden>Select device</option>];\n\n        const devicesOptions = [];\n        devices.forEach((device) => {\n            devicesOptions.push(<option\n                title={device.definition?.description}\n                key={device.ieee_address}\n                value={device.ieee_address}\n            >{getDeviceDisplayName(device)}</option>);\n        });\n        if (groups && groups.length) {\n            const groupOptions = groups.map(group => <option\n                key={group.friendly_name}\n                value={group.id}>{group.friendly_name}\n            </option>);\n            options.push(<optgroup key=\"Groups\" label=\"Groups\">{groupOptions}</optgroup>);\n            options.push(<optgroup key=\"Devices\" label=\"Devices\">{devicesOptions}</optgroup>);\n        } else {\n            options = options.concat(devicesOptions);\n        }\n        return <select\n            value={value}\n            onChange={this.onSelect}\n            className=\"form-control\"\n            {...rest}\n        >{options}\n\n        </select>;\n\n    }\n}","import React, { ChangeEvent, Component, SelectHTMLAttributes } from \"react\";\nimport { Endpoint } from \"../../types\";\n\n\n\ninterface EndpointPickerProps {\n    onChange(endpoint: Endpoint): void;\n    value: Endpoint;\n    values: Endpoint[];\n}\n\nexport default class EndpointPicker extends Component<EndpointPickerProps & Omit<SelectHTMLAttributes<HTMLSelectElement>, 'onChange'>, {}> {\n    onSelect = (e: ChangeEvent<HTMLSelectElement>): void => {\n        const { onChange } = this.props;\n        const { value } = e.target as HTMLSelectElement;\n        onChange(value);\n    }\n    render() {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { onSelect, value, values, disabled, onChange, ...rest } = this.props;\n        const hasOnlyOneEP = values.length == 1;\n\n        const options = values.map(ep => <option key={ep} value={ep}>{ep}</option>)\n        options.unshift(<option key=\"hidded\" hidden>Select endpoint</option>);\n        return <select disabled={value && hasOnlyOneEP || disabled}\n            value={value}\n            className=\"form-control\"\n            title={hasOnlyOneEP ? 'The only endpoint' : null}\n            onChange={this.onSelect}\n            {...rest}>\n            {options}\n        </select>;\n\n    }\n}","import React, { ChangeEvent, Component, InputHTMLAttributes } from \"react\";\nimport { Cluster } from \"../../types\";\nimport { randomString } from \"../../utils\";\n\n\n\nconst clusterDescriptions = {\n    genScenes: \"Scenes\",\n    genOnOff: \"OnOff\",\n    genLevelCtrl: \"LevelCtrl\",\n    lightingColorCtrl: \"LColorCtrl\",\n    closuresWindowCovering: \"Closures\",\n}\ninterface ClusterPickerProps {\n    value: Cluster[];\n    onChange(arg1: Cluster[] | undefined): void;\n    clusters: Cluster[];\n\n}\ninterface ClusterPickerState {\n    pickerId: string;\n}\n\n// eslint-disable-next-line react/prefer-stateless-function\nexport default class ClusterPicker extends Component<ClusterPickerProps & Omit<InputHTMLAttributes<HTMLInputElement>, 'onChange'>, ClusterPickerState> {\n    public static defaultProps = {\n        clusters: []\n    };\n    state: Readonly<ClusterPickerState> = {\n        pickerId: randomString(5)\n    }\n\n    onChange = (e: ChangeEvent<HTMLInputElement>): void => {\n        const { onChange } = this.props;\n        let { value } = this.props;\n        const { checked: isChecked, name } = e.target;\n        if (isChecked) {\n            value.push(name);\n        } else {\n            value = value.filter(v => v !== name);\n        }\n\n        onChange(value);\n    }\n    render() {\n        const { pickerId } = this.state;\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { clusters, value, onChange, ...rest } = this.props;\n\n        const options = clusters.map(cluster => (\n            <div key={cluster} className=\"form-check form-check-inline\">\n                <input className=\"form-check-input\"\n                    type=\"checkbox\"\n                    checked={value.includes(cluster)}\n                    name={cluster}\n                    id={`${pickerId}_${cluster}`}\n                    value={cluster}\n                    onChange={this.onChange}\n                    {...rest}\n                />\n                <label className=\"form-check-label\" htmlFor={`${pickerId}_${cluster}`} title={cluster}>{clusterDescriptions[cluster] ?? cluster}</label>\n            </div>\n        ));\n        return options;\n    }\n}","import React, { Component } from \"react\";\nimport { Device, Endpoint, Cluster, ObjectType } from \"../../types\";\nimport DevicePicker from \"../device-picker\";\nimport EndpointPicker from \"../endpoint-picker\";\nimport ClusterPicker from \"../cluster-picker\";\nimport Button from \"../button\";\nimport { Group } from \"../../store\";\nimport { NiceBindingRule } from \"./bind\";\n\n\n\n\ninterface BindRowProps {\n    rule: NiceBindingRule;\n    idx: number;\n    devices: Map<string, Device>;\n    groups: Group[];\n    device: Device;\n    onBind(from: string, to: string, clusters: Cluster[]): void;\n    onUnBind(from: string, to: string, clusters: Cluster[]): void;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\ninterface BindRowState {\n    stateRule: NiceBindingRule;\n}\n\nexport const getEndpoints = (obj: Device | Group): Endpoint[] => {\n    if (!obj) {\n        return []\n    } else if ((obj as Device).endpoints) {\n        return Array.from((obj as Device).endpoints.keys());\n    } else if ((obj as Group).members) {\n        return (obj as Group).members.map(g => g.endpoint);\n    }\n    return [];\n}\nconst getTarget = (rule: NiceBindingRule, devices: Map<string, Device>, groups: Group[]) => {\n    if (rule.target.type === \"group\") {\n        return groups.find(g => g.id === rule.target.id);\n    }\n    return devices.get(rule.target.ieee_address);\n}\n\nexport default class BindRow extends Component<BindRowProps, BindRowState> {\n    state: Readonly<BindRowState> = {\n        stateRule: null\n    }\n    static getDerivedStateFromProps(props: Readonly<BindRowProps>, state: BindRowState): Partial<BindRowState> {\n        const { rule } = props;\n        return {\n            stateRule: rule\n        };\n    }\n    setSourceEp = (sourceEp: Endpoint): void => {\n        const { stateRule } = this.state;\n        stateRule.source.endpoint = sourceEp;\n        this.setState({ stateRule });\n    }\n\n    setDestination = (destination: Device | Group, type: ObjectType): void => {\n        const { stateRule } = this.state;\n        if (type === \"device\") {\n            const endpoints = getEndpoints(destination);\n\n            stateRule.target['ieee_address'] = (destination as Device)['ieee_address'];\n            stateRule.target.type = \"endpoint\";\n            stateRule.target.endpoint = endpoints[0];\n            delete stateRule.target.id;\n        } else if (type === \"group\") {\n            stateRule.target.id = (destination as Group).id;\n            stateRule.target.type = \"group\";\n            delete stateRule.target.ieee_address;\n        }\n        stateRule.clusters = [];\n\n        this.setState({ stateRule });\n    }\n\n    setDestinationEp = (destinationEp: Endpoint): void => {\n\n        const { stateRule } = this.state;\n        stateRule.target.endpoint = destinationEp;\n        stateRule.clusters = [];\n        this.setState({ stateRule });\n    }\n\n    setClusters = (clusters: Cluster[]): void => {\n        const { stateRule } = this.state;\n        stateRule.clusters = clusters;\n        this.setState({ stateRule });\n    }\n\n    getBidningParams(): { from: string; to: string; clusters: string[] } {\n        const { device, groups, devices } = this.props;\n        const { stateRule } = this.state;\n        const from = `${device.friendly_name}/${stateRule.source.endpoint}`;\n        let to: string;\n        if (stateRule.target.type === \"group\") {\n            const targetGroup = groups.find(group => group.id === stateRule.target.id);\n            to = `${targetGroup.friendly_name}`;\n        } else if (stateRule.target.type === \"endpoint\") {\n            const targeDevice = devices.get(stateRule.target.ieee_address);\n            if (targeDevice.type === \"Coordinator\") {\n                to = `${targeDevice.friendly_name}`;\n            } else {\n                to = `${targeDevice.friendly_name}/${stateRule.target.endpoint}`;\n            }\n        }\n        return { from, to, clusters: stateRule.clusters };\n    }\n\n    onBindClick = (): void => {\n        const { onBind } = this.props;\n        const { from, to, clusters } = this.getBidningParams();\n        onBind(from, to, clusters);\n    }\n\n    onUnBindClick = (): void => {\n        const { onUnBind } = this.props;\n        const { from, to, clusters } = this.getBidningParams();\n        onUnBind(from, to, clusters);\n\n    }\n\n    isValidRule(): boolean {\n        const { stateRule } = this.state;\n        let valid = false;\n        if (stateRule.target.type == \"endpoint\") {\n            valid = stateRule.source.endpoint\n                && stateRule.target.ieee_address\n                && stateRule.target.endpoint\n                && stateRule.clusters.length > 0;\n        } else if (stateRule.target.type == \"group\") {\n            valid = stateRule.source.endpoint\n                && stateRule.target.id\n                && stateRule.clusters.length > 0;\n        }\n        return valid;\n    }\n\n    render() {\n        const { devices, groups, idx, device } = this.props;\n        const { stateRule } = this.state;\n\n        const targetType: ObjectType = stateRule.target.type === \"endpoint\" ? \"device\" : \"group\";\n\n        const sourceEndpoints = getEndpoints(device);\n        const target = getTarget(stateRule, devices, groups);\n        const destinationEndpoints = getEndpoints(target);\n\n        const possibleClusters: Set<Cluster> = new Set(stateRule.clusters);\n        if (device.endpoints.has(stateRule.source.endpoint)) {\n            device.endpoints.get(stateRule.source.endpoint).clusters.output.forEach(cluster => possibleClusters.add(cluster));\n        }\n        return (\n            <tr>\n                <th scope=\"row\">{idx + 1}</th>\n                <td><EndpointPicker disabled={!stateRule.isNew} values={sourceEndpoints} value={stateRule.source.endpoint} onChange={this.setSourceEp} /></td>\n                <td><DevicePicker disabled={!stateRule.isNew} type={targetType} value={stateRule.target.ieee_address || stateRule.target.id} devices={devices} groups={groups} onChange={this.setDestination} /></td>\n                <td>{stateRule.target.type === \"endpoint\" ? <EndpointPicker disabled={!stateRule.isNew} values={destinationEndpoints} value={stateRule.target.endpoint} onChange={this.setDestinationEp} /> : null}</td>\n                <td><ClusterPicker clusters={Array.from(possibleClusters)} value={stateRule.clusters} onChange={this.setClusters} /></td>\n                <td>\n                    <div className=\"btn-group btn-group-sm\">\n                        <Button<void> disabled={!this.isValidRule()} title=\"Bind\" className=\"btn btn-primary\" onClick={this.onBindClick}><i\n                            className=\"fa fa-heart\" /></Button>\n                        <Button<void> disabled={!stateRule.isNew && !this.isValidRule()} title=\"Unbind\" className=\"btn btn-secondary\" onClick={this.onUnBindClick}><i\n                            className=\"fa fa-heart-broken\" /></Button>\n                    </div>\n                </td>\n            </tr>\n        );\n    }\n}","import React, { Component } from \"react\";\nimport { Device, Cluster, Endpoint } from \"../../types\";\nimport BindRow, { getEndpoints } from \"./bind-row\";\nimport actions, { BindApi } from \"../../actions\";\nimport { connect } from \"unistore/react\";\nimport { GlobalState, Group } from \"../../store\";\n\n\ninterface PropsFromStore {\n    devices: Map<string, Device>;\n    groups: Group[];\n}\ninterface BindProps {\n    device: Device;\n}\n\nexport interface NiceBindingRule {\n    id?: number;\n    isNew?: number;\n    source: {\n        ieee_address: string;\n        endpoint: Endpoint;\n    };\n    target: {\n        id?: number;\n        endpoint?: Endpoint;\n        ieee_address?: string;\n        type: \"endpoint\" | \"group\";\n    };\n    clusters: Cluster[];\n}\nconst rule2key = (rule: NiceBindingRule): string => `${rule.isNew}${rule.source.ieee_address}-${rule.target.id}-${rule.target.ieee_address}-${rule.clusters.join('-')}`;\nconst convertBidningsIntoNiceStructure = (device: Device): NiceBindingRule[] => {\n    const bindings = {};\n    device.endpoints.forEach((description, endpoint) => {\n        description.bindings\n            .forEach(b => {\n                const targetId = b.target.id ?? b.target.ieee_address;\n                if (bindings[targetId]) {\n                    bindings[targetId].clusters.push(b.cluster);\n                } else {\n                    bindings[targetId] = {\n                        source: {\n                            // eslint-disable-next-line @typescript-eslint/camelcase\n                            ieee_address: device.ieee_address,\n                            endpoint\n                        },\n                        target: b.target,\n                        clusters: [b.cluster]\n                    }\n                }\n            });\n    });\n    return Object.values(bindings);\n}\ntype BindState = {\n    bidingRules: NiceBindingRule[];\n}\nexport class Bind extends Component<BindProps & PropsFromStore & BindApi, BindState> {\n    state: BindState = {\n        bidingRules: []\n    }\n    onBindClick = (from: string, to: string, clusters: Cluster[]): void => {\n        const { addBind } = this.props;\n        addBind(from, to, clusters);\n    };\n    onUnBindClick = (from: string, to: string, clusters: Cluster[]): void => {\n        const { removeBind } = this.props;\n        removeBind(from, to, clusters);\n    };\n    static getDerivedStateFromProps(props: Readonly<BindProps & PropsFromStore>, state: BindState): Partial<BindState> {\n        const { device } = props;\n        const endpoints = getEndpoints(device);\n        const bidingRules = convertBidningsIntoNiceStructure(device);\n\n        bidingRules.push({ isNew: Date.now(), target: {}, source: {'ieee_address': device.ieee_address, endpoint: endpoints[0]}, clusters: [] } as NiceBindingRule);\n        return {\n            bidingRules\n        };\n    }\n    render() {\n        const { device, devices, groups } = this.props;\n        const { bidingRules } = this.state;\n        return (\n            <div className=\"card table-responsive\">\n                <table className=\"table\">\n                    <thead>\n                        <tr>\n                            <th scope=\"col\">#</th>\n                            <th scope=\"col\">Source EP</th>\n                            <th scope=\"col\">Destination</th>\n                            <th scope=\"col\">Destination EP</th>\n                            <th scope=\"col\">Clusters</th>\n                            <th scope=\"col\">Actions</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {\n                            bidingRules.map((rule, idx) => <BindRow\n                                key={rule2key(rule)}\n                                rule={rule}\n                                groups={groups}\n                                onUnBind={this.onUnBindClick}\n                                onBind={this.onBindClick}\n                                device={device}\n                                idx={idx}\n                                devices={devices} />)\n                        }\n                    </tbody>\n\n                </table>\n            </div>\n        );\n    }\n}\n\nconst mappedProps = [\"devices\", \"groups\"];\nconst ConnectedBindPage = connect<BindProps, {}, GlobalState, PropsFromStore & BindApi>(mappedProps, actions)(Bind);\nexport default ConnectedBindPage","import React, { FunctionComponent } from \"react\";\nimport Button from \"../button\";\n\ntype Primitive = number | string;\n\nexport type ValueWithLabelOrPrimitive = {\n  value: number;\n  title: string;\n} | Primitive;\n\ntype EnumProps = {\n  onChange(value: unknown): void;\n  values: ValueWithLabelOrPrimitive[];\n}\n\n\nfunction isPrimitive(step: ValueWithLabelOrPrimitive): step is Primitive {\n  return [\"number\", \"string\"].includes(typeof step);\n}\n\nconst EnumEditor: FunctionComponent<EnumProps> = (props) => {\n  const { onChange, values } = props;\n  return <div className=\"btn-group mr-2\">\n    {\n      values.map(v => <Button<ValueWithLabelOrPrimitive>\n        className=\"btn btn-outline-secondary\"\n        onClick={item => onChange(item)}\n        key={isPrimitive(v) ? v : v.title}\n        item={isPrimitive(v) ? v : v.value}\n      >{isPrimitive(v) ? v : v.title}</Button>)\n    }\n  </div>;\n}\nexport default EnumEditor;","import React, { FunctionComponent, InputHTMLAttributes, useEffect, useState } from \"react\";\n\nimport EnumEditor, { ValueWithLabelOrPrimitive } from \"../enum-editor/enum-editor\";\n\n\n\ntype RangeProps = {\n  value: number;\n  onChange(value: object | number): void;\n  steps?: ValueWithLabelOrPrimitive[];\n}\n\nconst RangeEditor: FunctionComponent<RangeProps & Omit<InputHTMLAttributes<HTMLInputElement>, 'onChange'>> = (props) => {\n  const { onChange, value, min, max, steps, ...rest } = props;\n  const [currentValue, setCurrentValue] = useState<number>(value)\n\n  useEffect(() => {\n    setCurrentValue(value)\n  }, [value]);\n  return <div className=\"input-group\">\n    {steps ? <EnumEditor values={steps} onChange={onChange} /> : null}\n    {min !== undefined && max !== undefined ? <input\n      min={min}\n      max={max}\n      type=\"range\"\n      className=\"form-range form-control border-0\"\n      value={currentValue}\n      onChange={e => setCurrentValue(e.target.valueAsNumber)}\n      onMouseUp={(() => onChange(currentValue))}\n      {...rest}\n    /> :\n      <input\n        type=\"number\"\n        className=\"form-control\"\n        value={currentValue}\n        onChange={e => setCurrentValue(e.target.valueAsNumber)}\n        {...rest}\n      />\n    }\n  </div>\n}\n\nexport default RangeEditor;\n","import React, { useState, ChangeEvent, InputHTMLAttributes, useEffect } from \"react\";\n\nimport Button from \"../button\";\nimport RangeEditor from \"../range-editor/range-editor\";\n\ninterface UniversalEditorProps {\n    values?: unknown[];\n    onChange(arg1: unknown): void;\n}\n\nconst togglePairs = new Map<string | boolean, string | boolean>([\n    ['ON', 'OFF'],\n    ['OFF', 'ON'],\n    ['OPEN', 'CLOSE'],\n    ['CLOSE', 'OPEN'],\n    ['LOCK', 'UNLOCK'],\n    ['UNLOCK', 'LOCK'],\n    [true, false],\n    [false, true]\n]);\n\nconst BluringInput: React.FunctionComponent<React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>> = (props) => {\n    const { onChange, value, ...rest } = props;\n    const [internalValue, setInternalValue] = useState(value);\n    useEffect(() => {\n        setInternalValue(value);\n    }, [value]);\n\n\n    return <input\n        value={internalValue}\n        onBlur={() => onChange({ target: { value: internalValue } } as ChangeEvent<HTMLInputElement>)}\n        onChange={e => setInternalValue(e.target.value)}\n        {...rest} />\n}\n\nconst UniversalEditor: React.FunctionComponent<InputHTMLAttributes<unknown> & UniversalEditorProps> = (props) => {\n    const { value, values, onChange, disabled, name, ...rest } = props;\n\n    const isToggleParameter = togglePairs.has(value as string | boolean);\n\n\n    if (values) {\n        return (<select className=\"form-select\"\n            disabled={disabled}\n            value={value as string}\n            onChange={e => onChange(e.target.value)}>\n            {values.map(val => <option key={val as string} value={val as string}>{val as string}</option>)}\n        </select>)\n    }\n    switch (typeof value) {\n        case \"boolean\":\n            return (\n                <div className=\"form-check form-switch\">\n                    <input type=\"checkbox\" className=\"form-check-input\"\n                        disabled={disabled}\n                        checked={value as boolean}\n                        onChange={e => onChange(e.target.checked)}\n                        {...rest} />\n                </div>\n            );\n        case \"number\":\n            return (<div className=\"row\">\n                <div className=\"col-9\">\n                    <RangeEditor disabled={disabled} value={value} onChange={v => onChange(v)} {...rest} />\n                </div>\n                <div className=\"col-3\">\n                    <input type=\"number\" step=\"any\" className=\"form-control col-2\"\n                        disabled={disabled}\n                        value={value as number}\n                        onChange={e => onChange(e.target.valueAsNumber)}\n                        {...rest} />\n                </div>\n\n\n            </div >);\n        default:\n            if (isToggleParameter) {\n                return (\n                    <div className=\"row\">\n                        <div className=\"col-3\">\n                            <Button<string | boolean> title=\"Toggle\" value=\"Toggle\"\n                                className=\"btn btn-primary\"\n                                disabled={disabled}\n                                item={togglePairs.get(value as string | boolean)}\n                                onClick={payload => onChange(payload)}>\n                                <i className=\"fa fa-exchange-alt\" />\n                            </Button>\n                        </div>\n                        <div className=\"col-9\">\n                            <BluringInput type=\"text\" className=\"form-control\"\n                                disabled={disabled}\n                                value={value as string}\n                                onChange={e => onChange(e.target.value)}\n                                {...rest}\n                            />\n                        </div>\n                    </div>\n                );\n            }\n            return (<BluringInput type=\"text\" className=\"form-control\"\n                disabled={disabled}\n                value={value as string}\n                onChange={e => onChange(e.target.value)}\n                {...rest} />);\n\n\n    }\n};\nexport default UniversalEditor;","import React, { Component } from \"react\";\nimport { Device, DeviceState } from \"../../types\";\nimport style from \"./style.css\";\nimport UniversalEditor from \"../universal-editor\";\nimport actions, { StateApi } from \"../../actions\";\nimport isObject from \"lodash/isObject\";\nimport { connect } from \"unistore/react\";\nimport { GlobalState } from \"../../store\";\n\ninterface PropsFromStore {\n    deviceStates: Map<string, DeviceState>;\n\n}\ninterface StatesProps {\n    device: Device;\n}\ntype DeviceParamTuple = [string, unknown];\nconst fieldProps = {\n    brightness: {\n        min: 0,\n        max: 255\n    },\n    color_temp: {\n        min: 0,\n        max: 512\n    }\n}\n\nconst readonlyFields = [\n    \"battery\",\n    \"last_seen\",\n    \"linkquality\",\n    \"voltage\",\n    \"elapsed\",\n    \"contact\",\n    \"action\",\n    \"click\",\n    \"update\",\n    \"update_available\",\n    \"power\"\n];\n\nclass States extends Component<StatesProps & PropsFromStore & StateApi, {}> {\n    setStateValue = (name: string, value: unknown): void => {\n        const { setStateValue, device } = this.props;\n        setStateValue(device.friendly_name, name, value);\n    };\n\n    render() {\n        const { device, deviceStates } = this.props;\n        const deviceState = deviceStates.get(device.friendly_name) ?? {};\n\n        const kv = Object.entries(deviceState).filter(kvp => !isObject(kvp[1]))\n        return (\n            <div className=\"card\">\n                <table className=\"table table-borderless align-middle\">\n                    <tbody>\n                        {kv.map((param: DeviceParamTuple) => (\n                            <tr key={param[0]} className={style[\"props-row\"]}>\n                                <th scope=\"row\">{param[0]}</th>\n                                <td className={style[\"value-col\"]}>\n                                    <UniversalEditor\n                                        disabled={readonlyFields.includes(param[0])}\n                                        value={param[1]}\n                                        name={param[0]}\n                                        onChange={(value: unknown) => this.setStateValue(param[0], value)}\n                                        {...fieldProps[param[0]]}\n                                    />\n                                </td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n            </div>\n        );\n\n    }\n}\n\nconst mappedProps = [\"deviceStates\"];\n\nconst ConnectedDeviceStates = connect<StatesProps, {}, GlobalState, StateApi>(mappedProps, actions)(States);\nexport default ConnectedDeviceStates;\n","\nimport { GenericExposedFeature, BinaryFeature, NumericFeature, EnumFeature, LightFeature, CompositeFeature, SwitchFeature, CoverFeature, LockFeature, ColorFeature, TextualFeature } from \"../../types\";\n\nexport function isBinaryFeature(feature: GenericExposedFeature | CompositeFeature): feature is BinaryFeature {\n  return feature.type === \"binary\";\n}\n\nexport function isNumericFeature(feature: GenericExposedFeature | CompositeFeature): feature is NumericFeature {\n  return feature.type === \"numeric\";\n}\nexport function isTextualFeature(feature: GenericExposedFeature | CompositeFeature): feature is TextualFeature {\n  return feature.type === \"text\";\n}\n\nexport function isEnumFeature(feature: GenericExposedFeature | CompositeFeature): feature is EnumFeature {\n  return feature.type === \"enum\";\n}\n\nexport function isLightFeature(feature: GenericExposedFeature | CompositeFeature): feature is LightFeature {\n  return feature.type === \"light\";\n}\nexport function isSwitchFeature(feature: GenericExposedFeature | CompositeFeature): feature is SwitchFeature {\n  return feature.type === \"switch\";\n}\n\nexport function isCoverFeature(feature: GenericExposedFeature | CompositeFeature): feature is CoverFeature {\n  return feature.type === \"cover\";\n}\n\nexport function isLockFeature(feature: GenericExposedFeature | CompositeFeature): feature is LockFeature {\n  return feature.type === \"lock\";\n}\n\nexport function isCompositeFeature(feature: GenericExposedFeature | CompositeFeature): feature is CompositeFeature {\n  return feature.type === \"composite\";\n}\n\nexport function isColorFeature(feature: GenericExposedFeature | CompositeFeature): feature is ColorFeature {\n  return isCompositeFeature(feature) && (feature.name == \"color_xy\" || feature.name == \"color_hs\");\n}","import React, { Component, Fragment } from \"react\";\nimport { NumericFeature } from \"../../../types\";\nimport { ValueWithLabelOrPrimitive } from \"../../enum-editor/enum-editor\";\nimport RangeEditor from \"../../range-editor/range-editor\";\nimport { BaseFeatureProps } from \"../base\";\n\ninterface NumericProps extends BaseFeatureProps<NumericFeature> {\n  steps?: ValueWithLabelOrPrimitive[];\n}\nexport default class Numeric extends Component<NumericProps> {\n\n  renderEditor() {\n    const { feature: { endpoint, name, property, value_max: valueMax, value_min: valueMin }, deviceState, steps, onChange } = this.props;\n    return <RangeEditor\n      onChange={(value) => onChange(endpoint, { [name]: value })}\n      value={deviceState[property] as number ?? 0}\n      min={valueMin}\n      max={valueMax}\n      steps={steps}\n    />\n  }\n  renderView() {\n    const { feature: { property, unit }, deviceState } = this.props;\n    return <Fragment><strong>{deviceState[property] ?? \"N/A\"}</strong> {unit ? <small className=\"text-muted ml-1\">{unit}</small> : null}</Fragment>\n  }\n  render() {\n    const { feature: { access } } = this.props;\n    switch (access) {\n      case \"r\":\n        return this.renderView();\n      default:\n        return this.renderEditor();\n    }\n  }\n}","import React, { ChangeEvent, Fragment, FunctionComponent, useState } from \"react\";\nimport { randomString } from \"../../utils\";\nimport Button from \"../button\";\n\ntype ToggleProps = {\n  onChange(value: unknown): void;\n\n  value: unknown;\n  valueOn: unknown;\n  valueOff: unknown;\n  label?: string;\n}\n\n\nconst Toggle: FunctionComponent<ToggleProps> = (props) => {\n  const { onChange, value, label, valueOn, valueOff } = props;\n  const [id, setId] = useState<string>(randomString(5));\n  const onCheckboxChange = (e: ChangeEvent<HTMLInputElement>) => onChange(e.target.checked ? valueOn : valueOff);\n  return (\n    <Fragment>\n      <Button<unknown> className=\"btn btn-link pl-0\" item={valueOff} onClick={(item) => onChange(item)}>{valueOff}</Button>\n      <div className=\"form-check form-switch d-inline-block\">\n        <input className=\"form-check-input\" type=\"checkbox\" id={id} checked={value === valueOn} onChange={onCheckboxChange} />\n        {label ? <label className=\"form-check-label\" htmlFor={id}>{label}</label> : null}\n      </div>\n      <Button<unknown> className=\"btn btn-link\" item={valueOn} onClick={(item) => onChange(item)}>{valueOn}</Button>\n    </Fragment>\n  )\n}\n\nexport default Toggle;\n","import React, { Component } from \"react\";\n\nimport { BinaryFeature } from \"../../../types\";\nimport Toggle from \"../../toggle\";\n\nimport { BaseFeatureProps } from \"../base\";\n\ntype BinaryProps = BaseFeatureProps<BinaryFeature>\nexport default class Binary extends Component<BinaryProps> {\n\n  renderEditor() {\n    const { feature: { endpoint, name, property, value_off: valueOff, value_on: valueOn }, deviceState, onChange } = this.props;\n    return <Toggle\n      onChange={(value) => onChange(endpoint, { [name]: value })}\n      value={deviceState[property]}\n      valueOn={valueOn}\n      valueOff={valueOff}\n    />\n  }\n  renderView() {\n    const { feature: { property }, deviceState } = this.props;\n    return <strong>{deviceState[property] ? 'TRUE' : 'FALSE'}</strong>\n  }\n  render() {\n    const { feature: { access } } = this.props;\n    switch (access) {\n      case \"r\":\n        return this.renderView();\n      default:\n        return this.renderEditor();\n    }\n  }\n}","import React, { Component } from \"react\";\n\nimport { EnumFeature } from \"../../../types\";\nimport EnumEditor, { ValueWithLabelOrPrimitive } from \"../../enum-editor/enum-editor\";\n\nimport { BaseFeatureProps } from \"../base\";\n\ntype EnumProps = BaseFeatureProps<EnumFeature>\nexport default class Enum extends Component<EnumProps> {\n  render() {\n    const { onChange, feature: { name, values, endpoint } } = this.props;\n    return (\n      <EnumEditor\n        onChange={(value) => onChange(endpoint, {[name]: value})}\n        values={values as unknown as ValueWithLabelOrPrimitive[]}\n      />\n    )\n  }\n}","import React, { Component } from \"react\";\nimport { LightFeature } from \"../../../types\";\nimport { BaseFeatureProps } from \"../base\";\nimport Composite from \"../composite/composite\";\n\ntype LightProps = BaseFeatureProps<LightFeature>\n\nexport default class Light extends Component<LightProps, {}> {\n  render() {\n    const { deviceState, device, feature, onChange } = this.props;\n    return <Composite type=\"light\" feature={feature} device={device} deviceState={deviceState} onChange={onChange} />\n  }\n}\n","import React, { Component } from \"react\";\nimport { SwitchFeature } from \"../../../types\";\nimport { BaseFeatureProps } from \"../base\";\nimport Composite from \"../composite/composite\";\n\ntype SwitchProps = BaseFeatureProps<SwitchFeature>\nexport default class Switch extends Component<SwitchProps> {\n  render() {\n    const { deviceState, device, feature, onChange } = this.props;\n\n    return <Composite type=\"switch\" feature={feature} device={device} deviceState={deviceState} onChange={onChange} />\n  }\n}","import React, { Component } from \"react\";\n\nimport { CoverFeature } from \"../../../types\";\n\n\nimport { BaseFeatureProps } from \"../base\";\nimport Composite from \"../composite/composite\";\n\n\ntype CoverProps = BaseFeatureProps<CoverFeature>\nexport default class Cover extends Component<CoverProps, {}> {\n\n  render() {\n    const { deviceState, device, feature, onChange } = this.props;\n    return <Composite type=\"cover\" feature={feature} device={device} deviceState={deviceState} onChange={onChange} />\n  }\n}\n","import React, { Component } from \"react\";\nimport { LockFeature } from \"../../../types\";\nimport { BaseFeatureProps } from \"../base\";\nimport Composite from \"../composite/composite\";\n\n\ntype LockProps = BaseFeatureProps<LockFeature>\n\nexport default class Lock extends Component<LockProps, {}> {\n  render() {\n    const { deviceState, device, feature, onChange } = this.props;\n    return <Composite type=\"lock\" feature={feature} device={device} deviceState={deviceState} onChange={onChange} />\n  }\n}\n","import React, { FunctionComponent, InputHTMLAttributes, useEffect, useState } from \"react\";\nimport * as convertColors from \"color-convert\";\nimport { AnyColor, XYColor, HueSaturationColor } from \"../../types\";\nimport Button from \"../button\";\n\n\ntype Payload = AnyColor;\n\nexport type ColorFormat = \"color_xy\" | \"color_hs\";\ntype ColorProps = {\n  value: Payload;\n  steps?: string[];\n  format: ColorFormat;\n  onChange(value: object): void;\n}\n\nconst toRGB = (source: AnyColor, sourceFormat: ColorFormat): string => {\n  switch (sourceFormat) {\n    case \"color_xy\":\n      {\n        const { x, y } = source as XYColor;\n        const z = 1.0 - x - y;\n        const Y = 1;\n        const X = (Y / y) * x;\n        const Z = (Y / y) * z;\n        return '#' + convertColors.xyz.hex([X * 100.0, Y * 100.0, Z * 100.0]);\n      }\n\n    case \"color_hs\":\n      {\n        const { hue, saturation } = source as HueSaturationColor;\n        return '#' + convertColors.hsv.hex([hue, saturation, 100]);\n      }\n    default:\n      return '#FFFFFF';\n  }\n}\n\nconst rgbToTargetFormat = (source: string, targetFormat: ColorFormat): object => {\n  switch (targetFormat) {\n    case \"color_hs\":\n      const [hue, saturation, v] = convertColors.hex.hsv(source);\n      return { hue, saturation };\n\n\n    case \"color_xy\":\n      const [X, Y, Z] = convertColors.hex.xyz(source);\n      const x = X / (X + Y + Z);\n      const y = Y / (X + Y + Z);\n      return { x, y };\n\n    default:\n      return { hex: source };\n  }\n\n}\nconst pridePallete = ['#FF0018', '#FFA52C', '#FFFF41', '#008018', '#0000F9', '#86007D'];\nconst ColorEditor: FunctionComponent<ColorProps & Omit<InputHTMLAttributes<HTMLInputElement>, 'onChange' | 'value'>> = (props) => {\n\n  const { onChange, value = {} as AnyColor, format, steps = pridePallete, ...rest } = props;\n  const [currentColor, setCurrentColor] = useState<string>(toRGB(value, format));\n  useEffect(() => {\n    setCurrentColor(toRGB(value, format))\n  }, [value, format]);\n\n  return <div className=\"input-group\">\n    <div className=\"btn-group mr-2\">\n      {\n        steps.map(step => <Button<string>\n          className=\"btn\"\n          style={{ backgroundColor: step }}\n          key={step}\n          item={step}\n          title={step}\n          onClick={(item) => onChange(rgbToTargetFormat(item, format))}>&nbsp;&nbsp;&nbsp;</Button>)\n      }\n    </div>\n    <input\n      type=\"color\"\n      className=\"form-control form-control-color border-0 p-0\"\n      value={currentColor}\n      onChange={e => {\n        onChange(rgbToTargetFormat(e.target.value, format))\n      }}\n      {...rest}\n    />\n  </div>\n\n}\n\nexport default ColorEditor;\n","import React, { Component } from \"react\";\nimport { AnyColor, ColorFeature } from \"../../../../types\";\nimport ColorEditor from \"../../../color-editor/color-editor\";\n\nimport { BaseFeatureProps } from \"../../base\";\n\n\ntype ColorProps = BaseFeatureProps<ColorFeature>;\n\nexport default class Light extends Component<ColorProps, {}> {\n  render() {\n    const { deviceState, feature, onChange } = this.props;\n    const value = {};\n    for (const innerFeature of feature.features) {\n      value[innerFeature.name] = deviceState[feature.property]?.[innerFeature.property] ?? 0;\n    }\n\n    return <ColorEditor\n      onChange={(color) => onChange(feature.endpoint, { color })}\n      value={value as AnyColor}\n      format={feature.name} />\n  }\n}\n","import React, { FunctionComponent, InputHTMLAttributes, useEffect, useState } from \"react\";\n\ntype TextualProps = {\n  value: string;\n  onChange(value: string): void;\n}\n\nconst TextualEditor: FunctionComponent<TextualProps & Omit<InputHTMLAttributes<HTMLInputElement>, 'onChange'>> = (props) => {\n  const { onChange, value, ...rest } = props;\n  const [currentValue, setCurrentValue] = useState<string>(value)\n\n  useEffect(() => {\n    setCurrentValue(value)\n  }, [value]);\n\n  return <input\n    type=\"text\"\n    className=\"form-control\"\n    value={currentValue}\n    onChange={e => setCurrentValue(e.target.value)}\n    onBlur={() => onChange(currentValue)}\n    {...rest}\n  />\n}\n\nexport default TextualEditor;\n","import React, { Component, Fragment } from \"react\";\nimport { TextualFeature } from \"../../../types\";\nimport TextualEditor from \"../../textual-editor/textual-editor\";\n\nimport { BaseFeatureProps } from \"../base\";\n\ntype TextualProps = BaseFeatureProps<TextualFeature>\nexport default class Textual extends Component<TextualProps> {\n\n  renderEditor() {\n    const { feature: { endpoint, name, property }, deviceState, onChange } = this.props;\n    return <TextualEditor\n      onChange={(value) => onChange(endpoint, { [name]: value })}\n      value={deviceState[property] as string ?? \"\"}\n    />\n  }\n  renderView() {\n    const { feature: { property }, deviceState } = this.props;\n    return <Fragment><strong>{deviceState[property] ?? \"N/A\"}</strong></Fragment>\n  }\n  render() {\n    const { feature: { access } } = this.props;\n    switch (access) {\n      case \"r\":\n        return this.renderView();\n      default:\n        return this.renderEditor();\n    }\n  }\n}","import React, { Component, FunctionComponent, PropsWithChildren } from \"react\";\nimport { CompositeFeature, GenericExposedFeature } from \"../../../types\";\nimport { scale } from \"../../../utils\";\nimport { isBinaryFeature, isColorFeature, isCoverFeature, isEnumFeature, isLightFeature, isLockFeature, isNumericFeature, isSwitchFeature, isTextualFeature } from \"../../device-page/type-guards\";\n\nimport Numeric from \"../numeric/numeric\";\n\nimport { BaseFeatureProps } from \"../base\";\nimport Binary from \"../binary/binary\";\nimport Enum from \"../enum/enum\";\nimport { ValueWithLabelOrPrimitive } from \"../../enum-editor/enum-editor\";\nimport Light from \"../light/light\";\nimport Switch from \"../switch/switch\";\nimport Cover from \"../cover/cover\";\nimport Lock from \"../lock/lock\";\nimport Color from \"../composite/color/color\";\nimport Textual from \"../textual/textual\";\n\n\ntype CompositeType = \"composite\" | \"light\" | \"switch\" | \"cover\" | \"lock\" | \"fan\";\n\ninterface CompositeProps extends BaseFeatureProps<CompositeFeature> {\n  type: CompositeType;\n}\n\n\nconst stepsConfiguration = {\n  light: {\n    brightness: [0, 25, 50, 75, 100].map<ValueWithLabelOrPrimitive>(item => ({ value: scale(item, [0, 100], [0, 255]), title: item + '%' })),\n    'color_temp': [1000, 2000, 3000, 4000, 5000, 6500].map<ValueWithLabelOrPrimitive>(kelvin => ({ value: 1000000.0 / kelvin, title: kelvin + 'K' }))\n  },\n  cover: {\n    position: [0, 25, 50, 75, 100].map<ValueWithLabelOrPrimitive>(item => ({ value: item, title: item + '' })),\n    tilt: [0, 25, 50, 75, 100].map<ValueWithLabelOrPrimitive>(item => ({ value: item, title: item + '' }))\n  }\n};\n\nconst FeatureWrapper: FunctionComponent<PropsWithChildren<{ feature: CompositeFeature | GenericExposedFeature }>> = (props) => {\n  const { children, feature } = props;\n  return <div className=\"row mb-3\">\n    <label className=\"col-3 col-form-label\"><strong title={JSON.stringify(feature)}>{feature.name}{feature.endpoint ? `_${feature.endpoint}` : null}</strong></label>\n    <div className=\"col-9 d-flex align-items-center\">\n      {children}\n    </div>\n  </div>\n}\n\nexport default class Composite extends Component<CompositeProps, {}> {\n  renderFeature = (feature: CompositeFeature | GenericExposedFeature) => {\n    const { type, deviceState, device, onChange } = this.props;\n    const genericParams = { key: JSON.stringify(feature), device, deviceState, onChange };\n    const wrapperParams = { key: JSON.stringify(feature), feature };\n\n    if (isBinaryFeature(feature)) {\n      return <FeatureWrapper {...wrapperParams}>\n        <Binary feature={feature} {...genericParams} />\n      </FeatureWrapper>\n    } else if (isNumericFeature(feature)) {\n      return <FeatureWrapper {...wrapperParams}>\n        <Numeric feature={feature} {...genericParams}\n          steps={stepsConfiguration[type]?.[feature.name]} />\n      </FeatureWrapper>\n     } else if (isTextualFeature(feature)) {\n      return <FeatureWrapper {...wrapperParams}>\n        <Textual feature={feature} {...genericParams} />\n      </FeatureWrapper>\n    } else if (isEnumFeature(feature)) {\n      return <FeatureWrapper {...wrapperParams}>\n        <Enum feature={feature} {...genericParams} />\n      </FeatureWrapper>\n    } else if (isLightFeature(feature)) {\n      return <Light feature={feature} {...genericParams} />\n    } else if (isSwitchFeature(feature)) {\n      return <Switch feature={feature} {...genericParams} />\n    } else if (isCoverFeature(feature)) {\n      return <Cover feature={feature} {...genericParams} />\n    } else if (isLockFeature(feature)) {\n      return <Lock feature={feature} {...genericParams} />\n    } else if (isColorFeature(feature)) {\n      return <FeatureWrapper {...wrapperParams}>\n        <Color feature={feature} {...genericParams} />\n      </FeatureWrapper>\n    }\n    return (<FeatureWrapper {...wrapperParams}>\n      <label className=\"col-3 col-form-label\">Unknown feature (<strong>{feature.type}</strong>)</label>\n      <div className=\"col-9\">{JSON.stringify(feature)}{JSON.stringify(deviceState)}</div>\n    </FeatureWrapper>);\n  }\n  render() {\n    const { feature: { features } } = this.props;\n\n    return features?.map(this.renderFeature);\n\n  }\n}\n","import React, { Component } from \"react\";\nimport { CompositeFeature, Device, DeviceState } from \"../../types\";\nimport actions, { StateApi } from \"../../actions\";\n\nimport { connect } from \"unistore/react\";\nimport { GlobalState } from \"../../store\";\n\nimport Composite from \"../features/composite/composite\";\n\ninterface PropsFromStore {\n    deviceStates: Map<string, DeviceState>;\n}\ninterface ExposesProps {\n    device: Device;\n}\n\nclass Exposes extends Component<ExposesProps & PropsFromStore & StateApi, {}> {\n    render() {\n        const { device, deviceStates, setDeviceState } = this.props;\n        const deviceState = deviceStates.get(device.friendly_name) ?? {} as DeviceState;\n        if (device.definition?.exposes) {\n            return <div className=\"card\">\n                <div className=\"card-body\">\n                    <Composite feature={{ features: device.definition.exposes } as CompositeFeature} type=\"composite\" device={device} deviceState={deviceState}\n                        onChange={(endpoint, value) => {\n                            setDeviceState(`${device.friendly_name}${endpoint ? `/${endpoint}` : ''}`, value)\n                        }}\n                    />\n                </div>\n            </div>\n        } else {\n            return \"Device doesn't expose anything\"\n        }\n    }\n}\n\nconst mappedProps = [\"deviceStates\"];\n\nconst ConnectedDeviceExposes = connect<ExposesProps, {}, GlobalState, StateApi>(mappedProps, actions)(Exposes);\nexport default ConnectedDeviceExposes;\n","// extracted by mini-css-extract-plugin\nexport default {\"tree\":\"_1A0umx4fPj4iWC5K7RUnD-\"};","import React, { Component, FunctionComponent } from \"react\";\nimport { Device } from \"../../types\";\nimport treeStyle from \"./tree.css\";\n\ninterface ClustersProps {\n    device: Device;\n}\ntype ClustersComp = {\n    label: string;\n    clusters: string[];\n}\nconst ClustersComp: FunctionComponent<ClustersComp> = (props) => {\n    const { label, clusters } = props;\n    if (clusters.length) {\n        return (<li>\n            <span>{label}</span>\n            <ul>{clusters.map(cluster => <li key={cluster}><span>{cluster}</span></li>)}</ul>\n        </li>)\n    } else {\n        return null;\n    }\n\n}\nexport default class Clusters extends Component<ClustersProps, {}> {\n    render() {\n        const { device } = this.props;\n        return <div className=\"card\">\n            <div className=\"card-body\">\n                <dl className={`${treeStyle.tree} row`}>\n                    <ul>\n                        <li>\n                            <span>{device.ieee_address}</span>\n                            <ul>\n                                {Array.from(device.endpoints.entries()).map(([epName, epData]) => {\n                                    return (\n                                        <li key={epName}>\n                                            <span>Endpoint <strong>{epName}</strong></span>\n                                            <ul>\n                                                <ClustersComp label=\"Output clusters\" clusters={epData.clusters.output} />\n                                                <ClustersComp label=\"Input clusters\" clusters={epData.clusters.input} />\n                                            </ul>\n                                        </li>\n                                    );\n                                })}\n                            </ul>\n                        </li>\n                    </ul>\n                </dl>\n            </div>\n        </div>\n    }\n}\n\n","import React, { Component } from \"react\";\nimport { NavLink, Redirect, RouteComponentProps, withRouter } from \"react-router-dom\";\nimport { connect } from \"unistore/react\";\nimport actions from \"../../actions\";\nimport { GlobalState } from \"../../store\";\nimport DeviceInfo from \"./info\";\nimport Bind from \"./bind\";\nimport States from \"./states\";\nimport ConnectedDeviceExposes from \"./exposes\";\nimport Clusters from \"./clusters\";\n\ntype UrlParams = {\n    dev: string;\n    tab?: TabName;\n};\ntype DevicePageProps = RouteComponentProps<UrlParams>;\n\n\ntype TabName = \"info\" | \"bind\" | \"state\" | \"exposes\" | \"clusters\";\n// eslint-disable-next-line react/prefer-stateless-function\nexport class DevicePage extends Component<DevicePageProps & GlobalState, {}> {\n    renderContent() {\n        const { match, devices } = this.props;\n        const { tab, dev } = match.params;\n        const device = devices.get(dev);\n\n        switch (tab) {\n            case \"info\":\n                return <DeviceInfo device={device} />;\n            case \"bind\":\n                return <Bind device={device} />;\n            case \"state\":\n                return <States device={device} />;\n            case \"exposes\":\n                return <ConnectedDeviceExposes device={device} />;\n            case \"clusters\":\n                return <Clusters device={device} />\n            default:\n                return <Redirect to={`/device/${dev}/info`} />;\n        }\n\n    }\n    render() {\n\n        const { devices, match } = this.props;\n        const { dev } = match.params;\n        const device = devices.get(dev);\n        if (!device) {\n            return <div className=\"h-100 d-flex justify-content-center align-items-center\">Unknown device</div>\n        }\n\n        return (<div className=\"card h-100\">\n            <div className=\"card-header\">\n                <ul className=\"nav nav-tabs card-header-tabs\">\n                    <li className=\"nav-item\">\n                        <NavLink activeClassName=\"active\" className=\"nav-link\" to={`/device/${dev}/info`}>About</NavLink>\n                    </li>\n                    <li className=\"nav-item\">\n                        <NavLink activeClassName=\"active\" className=\"nav-link\" to={`/device/${dev}/bind`}>Bind</NavLink>\n\n                    </li>\n                    <li className=\"nav-item\">\n                        <NavLink activeClassName=\"active\" className=\"nav-link\" to={`/device/${dev}/state`}>State</NavLink>\n                    </li>\n                    <li className=\"nav-item\">\n                        <NavLink activeClassName=\"active\" className=\"nav-link\" to={`/device/${dev}/exposes`}>Exposes</NavLink>\n                    </li>\n                    <li className=\"nav-item\">\n                        <NavLink activeClassName=\"active\" className=\"nav-link\" to={`/device/${dev}/clusters`}>Clusters</NavLink>\n                    </li>\n                </ul>\n            </div>\n\n            <div className=\"card-body\">\n                <h5 className=\"card-title\">{device.friendly_name}</h5>\n                {this.renderContent()}\n            </div>\n        </div>);\n\n    }\n}\nconst devicePageWithRouter = withRouter(DevicePage);\nconst mappedProps = [\"devices\"];\nconst ConnectedDevicePage = connect<{}, {}, GlobalState, {}>(mappedProps, actions)(devicePageWithRouter);\nexport default ConnectedDevicePage;","import React, { Component} from \"react\";\nimport { connect } from \"unistore/react\";\nimport actions, { TouchlinkApi } from \"../../actions\";\nimport { GlobalState } from \"../../store\";\nimport Button from \"../button\";\nimport { TouchLinkDevice } from \"../../types\";\nimport { genDeviceDetailsLink } from \"../../utils\";\nimport cx from \"classnames\";\nimport { Link } from \"react-router-dom\";\n\n\n\n// eslint-disable-next-line react/prefer-stateless-function\nexport class TouchlinkPage extends Component<TouchlinkApi & GlobalState, {}> {\n    onIdentifyClick = (device: TouchLinkDevice): void => {\n        const { touchlinkIdentify } = this.props;\n        touchlinkIdentify(device);\n    }\n\n    onResetClick = (device: TouchLinkDevice): void => {\n        const { touchlinkReset } = this.props;\n        touchlinkReset(device);\n    }\n\n    renderTouchlinkDevices() {\n        const { touchlinkDevices, devices, touchlinkIdentifyInProgress, touchlinkResetInProgress } = this.props;\n        const touchlinkInProgress = touchlinkIdentifyInProgress || touchlinkResetInProgress;\n        return (\n            <div className=\"table-responsive\">\n                <table className=\"table align-middle\">\n                    <thead>\n                        <tr>\n                            <th scope=\"col\">#</th>\n                            <th scope=\"col\">ieee_address</th>\n                            <th scope=\"col\">friendly_name</th>\n                            <th scope=\"col\">channel</th>\n                            <th scope=\"col\">&nbsp;</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {touchlinkDevices.map((touchlinkDevice, idx) => (\n                            <tr key={touchlinkDevice.ieee_address}>\n                                <td>{idx + 1}</td>\n                                <td>{\n                                    devices.has(touchlinkDevice.ieee_address) ?\n                                        (<Link to={genDeviceDetailsLink(touchlinkDevice.ieee_address)}>{touchlinkDevice.ieee_address}</Link>) : touchlinkDevice.ieee_address}</td>\n                                <td>{devices.get(touchlinkDevice.ieee_address)?.friendly_name}</td>\n                                <td>{touchlinkDevice.channel}</td>\n                                <td>\n                                    <div className=\"btn-group float-right\" role=\"group\" aria-label=\"Basic example\">\n                                        <Button<TouchLinkDevice> disabled={touchlinkInProgress} item={touchlinkDevice} title=\"Identify\" className=\"btn btn-primary\" onClick={this.onIdentifyClick}><i\n                                            className={cx(\"fa\", { \"fa-exclamation-triangle\": !touchlinkIdentifyInProgress, \"fas fa-circle-notch fa-spin\": touchlinkIdentifyInProgress })} /></Button>\n                                        <Button<TouchLinkDevice> disabled={touchlinkInProgress} item={touchlinkDevice} title=\"Factory reset\" className=\"btn btn-danger\" onClick={this.onResetClick}><i\n                                            className={cx(\"fa\", { \"fa-broom\": !touchlinkResetInProgress, \"fas fa-circle-notch fa-spin\": touchlinkResetInProgress })} /></Button>\n                                    </div>\n                                </td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n    renderNoDevices() {\n        const { touchlinkScan } = this.props;\n        return (\n            <Button className=\"btn btn-primary mx-auto d-block\" onClick={touchlinkScan}>Scan</Button>\n        );\n    }\n    render() {\n        const { touchlinkDevices, touchlinkScanInProgress, touchlinkScan } = this.props;\n        return (\n            <div className=\"container\">\n                <div className=\"card mt-2\">\n                    <div className=\"card-header allign-middle\">\n                        Detected {touchlinkDevices.length} touchlink devices.\n                        <Button title=\"Rescan\" className=\"btn btn-primary btn-sm float-right\" onClick={touchlinkScan}><i className=\"fa fa-sync\" /></Button>\n                    </div>\n\n                    <div>\n                        <div className=\"card-body\">\n                            {touchlinkScanInProgress ? (\n                                <div className=\"d-flex justify-content-center\">\n                                    <div className=\"spinner-border\" role=\"status\">\n                                        <span className=\"sr-only\">Loading...</span>\n                                    </div>\n                                </div>\n                            ) : touchlinkDevices.length === 0 ? this.renderNoDevices() : this.renderTouchlinkDevices()}\n\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\nconst mappedProps = [\"touchlinkDevices\", \"devices\", \"touchlinkScanInProgress\", \"touchlinkIdentifyInProgress\", \"touchlinkResetInProgress\"];\n\nexport default connect<{}, {}, GlobalState, TouchlinkApi>(mappedProps, actions)(TouchlinkPage);","import React, { Component } from \"react\";\nimport { connect } from \"unistore/react\";\nimport actions, { BridgeApi, LegacyApi, UtilsApi } from \"../../actions\";\nimport { GlobalState } from \"../../store\";\nimport get from \"lodash/get\";\nimport UniversalEditor from \"../universal-editor\";\nimport isEmpty from \"lodash/isEmpty\";\nimport { NavLink, Redirect, RouteComponentProps, withRouter } from \"react-router-dom\";\nimport Button from \"../button\";\nimport { download } from \"../../utils\";\n\n\nconst settings = [\n    {\n        key: 'last_seen',\n        path: 'config.advanced.last_seen',\n        title: 'Last seen',\n        description: 'Add a last_seen attribute to MQTT messages, contains date/time of last Zigbee message',\n        values: ['disable', 'ISO_8601', 'ISO_8601_local', 'epoch']\n    },\n    {\n        key: 'elapsed',\n        path: 'config.advanced.elapsed',\n        title: 'Elapsed',\n        description: 'Add an elapsed attribute to MQTT messages, contains milliseconds since the previous msg'\n    },\n    {\n        key: 'log_level',\n        path: 'log_level',\n        title: 'Log level',\n        description: 'Logging level',\n        values: ['debug', 'info', 'warn', 'error']\n    },\n    {\n        key: 'homeassistant',\n        path: 'config.homeassistant',\n        title: 'Homeassistant support',\n        description: 'Home Assistant integration (MQTT discovery)'\n    }\n]\ntype SettingsTab = \"settings\" | \"bridge\"\n\ntype UrlParams = {\n    tab?: SettingsTab;\n};\ntype SettingsPageProps = RouteComponentProps<UrlParams>;\n\n\nexport class SettingsPage extends Component<SettingsPageProps & BridgeApi & GlobalState & LegacyApi & UtilsApi, {}> {\n    updateConfig = (name: string, value: unknown): void => {\n        const { updateConfigValue } = this.props;\n        updateConfigValue(name, value);\n    }\n\n    render() {\n        return (\n            <div className=\"card\">\n                <div className=\"card-header\">\n                    <ul className=\"nav nav-tabs card-header-tabs\">\n                        <li className=\"nav-item\">\n                            <NavLink className=\"nav-link\" activeClassName=\"active\" to={`/settings/settings`}>Settings</NavLink>\n                        </li>\n                        <li className=\"nav-item\">\n                            <NavLink className=\"nav-link\" activeClassName=\"active\" to={`/settings/bridge`}>Raw</NavLink>\n                        </li>\n                    </ul>\n\n                </div>\n\n                <div className=\"card-body\">\n                    {this.renderSwitcher()}\n                </div>\n            </div>\n        )\n    }\n    renderSwitcher() {\n        const { match } = this.props;\n        const { tab } = match.params;\n        switch (tab) {\n            case \"settings\":\n                return this.renderSettings();\n            case \"bridge\":\n                return this.renderBridgeInfo();\n            default:\n                return <Redirect to={`/settings/settings`} />;\n        }\n    }\n\n    renderBridgeInfo() {\n        const { bridgeInfo } = this.props;\n        return <pre>{JSON.stringify(bridgeInfo, null, 4)}</pre>\n    }\n    renderLegacyApiSettings() {\n        const { resetZnp } = this.props;\n        return [\n            <div key={\"znp-rest\"} className=\"row\">\n                <div className=\"col\">\n                    <Button<void> className=\"btn btn-danger\" promt onClick={() => resetZnp()}>Reset coordinator</Button>\n                </div>\n            </div>\n        ];\n    }\n    renderSettings() {\n        const { bridgeInfo, exportState } = this.props;\n        return <div className=\"container\">\n            <div className=\"mt-2\">\n                {\n                    !isEmpty(bridgeInfo) && settings.map(setting => (\n                        <div key={setting.key} className=\"row\">\n                            <div className=\"col\">\n                                <label htmlFor={setting.key}>{setting.title}</label>\n                                <UniversalEditor\n                                    disabled={get(bridgeInfo, setting.path) === undefined}\n                                    value={get(bridgeInfo, setting.path) as string | ReadonlyArray<string> | number}\n                                    values={setting.values}\n                                    onChange={(value) => this.updateConfig(setting.key, value)}\n                                />\n                                <div className=\"form-text\">{setting.description}</div>\n                            </div>\n                        </div>\n                    ))\n                }\n                {\n                    bridgeInfo.config?.advanced.legacy_api !== false ? this.renderLegacyApiSettings() : null\n                }\n            </div>\n            <Button<void> className=\"mt-2 btn btn-primary\" onClick={exportState}>Download state</Button>\n        </div>\n\n    }\n}\nconst SettingsPageWithRouter = withRouter(SettingsPage);\nconst mappedProps = [\"bridgeInfo\"];\nconst ConnectedSettingsPage = connect<{}, {}, GlobalState, BridgeApi>(mappedProps, actions)(SettingsPageWithRouter);\nexport default ConnectedSettingsPage;","import { useState, useEffect, useRef } from 'react';\n\nexport default function useComponentVisible(initialIsVisible: boolean) {\n    const [isComponentVisible, setIsComponentVisible] = useState(\n        initialIsVisible\n    );\n    const ref = useRef(null);\n\n    const handleHideDropdown = (event: KeyboardEvent) => {\n        if (event.key === \"Escape\") {\n            setIsComponentVisible(false);\n        }\n    };\n\n    const handleClickOutside = (event: MouseEvent) => {\n        if (ref.current && !ref.current.contains(event.target)) {\n            setIsComponentVisible(false);\n        }\n    };\n\n    useEffect(() => {\n        document.addEventListener(\"keydown\", handleHideDropdown, true);\n        document.addEventListener(\"click\", handleClickOutside, true);\n        return () => {\n            document.removeEventListener(\"keydown\", handleHideDropdown, true);\n            document.removeEventListener(\"click\", handleClickOutside, true);\n        };\n    });\n\n    return { ref, isComponentVisible, setIsComponentVisible };\n}","// extracted by mini-css-extract-plugin\nexport default {\"scrollable-menu\":\"_36Sntvyj-B3gg7Xj6xLUaY\"};","import React, { FunctionComponent, useState } from 'react';\n\nimport { GlobalState } from '../../store';\nimport actions, { BridgeApi } from '../../actions';\nimport { connect } from 'unistore/react';\nimport Button from '../button';\nimport cx from \"classnames\";\nimport { Link, NavLink } from 'react-router-dom';\nimport useComponentVisible from '../../hooks/useComponentVisible';\nimport { Device } from '../../types';\nimport style from \"./style.css\";\n\nconst urls = [\n    {\n        href: '/',\n        title: 'Home',\n        exact: true\n    },\n    {\n        href: '/map',\n        title: 'Map'\n    },\n    {\n        href: '/settings',\n        title: 'Settings'\n    },\n    {\n        href: '/groups',\n        title: 'Groups'\n    },\n    {\n        href: '/touchlink',\n        title: 'Touchlink'\n    },\n    {\n        href: '/logs',\n        title: 'Logs'\n    }\n];\ntype StartStopJoinButtonProps = {\n    devices: Map<string, Device>;\n}\nconst StartStopJoinButton: FunctionComponent<StartStopJoinButtonProps & Pick<BridgeApi, 'setPermitJoin'> & Pick<GlobalState, 'bridgeInfo'>> = ({ devices, setPermitJoin, bridgeInfo }) => {\n    const { ref, isComponentVisible, setIsComponentVisible } = useComponentVisible(false);\n    const [selectedRouter, setSelectedRouter] = useState<Device>(null);\n    // return<Button<boolean> className=\"btn btn-primary\" item={!bridgeInfo.permit_join} onClick={setPermitJoin}>{bridgeInfo.permit_join ? \"Disable join\" : \"Permit join\"}</Button>\n    const routers = [];\n    const selectAndHide = (device: Device) => { setSelectedRouter(device); setIsComponentVisible(false) }\n    devices.forEach((device) => {\n        if (device.type == \"Router\") {\n            routers.push(<li key={device.friendly_name}><a onClick={() => selectAndHide(device)} className=\"dropdown-item\" href=\"#\">{device.friendly_name}</a></li>)\n        }\n    });\n    const onBtnClick = () => {\n        setPermitJoin(!bridgeInfo.permit_join, selectedRouter);\n    }\n    return (\n        <div className=\"input-group w-auto\">\n            {routers.length ? (<><Button<boolean> type=\"button\" onClick={setIsComponentVisible} item={!isComponentVisible} className=\"btn btn-outline-secondary dropdown-toggle dropdown-toggle-split\" data-toggle=\"dropdown\" aria-expanded=\"false\">\n                <span className=\"visually-hidden\">Toggle Dropdown</span>\n            </Button>\n                <ul ref={ref} className={cx('dropdown-menu', style['scrollable-menu'], { show: isComponentVisible })}>\n                    <li key='all'><a className=\"dropdown-item\" onClick={() => selectAndHide(null)} href=\"#\">All</a></li>\n                    {routers}\n                </ul></>) : null}\n                <button onClick={onBtnClick} type=\"button\" className=\"btn btn-outline-secondary\">{bridgeInfo.permit_join ? \"Disable join\" : \"Permit join\"} ({selectedRouter?.friendly_name ?? \"All\"})</button>\n\n        </div>\n    );\n}\n\ntype PropsFromStore = {\n    devices: Map<string, Device>;\n    bridgeInfo: object;\n}\nconst NavBar: FunctionComponent<PropsFromStore & BridgeApi & Pick<GlobalState, 'bridgeInfo'>> = ({ devices, setPermitJoin, bridgeInfo }) => {\n    const { ref, isComponentVisible, setIsComponentVisible } = useComponentVisible(false);\n    return (<nav className=\"navbar navbar-expand-md navbar-dark bg-dark fixed-top\">\n        <div className=\"container-fluid\">\n            <Link className=\"navbar-brand\" to=\"/\">Zigbee2MQTT</Link>\n            <Button<boolean> onClick={setIsComponentVisible} item={!isComponentVisible} className={cx(\"navbar-toggler\")} type=\"button\">\n                <span className=\"navbar-toggler-icon\" />\n            </Button>\n            <div ref={ref} className={cx(\"navbar-collapse collapse\", { show: isComponentVisible })}>\n                <ul className=\"navbar-nav mr-auto mb-2 mb-md-0\">\n                    {\n                        urls.map(url =>\n                            <li key={url.href} className=\"nav-item\">\n                                <NavLink exact={url.exact} className=\"nav-link\" to={url.href} activeClassName=\"active\">\n                                    {url.title}\n                                </NavLink>\n                            </li>)\n                    }\n                </ul>\n                <StartStopJoinButton\n                    devices={devices}\n                    setPermitJoin={setPermitJoin}\n                    bridgeInfo={bridgeInfo}\n                />\n            </div>\n        </div>\n    </nav>)\n}\nconst mappedProps = [\"bridgeInfo\", \"devices\"];\nconst ConnectedNavBar = connect<{}, {}, PropsFromStore, BridgeApi>(mappedProps, actions)(NavBar);\nexport default ConnectedNavBar;\n\n","// extracted by mini-css-extract-plugin\nexport default {\"device-pic\":\"_2p1XqBiO9XLlCB-lT60VCH\",\"device-image\":\"_3Z1i8qUrV2sErNF0__pVZt\"};","import React, { Component } from \"react\";\nimport { connect } from \"unistore/react\";\nimport actions, { GroupsApi } from \"../../actions\";\nimport { GlobalState, Group, GroupAddress } from \"../../store\";\nimport Button from \"../button\";\nimport { Device, Endpoint } from \"../../types\";\nimport { genDeviceDetailsLink } from \"../../utils\";\nimport style from './style.css';\nimport cx from 'classnames';\nimport EndpointPicker from \"../endpoint-picker\";\nimport DevicePicker from \"../device-picker\";\nimport { Link } from \"react-router-dom\";\nimport { getEndpoints } from \"../device-page/bind-row\";\nimport DeviceImage from \"../device-image\";\n\n\ninterface GroupsPageState {\n    newGroupName: string;\n}\n\n\ninterface AddDeviceToGroupProps {\n    devices: Map<string, Device>;\n    group: Group;\n    addDeviceToGroup(deviceName: string, groupName: string): void;\n}\n\ninterface AddDeviceToGroupState {\n    device: string;\n    endpoint: Endpoint;\n}\n\ninterface DeviceGroupRowProps {\n    rowNumber: number;\n    groupAddress: GroupAddress;\n    devices: Map<string, Device>;\n    removeDeviceFromGroup(deviceFriendlyName: string): void;\n}\n\n// eslint-disable-next-line react/prefer-stateless-function\nclass DeviceGroupRow extends Component<DeviceGroupRowProps, {}> {\n    getDeviceObj(): Device | undefined {\n        const { groupAddress, devices } = this.props;\n        return devices.get(groupAddress.ieee_address);\n    }\n    render() {\n        const { rowNumber, groupAddress, removeDeviceFromGroup } = this.props;\n        const device = this.getDeviceObj();\n\n        return <tr>\n            <th scope=\"row\">{rowNumber + 1}</th>\n            <td className={style[\"device-pic\"]}>\n                <DeviceImage className={cx(style[\"device-image\"])} device={device} />\n            </td>\n            <td><Link to={genDeviceDetailsLink(device.ieee_address)}>{device.friendly_name}</Link></td>\n            <td>{groupAddress.ieee_address}</td>\n            <td>{groupAddress.endpoint}</td>\n            <td>{device && <Button<string> promt item={device.friendly_name} onClick={removeDeviceFromGroup} className=\"btn btn-danger btn-sm float-right\"><i className=\"fa fa-trash\" /></Button>}</td>\n        </tr>;\n    }\n}\ninterface DeviceGroupPropts {\n    group: Group;\n    devices: Map<string, Device>;\n    removeDeviceFromGroup(groupFriendlyName: string, deviceFriendlyName: string): void;\n}\n\n// eslint-disable-next-line react/prefer-stateless-function\nclass DeviceGroup extends Component<DeviceGroupPropts, {}> {\n    onRemove = (deviceFriendlyName: string): void => {\n        const { group, removeDeviceFromGroup } = this.props;\n        removeDeviceFromGroup(group.friendly_name, deviceFriendlyName);\n    }\n    render() {\n        const { group, devices } = this.props;\n        return <table className=\"table table-sm\">\n            <thead>\n                <tr>\n                    <th scope=\"col\">#</th>\n                    <th scope=\"col\">Pic</th>\n                    <th scope=\"col\">friendlyName</th>\n                    <th scope=\"col\">ieee_addr</th>\n                    <th scope=\"col\">Endpoint</th>\n                    <th scope=\"col\" className=\"text-right\">Action</th>\n                </tr>\n            </thead>\n            <tbody>\n                {group.members.map((groupMemebershipInfo, idx) => <DeviceGroupRow key={groupMemebershipInfo.ieee_address} removeDeviceFromGroup={this.onRemove} rowNumber={idx} devices={devices} groupAddress={groupMemebershipInfo} />)}\n            </tbody>\n        </table>;\n    }\n}\n\nclass AddDeviceToGroup extends Component<AddDeviceToGroupProps, AddDeviceToGroupState> {\n    state = {\n        device: undefined,\n        endpoint: undefined\n    };\n\n\n    onSubmit = (): void => {\n        const { addDeviceToGroup, group } = this.props;\n        const { device, endpoint } = this.state;\n        addDeviceToGroup(endpoint ? `${device}/${endpoint}` : device, group.friendly_name);\n\n    }\n    onDeviceSelect = (device: Device): void => {\n        const endpoints = getEndpoints(device);\n        this.setState({ device: device.ieee_address, endpoint: endpoints[0] });\n    }\n\n    onEpChange = (endpoint: Endpoint): void => {\n        this.setState({ endpoint });\n    }\n    render() {\n        const { device, endpoint } = this.state;\n        const { devices } = this.props;\n        const deviceObj = devices.get(device);\n\n        const endpoints = getEndpoints(deviceObj);\n\n        return <form className=\"row\">\n\n            <div className=\"col\">\n                <div className=\"input-group mb-3\">\n                    <DevicePicker type=\"device\" value={device} devices={devices} onChange={this.onDeviceSelect} />\n                    <EndpointPicker values={endpoints} value={endpoint} onChange={this.onEpChange} />\n                </div>\n\n            </div>\n\n            <div className=\"col\">\n                <Button<void> type=\"button\" onClick={this.onSubmit} className=\"btn btn-primary\">Add to group</Button>\n            </div>\n\n\n        </form>\n    }\n}\n\nexport class GroupsPage extends Component<GroupsApi & GlobalState, GroupsPageState> {\n    state = {\n        newGroupName: ''\n    }\n\n\n\n    changeHandler = (event): void => {\n        const name: string = event.target.name;\n        const value: string = event.target.value;\n        this.setState({ [name]: value } as Pick<GroupsPageState, \"newGroupName\">);\n    }\n\n    onGroupCreateSubmit = (): void => {\n        const { newGroupName } = this.state;\n        const { createGroup } = this.props;\n        createGroup(newGroupName);\n    }\n\n    renderGroupCreationForm() {\n        const { newGroupName } = this.state;\n        return (\n            <form className=\"row mt-2\">\n                <div className=\"col\">\n                    <label htmlFor=\"newGroupName\" className=\"sr-only\">Group name</label>\n                    <input onChange={this.changeHandler} value={newGroupName} required type=\"text\" name=\"newGroupName\" className=\"form-control\" id=\"newGroupName\" placeholder=\"bedroom_lamps\" />\n                </div>\n                <div className=\"col\">\n                    <Button<void> onClick={this.onGroupCreateSubmit} className=\"btn btn-primary mb-2\">Create group</Button>\n                </div>\n\n            </form>\n        )\n    }\n    removeGroup = (friendlyName: string): void => {\n        const { removeGroup } = this.props;\n        removeGroup(friendlyName);\n    }\n    removeDeviceFromGroup = (groupFriendlyName: string, deviceFriendlyName: string): void => {\n        const { removeDeviceFromGroup } = this.props;\n        removeDeviceFromGroup(deviceFriendlyName, groupFriendlyName);\n    }\n    renderGroups() {\n        const { groups, devices, addDeviceToGroup } = this.props;\n        return (\n            <div id=\"accordion\">\n                {\n                    groups.map(group => (\n                        <div key={group.id} className=\"card mb-1\">\n                            <div className=\"card-header\" id={`heading${group.id}`}>\n                                <h5 className=\"mb-0\">\n                                    <button className=\"btn btn-link btn-sm\">\n                                        {group.friendly_name} (#{group.id})\n                                    </button>\n                                    <Button<string> promt title=\"Remove group\" item={group.friendly_name} onClick={this.removeGroup} className=\"btn btn-danger btn-sm float-right\"><i className=\"fa fa-trash\" /></Button>\n                                </h5>\n                            </div>\n\n                            <div>\n                                <div className=\"card-body\">\n                                    <div className=\"table-responsive\">\n                                        <DeviceGroup group={group} devices={devices} removeDeviceFromGroup={this.removeDeviceFromGroup} />\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"card-footer\">\n                                <AddDeviceToGroup addDeviceToGroup={addDeviceToGroup} devices={devices} group={group} />\n                            </div>\n                        </div>\n                    )).reverse()\n                }\n\n            </div>\n        )\n    }\n\n    render() {\n        return <div className=\"container\">\n            {this.renderGroupCreationForm()}\n            {this.renderGroups()}\n        </div>\n\n    }\n}\n\nconst mappedProps = [\"groups\", \"devices\"];\nconst ConnectedGroupsPage = connect<{}, {}, GlobalState, GroupsApi>(mappedProps, actions)(GroupsPage);\nexport default ConnectedGroupsPage;","// extracted by mini-css-extract-plugin\nexport default {\"action-column\":\"_1AmFhCTIk_ifBlEJGnLJuK\",\"device-pic\":\"_1KD_wxLENsmTnroATY4BrA\",\"device-image\":\"_1kMXLbhsSotmS-uYUbIFl0\",\"adaptive\":\"naW23ivAqNAn-AGHResRM\"};","import React, { MouseEvent, ThHTMLAttributes} from \"react\";\n\n\n\nimport { SortDirection } from \"../../types\";\nimport isEqual from \"lodash/isEqual\";\n\n\ninterface ActionTHProps<T> {\n    column: T | T[];\n    current: T | T[];\n    currentDirection: SortDirection;\n    onClick?(arg1: T | T[]): void;\n}\n\nexport default class ActionTH<T> extends React.Component<ActionTHProps<T> & Omit<ThHTMLAttributes<HTMLTableHeaderCellElement>, 'onClick'>, {}> {\n    onClick = (event: MouseEvent): void => {\n        event.preventDefault();\n        event.stopPropagation();\n        const { column, onClick } = this.props;\n        onClick && onClick(column);\n    };\n\n    renderArrow () {\n        const { currentDirection, current, column } = this.props;\n        if (isEqual(current, column)) {\n            if (currentDirection == \"asc\") {\n                return <i className={`fa fa-sort-amount-down-alt`} />;\n            }\n            return <i className={`fa fa-sort-amount-down`} />;\n        }\n        return <i className={`fa fa-sort-amount-down invisible`} />;\n    }\n\n    render () {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { children, onClick, current, column, currentDirection, ...rest } = this.props;\n        return (<th {...rest}>\n            <span className=\"btn btn-link\" onClick={this.onClick}>{children}</span>\n            {this.renderArrow()}\n        </th>);\n    }\n}\n","import style from \"./style.css\";\nimport React, { Component, Fragment } from \"react\";\nimport orderBy from \"lodash/orderBy\";\nimport DeviceControlGroup from \"../device-control\";\nimport cx from \"classnames\";\nimport { Device, SortDirection, DeviceState } from \"../../types\";\nimport { genDeviceDetailsLink, lastSeen, toHex } from \"../../utils\";\n\nimport { Notyf } from \"notyf\";\nimport PowerSource from \"../power-source\";\nimport { connect } from \"unistore/react\";\nimport { GlobalState } from \"../../store\";\nimport actions from \"../../actions\";\nimport ActionTH from \"./ActionTH\";\nimport isEqual from \"lodash/isEqual\";\nimport { Link } from \"react-router-dom\";\nimport DeviceImage from \"../device-image\";\n\n\ntype SortColumn =\n    | \"device.network_address\"\n    | \"device.friendly_name\"\n    | \"device.ieee_address\"\n    | \"device.definition.vendor\"\n    | \"device.definition.model\"\n    | \"state.linkquality\"\n    | \"state.last_seen\"\n    | \"state.elapsed\"\n    | \"state.battery\";\n\n\ninterface ZigbeeTableState {\n    sortDirection: SortDirection;\n    sortColumn: SortColumn | SortColumn[];\n    currentTime: number;\n    sortedTableData: ZigbeeTableData[];\n    error?: object;\n}\n\n\ninterface ZigbeeTableData {\n    device: Device;\n    state: DeviceState;\n}\n\n\n\nconst storeKey = \"ZigbeeTableState\";\nconst longLoadingTimeout = 15 * 1000;\n\nexport class ZigbeeTable extends Component<GlobalState, ZigbeeTableState> {\n    constructor(props) {\n        super(props);\n        this.state = {\n            sortDirection: \"desc\",\n            sortColumn: \"device.network_address\",\n            currentTime: Date.now(),\n            sortedTableData: []\n        };\n    }\n\n    restoreState(): void {\n        const { sortColumn, sortDirection } = this.state;\n\n        const storedState = localStorage.getItem(storeKey);\n        if (storedState) {\n            try {\n                const restored: Pick<ZigbeeTableState, \"sortDirection\" | \"sortColumn\"> = JSON.parse(storedState);\n                this.setState(restored);\n            } catch (e) {\n                new Notyf().error(e.toString());\n            }\n        } else {\n            this.onSortChange(sortColumn, sortDirection);\n        }\n    }\n\n    saveState = (): void => {\n        const { sortDirection, sortColumn } = this.state;\n        const storeData = {\n            sortDirection,\n            sortColumn\n        };\n        //in private mode localstorage access can throw exceptions\n        try {\n            localStorage.setItem(storeKey, JSON.stringify(storeData));\n        } catch (e) {\n            new Notyf().error(e.toString());\n        }\n    };\n    handleLongLoading = () => {\n        const { devices } = this.props;\n\n        if (devices.size == 0) {\n            const error = <Fragment>\n                <strong>Loading devices takes too long time.</strong>\n                <div>Consider reading <a href=\"https://www.zigbee2mqtt.io/information/frontend.html\">documentation</a></div>\n            </Fragment>;\n            this.setState({ error });\n        }\n    }\n    componentDidMount(): void {\n        setTimeout(this.handleLongLoading, longLoadingTimeout);\n        this.restoreState();\n    }\n\n    static getDerivedStateFromProps(props: Readonly<GlobalState>, state: ZigbeeTableState): Partial<ZigbeeTableState> {\n        const { sortColumn, sortDirection } = state;\n        const { devices, deviceStates } = props;\n        const tableData: ZigbeeTableData[] = [];\n        devices.forEach((device) => {\n            if (device.type !== \"Coordinator\") {\n                tableData.push({\n                    device,\n                    state: deviceStates.get(device.friendly_name)\n\n                });\n            }\n        });\n        return { sortedTableData: orderBy<ZigbeeTableData>(tableData, sortColumn, [sortDirection]) };\n    }\n\n\n    onSortChange = (column: SortColumn | SortColumn[], sortDir: SortDirection = undefined): void => {\n        const { sortColumn } = this.state;\n        let { sortDirection } = this.state;\n\n        if (isEqual(sortColumn, column)) {\n            if (sortDir) {\n                sortDirection = sortDir;\n            } else if (sortDirection == \"asc\") {\n                sortDirection = \"desc\";\n            } else {\n                sortDirection = \"asc\";\n            }\n        }\n\n        this.setState({ sortColumn: column, sortDirection }, this.saveState);\n    };\n\n    renderError() {\n        const { error } = this.state;\n        return (<div className=\"h-100 d-flex justify-content-center align-items-center\">\n            <div className=\"d-flex align-items-center\">\n                {error}\n            </div>\n        </div>);\n    }\n\n    render() {\n        const { error } = this.state;\n        const { devices } = this.props;\n        if (devices.size) {\n            return this.renderDevicesTable();\n        }\n        if (error) {\n            return this.renderError();\n        }\n        return (<div className=\"h-100 d-flex justify-content-center align-items-center\">\n            <div className=\"d-flex align-items-center\">\n                <strong>Loading, please wait.</strong>\n                <div className=\"spinner-border ml-2\" role=\"status\">\n                    <span className=\"sr-only\">Loading...</span>\n                </div>\n            </div>\n        </div>);\n    }\n\n\n    renderDevicesTable() {\n        const { bridgeInfo } = this.props;\n        const { sortColumn, sortDirection, sortedTableData } = this.state;\n        const { onSortChange } = this;\n        const lastSeenIsAvaliable = bridgeInfo?.config?.advanced?.elapsed || bridgeInfo?.config?.advanced?.last_seen != \"disable\";\n        return (\n            <table className={cx(\"table align-middle\", style.adaptive)}>\n                <thead>\n                    <tr className=\"text-nowrap\">\n                        <th>#</th>\n                        <th>Pic</th>\n                        <ActionTH<SortColumn> className={style[\"action-column\"]} column=\"device.friendly_name\"\n                            currentDirection={sortDirection} current={sortColumn}\n                            onClick={onSortChange}>Friendly name</ActionTH>\n                        <ActionTH<SortColumn> className={cx(style[\"action-column\"])} column=\"device.ieee_address\"\n                            currentDirection={sortDirection} current={sortColumn}\n                            onClick={onSortChange}>IEEE address</ActionTH>\n                        <ActionTH<SortColumn> className={cx(style[\"action-column\"])} column=\"device.definition.vendor\"\n                            currentDirection={sortDirection} current={sortColumn}\n                            onClick={onSortChange} title=\"definition.vendor\">Manufacturer</ActionTH>\n                        <ActionTH<SortColumn> className={style[\"action-column\"]} column=\"device.definition.model\"\n                            currentDirection={sortDirection} current={sortColumn}\n                            onClick={onSortChange}>Model</ActionTH>\n                        <ActionTH<SortColumn> className={style[\"action-column\"]} column=\"state.linkquality\"\n                            currentDirection={sortDirection} current={sortColumn}\n                            onClick={onSortChange}>LQI</ActionTH>\n                        <ActionTH<SortColumn> className={cx(style[\"action-column\"], { 'd-none': !lastSeenIsAvaliable })} column={[\"state.last_seen\", \"state.elapsed\"]}\n                            currentDirection={sortDirection} current={sortColumn}\n                            onClick={onSortChange}>Last seen</ActionTH>\n                        <ActionTH<SortColumn> className={style[\"action-column\"]} column=\"state.battery\"\n                            currentDirection={sortDirection} current={sortColumn}\n                            onClick={onSortChange}>Power</ActionTH>\n                        <th>&nbsp;</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {sortedTableData.map(({ device, state }, id) =>\n                        <tr key={device.friendly_name} title={state?.update?.state == \"available\" ? 'Avaliable OTA update' : device.definition?.description}>\n                            <td className=\"font-weight-bold\">{id + 1}</td>\n                            <td className={style[\"device-pic\"]}>\n                                <DeviceImage className={cx(style[\"device-image\"])} device={device} deviceStatus={state} />\n                            </td>\n                            <td>\n                                <Link to={genDeviceDetailsLink(device.ieee_address)}>{device.friendly_name}</Link>\n                            </td>\n                            <td title={toHex(device.network_address)}>{device.ieee_address}</td>\n                            <td className={cx(\"text-truncate\", \"text-nowrap\", \"position-relative\")}>{device.definition?.vendor ?? 'Unsupported'}</td>\n                            <td title={device?.definition?.description}>{device.definition?.model ?? 'Unsupported'}</td>\n                            <td>{state?.linkquality ?? \"N/A\"}</td>\n                            <td className={cx({ 'd-none': !lastSeenIsAvaliable })}>{lastSeen(state?.last_seen, state?.elapsed)}</td>\n                            <td className=\"text-left\">\n                                <PowerSource source={device.power_source} battery={state?.battery} />\n                            </td>\n                            <td>\n                                <DeviceControlGroup device={device} state={state} />\n                            </td>\n                        </tr>)}\n\n                </tbody>\n            </table>\n        );\n    }\n}\n\nconst mappedProps = [\"devices\", \"deviceStates\", \"bridgeInfo\"];\nconst ConnectedZigbeePage = connect<{}, ZigbeeTableState, GlobalState, {}>(mappedProps, actions)(ZigbeeTable);\nexport default ConnectedZigbeePage;\n","import React, { Component } from \"react\";\nimport { connect } from \"unistore/react\";\nimport actions from \"../../actions\";\nimport { GlobalState } from \"../../store\";\nimport cx from \"classnames\";\n\n// eslint-disable-next-line react/prefer-stateless-function\nexport class LogsPage extends Component<GlobalState, {}> {\n    render() {\n        const { logs } = this.props;\n        return <div className=\"container-fluid h-100 overflow-auto pt-2\">{\n            logs.map((l, idx) => <div key={idx}>\n                <span className={cx({\n                    'text-danger': l.level === 'error',\n                    'text-warning': l.level === 'warning',\n                    'text-info': l.level === 'info'\n                })} >{l.level.toUpperCase()}</span>:&nbsp;<code>{l.message}</code></div>)\n        }</div>\n    }\n}\n\nconst mappedProps = [\"logs\"];\n\nexport default connect<{}, {}, GlobalState, {}>(mappedProps, actions)(LogsPage);","import React from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport Button from \"./button\";\nimport store from \"../store\";\nimport { download } from \"../utils\";\n\ninterface ErrorBoundaryState {\n    error?: Error;\n}\ntype ErrorBoundaryProps = RouteComponentProps<{}>;\n\nexport default class ErrorBoundary extends React.Component<ErrorBoundaryProps, ErrorBoundaryState> {\n    state: Readonly<ErrorBoundaryState> = {};\n\n    static getDerivedStateFromError(error: Error) {\n        return { hasError: true, error };\n    }\n\n    donwloadState = () => {\n        download(store.getState(), 'state.json');\n    }\n\n    render() {\n        const { error } = this.state;\n        if (error) {\n            return <div className=\"container\">\n                <h1 className=\"text-danger\">Take screenshot of this page and attach it to github issue, additionally <Button<void> className=\"mt-2 btn btn-link\" onClick={() => this.donwloadState()}>download state</Button> and attach to the issue</h1>\n                <h2>{error.name}</h2>\n                <h3>{error.message}</h3>\n                <pre>{error.stack}</pre>\n            </div>\n\n        }\n        return this.props.children;\n    }\n\n    componentDidUpdate(prevProps: ErrorBoundaryProps) {\n        const { location: { pathname } } = this.props;\n        const { location: { pathname: prevPathname } } = prevProps;\n        if (prevPathname !== pathname) {\n            this.setState({ error: null });\n        }\n    }\n}\n\n","import \"./main.css\";\n\nimport \"notyf/notyf.min.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\n\n\nimport React, { Component, FunctionComponent } from 'react';\n\nimport ConnectedMap from \"./components/map\";\n\nimport {\n    Switch,\n    Route,\n    HashRouter\n} from \"react-router-dom\";\n\nimport ConnectedDevicePage from \"./components/device-page\";\nimport TouchlinkPage from \"./components/touchlink-page\";\n\nimport store from \"./store\";\nimport { Provider } from \"unistore/react\";\nimport api from './api';\n\n\nimport ConnectedSettingsPage from \"./components/settings\";\nimport NavBar from \"./components/navbar\";\nimport ConnectedGroupsPage from \"./components/groups\";\nimport ConnectedZigbeePage from \"./components/zigbee\";\nimport LogsPage from \"./components/logs-page\";\nimport ReactDOM from \"react-dom\";\nimport ErrorBoundary from \"./components/ErrorBoundary\";\n\n\nconst ConnectedDevicePageWrap: FunctionComponent<{ dev: string }> = ({ dev }) => (\n    <ConnectedDevicePageWrap dev={dev} />\n);\n\n\napi.connect();\n\n// eslint-disable-next-line react/prefer-stateless-function\nclass Main extends Component {\n    render() {\n        return (\n            <Provider store={store}>\n                <HashRouter>\n                    <NavBar />\n                    <Switch>\n                        <Route path=\"/map\" render={(props) => <ErrorBoundary {...props}><ConnectedMap /></ErrorBoundary>} />\n                        <Route path=\"/device/:dev/:tab?\" render={(props) => <ErrorBoundary {...props}><ConnectedDevicePage /></ErrorBoundary>} />\n                        <Route path=\"/settings/:tab?\" render={(props) => <ErrorBoundary {...props}><ConnectedSettingsPage /></ErrorBoundary>} />\n                        <Route path=\"/groups\" render={(props) => <ErrorBoundary {...props}><ConnectedGroupsPage /></ErrorBoundary>} />\n                        <Route path=\"/logs\" render={(props) => <ErrorBoundary {...props}><LogsPage /></ErrorBoundary>} />\n                        <Route path=\"/touchlink\" render={(props) => <ErrorBoundary {...props}><TouchlinkPage /></ErrorBoundary>} />\n                        <Route path=\"/\" render={(props) => <ErrorBoundary {...props}><ConnectedZigbeePage /></ErrorBoundary>} />\n                    </Switch>\n                </HashRouter>\n            </Provider >\n\n        );\n    }\n}\n\n\nReactDOM.render(<Main />, document.getElementById(\"root\"));\n"],"sourceRoot":""}