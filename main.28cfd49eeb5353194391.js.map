{"version":3,"sources":["webpack://zigbee2mqtt-frontend/./src/components/map/map.css?4978","webpack://zigbee2mqtt-frontend/./src/components/map/links.tsx","webpack://zigbee2mqtt-frontend/./src/utils.ts","webpack://zigbee2mqtt-frontend/./src/components/device-image/index.tsx","webpack://zigbee2mqtt-frontend/./src/components/map/nodes.tsx","webpack://zigbee2mqtt-frontend/./src/components/map/types.ts","webpack://zigbee2mqtt-frontend/./src/store.ts","webpack://zigbee2mqtt-frontend/./src/api.ts","webpack://zigbee2mqtt-frontend/./src/actions.ts","webpack://zigbee2mqtt-frontend/./src/components/button/index.tsx","webpack://zigbee2mqtt-frontend/./src/components/map/consts.ts","webpack://zigbee2mqtt-frontend/./src/components/spinner.tsx","webpack://zigbee2mqtt-frontend/./src/components/map/index.tsx","webpack://zigbee2mqtt-frontend/./src/components/modal/index.tsx","webpack://zigbee2mqtt-frontend/./src/components/device-control/index.tsx","webpack://zigbee2mqtt-frontend/./src/components/vendor-links/verndor-links.tsx","webpack://zigbee2mqtt-frontend/./src/components/power-source/index.tsx","webpack://zigbee2mqtt-frontend/./src/components/device-page/info.tsx","webpack://zigbee2mqtt-frontend/./src/components/device-picker/index.tsx","webpack://zigbee2mqtt-frontend/./src/components/endpoint-picker/index.tsx","webpack://zigbee2mqtt-frontend/./src/components/cluster-picker/index.tsx","webpack://zigbee2mqtt-frontend/./src/components/device-page/bind-row.tsx","webpack://zigbee2mqtt-frontend/./src/components/device-page/bind.tsx","webpack://zigbee2mqtt-frontend/./src/components/attribute-picker/index.tsx","webpack://zigbee2mqtt-frontend/./src/components/device-page/reporting-row.tsx","webpack://zigbee2mqtt-frontend/./src/components/device-page/reporting.tsx","webpack://zigbee2mqtt-frontend/./src/components/device-page/states.tsx","webpack://zigbee2mqtt-frontend/./src/types.ts","webpack://zigbee2mqtt-frontend/./src/components/device-page/type-guards.ts","webpack://zigbee2mqtt-frontend/./src/components/enum-editor/enum-editor.tsx","webpack://zigbee2mqtt-frontend/./src/components/range-editor/range-editor.tsx","webpack://zigbee2mqtt-frontend/./src/components/DisplayValue.tsx","webpack://zigbee2mqtt-frontend/./src/components/features/base.tsx","webpack://zigbee2mqtt-frontend/./src/components/features/numeric/numeric.tsx","webpack://zigbee2mqtt-frontend/./src/components/toggle/index.tsx","webpack://zigbee2mqtt-frontend/./src/components/features/binary/binary.tsx","webpack://zigbee2mqtt-frontend/./src/components/features/enum/enum.tsx","webpack://zigbee2mqtt-frontend/./src/components/features/light/light.tsx","webpack://zigbee2mqtt-frontend/./src/components/features/switch/switch.tsx","webpack://zigbee2mqtt-frontend/./src/components/features/cover/cover.tsx","webpack://zigbee2mqtt-frontend/./src/components/features/lock/lock.tsx","webpack://zigbee2mqtt-frontend/./src/components/color-editor/color-editor.tsx","webpack://zigbee2mqtt-frontend/./src/components/features/composite/color/color.tsx","webpack://zigbee2mqtt-frontend/./src/components/textual-editor/textual-editor.tsx","webpack://zigbee2mqtt-frontend/./src/components/features/textual/textual.tsx","webpack://zigbee2mqtt-frontend/./src/components/features/climate/climate.tsx","webpack://zigbee2mqtt-frontend/./src/components/features/composite/composite.tsx","webpack://zigbee2mqtt-frontend/./src/components/device-page/exposes.tsx","webpack://zigbee2mqtt-frontend/./src/components/device-page/clusters.tsx","webpack://zigbee2mqtt-frontend/./src/components/device-page/index.tsx","webpack://zigbee2mqtt-frontend/./src/components/touchlink-page/index.tsx","webpack://zigbee2mqtt-frontend/./src/components/universal-editor/index.tsx","webpack://zigbee2mqtt-frontend/./src/components/settings/index.tsx","webpack://zigbee2mqtt-frontend/./src/components/navbar/index.tsx","webpack://zigbee2mqtt-frontend/./src/hooks/useComponentVisible.tsx","webpack://zigbee2mqtt-frontend/./src/components/navbar/style.css?01da","webpack://zigbee2mqtt-frontend/./src/hooks/useOnClickOutside.tsx","webpack://zigbee2mqtt-frontend/./src/components/groups/RenameForm.tsx","webpack://zigbee2mqtt-frontend/./src/hooks/useInputChange.ts","webpack://zigbee2mqtt-frontend/./src/components/groups/index.tsx","webpack://zigbee2mqtt-frontend/./src/components/groups/style.css?e996","webpack://zigbee2mqtt-frontend/./src/components/zigbee/style.css?5857","webpack://zigbee2mqtt-frontend/./src/components/zigbee/ActionTH.tsx","webpack://zigbee2mqtt-frontend/./src/components/zigbee/index.tsx","webpack://zigbee2mqtt-frontend/./src/components/logs-page/index.tsx","webpack://zigbee2mqtt-frontend/./src/components/ErrorBoundary.tsx","webpack://zigbee2mqtt-frontend/./src/index.tsx"],"names":["Link","props","linkType","id","rest","className","strokeWidth","fill","LinkLabel","link","linkqualities","join","links","ref","useRef","useLayoutEffect","current","selectAll","data","length","map","sourceIeeeAddr","targetIeeeAddr","key","xlinkHref","genDeviceDetailsLink","deviceIdentifier","toHex","input","padding","repeat","toString","substr","toUpperCase","sanitizeGraph","inGraph","nodes","Map","forEach","node","ieeeAddr","sort","a","b","relationship","src","source","dst","target","linkId","repeatedLink","get","type","push","linkquality","relationships","set","console","warn","Array","from","values","randomString","len","Math","random","replacer","value","originalObject","this","dataType","entries","serialize","JSON","stringify","download","filename","blob","Blob","url","window","URL","createObjectURL","document","createElement","body","appendChild","href","setTimeout","click","revokeObjectURL","removeChild","getEndpoints","obj","endpoints","keys","members","g","endpoint","genericDeiviceImageFallback","device","AVALIABLE_GENERATORS","deviceName","definition","model","replace","modelName","model_id","useState","imageGenerators","setimageGenerators","deviceStatus","onImageError","newGenerators","shift","otaSpinner","update","state","title","interviewSpinner","interviewing","unseccessfullInterview","interview_completed","onError","getStarShape","innerCircleArms","styleStarWidth","innerOuterRadiusRatio","centerX","centerY","innerRadius","outerRadius","angle","PI","totalArms","points","i","r","cos","sin","calcStarPoints","createRef","onMouseOut","onMouseOver","onDblClick","componentDidMount","render","deviceType","cn","onDoubleClick","width","height","friendlyName","Component","toggle","updateDrag","simulation","dragForce","drag","on","event","d","active","alphaTarget","restart","fx","x","fy","y","undefined","call","componentDidUpdate","Node","ZigbeeRelationship","str","initialState","parse","TOKEN_LOCAL_STORAGE_ITEM_NAME","AUTH_FLAG_LOCAL_STORAGE_ITEM_NAME","notyf","blacklistedMessages","showNotity","msg","message","level","status","isResponseWithStatus","error","success","requests","transactionNumber","send","topic","payload","debug","startsWith","transactionRndPreffix","promise","Promise","resolve","reject","socket","transaction","urlProvider","token","localStorage","getItem","prompt","setItem","searchParams","append","procsessBridgeMessage","bridgeConfig","bridgeInfo","dev","Object","ieee_address","devices","groups","newLogs","slice","logs","every","val","test","response","networkGraphIsLoading","networkGraph","payloadData","touchlinkScanInProgress","touchlinkDevices","found","touchlinkIdentifyInProgress","touchlinkResetInProgress","resolvePromises","onClose","e","code","removeItem","location","reload","onMessage","deviceStates","newDeviceStates","connect","addEventListener","delete","apiUrl","host","pathname","Api","protocol","store","addBind","to","clusters","bindParams","removeBind","setStateValue","name","setDeviceState","getDeviceState","setPermitJoin","permit","friendly_name","renameDevice","homeassistantRename","removeDevice","force","block","configureDevice","networkMapRequest","setState","routes","createGroup","group","removeGroup","addDeviceToGroup","removeDeviceFromGroup","renameGroup","oldName","newName","touchlinkScan","touchlinkIdentify","touchlinkReset","checkOTA","updateOTA","updateConfigValue","exportState","configureReport","config","onClick","item","promt","confirmed","confirm","children","linkTypes","NeigbhorIsParent","NeigbhorIsAChild","NeigbhorIsASibling","NoneOfTheAbove","role","s","t","atan2","parentOrChild","linkStrregth","includes","distancesMap","BrokenLink","Router2Router","Coordinator2Router","Coordinator2EndDevice","EndDevice2Router","getDistance","ticked","transform","linkLabel","apply","x1","y1","x2","slope","attr","computeLink","applyX","applyY","processHighlights","selectedNode","linkedByIndex","Set","n","add","l","neighboring","has","computeOpacity","style","o","svgRef","visibleLinks","legendIsVisible","updateNodes","filter","concat","everything","extent","scaleExtent","zoomHandler","onRequestClick","onLinkTypeFilterChange","stateVisibleLinks","checked","inValue","parseInt","v","updateForces","distance","strength","initPage","getBoundingClientRect","renderMap","viewBox","renderMessage","renderMapControls","onChange","htmlFor","Fragment","MapComponent","ModalHeader","ModalBody","ModalFooter","modalShow","display","openModal","bind","closeModal","isOpen","prevProps","isRenameModalOpened","isDeviceRemovalModalOpened","renameParams","isHassRename","removeParams","onRenameClick","onRemoveClick","toggleRenameModal","toggleDeviceRemovalModal","onHassEntityIdChange","onFriendlyNameChange","onDeviceRemovalParamChange","renderRenameButton","homeassistant","renderDeviceRemovalButton","DeviceControlGroup","normalizeModel","re","RegExp","VendorLink","supported","encodeURIComponent","vendor","toLowerCase","rel","ModelLink","acnchor","battery","batteryLow","showLevel","batteryClass","markdownLinkRegex","displayProps","label","if","result","exec","description","content","supports","network_address","power_source","battery_low","secs","prop","progress","remaining","floor","DeviceInfo","onSelect","find","options","hidden","devicesOptions","getDeviceDisplayName","groupOptions","disabled","hasOnlyOneEP","ep","unshift","PickerType","clusterDescriptions","genPowerCfg","genScenes","genOnOff","genLevelCtrl","lightingColorCtrl","closuresWindowCovering","genMultistateInput","genGroups","genOta","touchlink","genIdentify","msTemperatureMeasurement","msIlluminanceMeasurement","msRelativeHumidity","msPressureMeasurement","msSoilMoisture","isClusterGroup","pickerId","pickerType","MULTIPLE","renderMultiPicker","renderSinglePicker","cluster","defaultProps","stateRule","setSourceEp","sourceEp","setDestination","destination","setDestinationEp","destinationEp","setClusters","onBindOrUnBindClick","action","onUnBind","onBind","getBidningParams","getDerivedStateFromProps","targeDevice","isValidRule","valid","idx","targetType","sourceEndpoints","rule","getTarget","destinationEndpoints","possibleClusters","destEndpoint","output","scope","isNew","rule2key","bidingRules","onBindClick","onUnBindClick","bindings","targetId","convertBidningsIntoNiceStructure","Date","now","Bind","attrs","clusterDefinition","attributes","getClusters","availableClusters","requiredRuleFileds","field","setCluster","setAttribute","attribute","changeHandler","applyRule","onApply","disableRule","maximum_report_interval","SINGLE","minimum_report_interval","required","placeholder","reportable_change","reportingRules","reportings","configured_reportings","reportingRule","Reporting","deviceState","States","FeatureAccessMode","isBinaryFeature","feature","isNumericFeature","isTextualFeature","isEnumFeature","isLightFeature","isSwitchFeature","isCoverFeature","isLockFeature","isCompositeFeature","isColorFeature","isClimateFeature","isPrimitive","step","min","max","unit","steps","currentValue","setCurrentValue","useEffect","showRange","valueAsNumber","onMouseUp","onBlur","DisplayValue","BaseViewer","property","NoAccessError","access","presets","valueMax","valueMin","ACCESS_WRITE","ACCESS_STATE","valueOn","valueOff","valueExists","stepsConfiguration","brightness","inputY","yRange","xRange","xMin","xMax","yMin","kelvin","position","tilt","toRGB","sourceFormat","X","Z","Y","hue","saturation","rgbToTargetFormat","targetFormat","hex","pridePallete","format","currentColor","setCurrentColor","backgroundColor","features","innerFeature","color","FeatureWrapper","onRead","isColor","isReadable","ACCESS_READ","onApplyClick","renderFeature","genericParams","wrapperParams","Composite","groupedFeatures","f","epName","featuresGroup","exposes","Exposes","ClustersComp","tree","epData","renderContent","match","params","tab","activeClassName","devicePageWithRouter","DevicePage","onIdentifyClick","onResetClick","renderTouchlinkDevices","touchlinkInProgress","touchlinkDevice","channel","renderNoDevices","TouchlinkPage","togglePairs","BluringInput","internalValue","setInternalValue","isToggleParameter","logLevelSetting","path","settings","updateConfig","renderSwitcher","renderSettings","renderBridgeInfo","renderAbout","zigbee2mqttVersion","version","zigbee2mqttCommit","commit","coordinator","meta","revision","setting","SettingsPageWithRouter","SettingsPage","urls","exact","StartStopJoinButton","initialIsVisible","isComponentVisible","setIsComponentVisible","handleHideDropdown","handleClickOutside","contains","removeEventListener","useComponentVisible","selectedRouter","setSelectedRouter","routers","selectAndHide","permit_join","show","navbarIsVisible","setnavbarIsVisible","handler","listener","useOnClickOutside","RenameGroupForm","onRename","modalIsOpened","setModalIsOpened","setInput","currentTarget","useInputChange","renameGroupForm","handleInputChange","getDeviceObj","groupAddress","rowNumber","onRemove","deviceFriendlyName","groupMemebershipInfo","DeviceGroupRow","onSubmit","onDeviceSelect","onEpChange","deviceObj","newGroupName","newGroupId","onGroupCreateSubmit","groupFriendlyName","renderGroupCreationForm","renderGroups","DeviceGroup","AddDeviceToGroup","reverse","GroupsPage","preventDefault","stopPropagation","column","renderArrow","currentDirection","storeKey","saveState","storeData","sortDirection","sortColumn","handleLongLoading","size","onSortChange","sortDir","currentTime","sortedTableData","restoreState","storedState","restored","tableData","renderError","renderDevicesTable","lastSeenIsAvaliable","advanced","elapsed","last_seen","renderDevicesTableHeader","lastSeen","diff","ZigbeeTable","ALL","Highlighted","text","highlight","trim","regex","parts","split","part","search","logLevel","renderSearch","logLevels","_search","LogsPage","donwloadState","getDerivedStateFromError","hasError","stack","Main","getElementById"],"mappings":"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","file":"main.28cfd49eeb5353194391.js","sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"_1TK12NlMUcpu0IZGw5KG9F\",\"img\":\"-vLZFy4QqTaA5Lql2j7WL\",\"node\":\"_3VABKCYaUBV0N55MRkEiCg\",\"link\":\"_2MMYgLsCQ5mPT-AJSdZ4Uz\",\"linkLabel\":\"EFSV-Lj6sJyoW14QA3ig0\",\"links\":\"_3m9RTJKJZqiJx1UmLLzi4\",\"nodes\":\"_1RxBn1bAxqYxk5W0mPwZMS\",\"EndDevice\":\"JhUbmgThutQMk8laPcsxg\",\"Coordinator\":\"_3F14ZWmKtSPPHai2y_MRRj\",\"Router\":\"_1I1ZcuMgRbn_B5HXF9Z2mw\",\"BrokenLink\":\"_3FeEi6FG3R9pYpboNF-OBu\",\"Coordinator2Router\":\"_2cFMSmedVqD5hjj2K7XpsQ\",\"Router2Coordinator\":\"_3KnTt0kzrMwLh56UMBBqwe\",\"Router2Router\":\"_3HeSfltIQjH_mQxhaoHnCs\",\"Coordinator2EndDevice\":\"_2zGuiMZ7r-Z4mfRvCVQEAp\",\"EndDevice2Coordinator\":\"_35uGMHQCj1Sx5FyJk5-Ec1\",\"Router2EndDevice\":\"_1nD8O-bIFFZWctv6x4zD8j\",\"EndDevice2Router\":\"_2tVxslI3DwN1gBA6s3V24b\",\"foreignObject\":\"_1PgTRqMkYD7R1RqIF7R5ni\",\"offline\":\"_3goiiMv86rV5wazL6jDpjU\",\"controls\":\"RIAc5GeET4TLTKyCVy7yK\"};","import { LinkI } from \"./types\";\nimport React, { FunctionComponent, useLayoutEffect, useRef } from \"react\";\nimport style from \"./map.css\";\nimport cx from \"classnames\";\nimport { select } from \"d3-selection\";\n\ninterface LinkProps {\n    link: LinkI;\n    id?: string;\n}\n\nconst Link: FunctionComponent<LinkProps> = props => {\n    const { link: { linkType }, id, ...rest } = props;\n    return <path\n        id={id}\n        className={cx(style.link, style[linkType])}\n        strokeWidth={1}\n        fill=\"transparent\"\n        {...rest}\n    />;\n};\n\ninterface LinkLabelProps extends LinkProps {\n    xlinkHref: string;\n}\n\nconst LinkLabel: FunctionComponent<LinkLabelProps> = props => {\n    const { link } = props;\n    return <text className={style.linkLabel}>{link.linkqualities.join('/')}</text>;\n};\n\ninterface LinksPros {\n    links: LinkI[];\n}\n\nconst Links: FunctionComponent<LinksPros> = props => {\n    const { links } = props;\n    const ref = useRef<SVGGElement>();\n    useLayoutEffect(() => {\n        select(ref.current).selectAll(`.${style.link}`).data(links);\n        select(ref.current).selectAll(`.${style.linkLabel}`).data(links);\n    }, [links.length]);\n\n    return (\n        <g ref={ref} className={style.links}>\n            {links.map((link: LinkI) => <Link\n                id={`edgepath${link.sourceIeeeAddr}-${link.targetIeeeAddr}-${link.linkType}`}\n                key={`link${link.sourceIeeeAddr}-${link.targetIeeeAddr}-${link.linkType}`}\n                link={link}\n            />)}\n            {links.map((link: LinkI) => (\n                <LinkLabel\n                    xlinkHref={`#edgepath${link.sourceIeeeAddr}-${link.targetIeeeAddr}-${link.linkType}`}\n                    key={`label${link.sourceIeeeAddr}-${link.targetIeeeAddr}-${link.linkType}`}\n                    link={link}\n                />\n            ))}\n        </g>\n    );\n};\nexport default Links;\n","\nimport { Device, Endpoint } from \"./types\";\nimport { GraphI, LinkI, NodeI } from \"./components/map/types\";\nimport { format, TDate } from 'timeago.js';\nimport { Group } from \"./store\";\n\nexport const genDeviceDetailsLink = (deviceIdentifier: string | number): string => (`/device/${deviceIdentifier}`);\n\nexport const toHex = (input: number, padding = 4): string => {\n    return `0x${(`${'0'.repeat(padding)}${input.toString(16)}`).substr(-1 * padding).toUpperCase()}`;\n};\n\n\nexport const toHHMMSS = (secs: number): string => {\n    if (!secs) {\n        return 'N/A';\n    }\n    const hours = Math.floor(secs / 3600);\n    const minutes = Math.floor(secs / 60) % 60;\n    const seconds = Math.floor(secs % 60);\n\n    return [hours, minutes, seconds]\n        .map(v => v < 10 ? `0${v}` : v)\n        .filter((v, i) => v !== \"00\" || i > 0)\n        .join(\":\");\n};\n\nexport type CallbackHandler<T> = (err: boolean, res: T) => void;\nexport interface ApiResponse<T> {\n    success: boolean;\n    result: T;\n}\n\nexport const lastSeen = (lastSeen: string | number, elapsed: number): string => {\n    if (!lastSeen && !elapsed) {\n        return \"N/A\";\n    }\n    let diff: TDate;\n    if (elapsed !== undefined) {\n        diff = Date.now() - elapsed;\n    } else {\n        if (typeof lastSeen === \"string\") {\n            diff = Date.parse(lastSeen);\n        } else {\n            diff = new Date(lastSeen);\n        }\n    }\n    return format(diff);\n};\n\n\nexport const sanitizeGraph = (inGraph: GraphI): GraphI => {\n    const nodes = {};\n    const links = new Map<string, any>();\n\n    inGraph.nodes.forEach(node => {\n        nodes[node.ieeeAddr] = node;\n    });\n\n    inGraph.links.sort((a, b) => a.relationship - b.relationship).forEach(link => {\n        const src: NodeI = nodes[link.source.ieeeAddr];\n        const dst: NodeI = nodes[link.target.ieeeAddr];\n        if (src && dst) {\n            const linkId = [link.source.ieeeAddr, link.target.ieeeAddr].sort().join('');\n            const repeatedLink = links.get(linkId);\n            const linkType = [src.type, dst.type].join('2');\n            if (repeatedLink) {\n                repeatedLink.linkqualities.push(link.linkquality);\n                repeatedLink.relationships.push(link.relationship);\n            } else {\n                links.set(linkId, { ...link, ...{ source: link.source.ieeeAddr, linkType, target: link.target.ieeeAddr, linkqualities: [link.linkquality], relationships: [link.relationship]} });\n            }\n        } else {\n            console.warn(\"Broken link\", link);\n        }\n    });\n\n    inGraph.links = Array.from(links.values());\n    return inGraph;\n};\n\nexport const getDeviceDisplayName = (device: Device): string => {\n    return `${device.friendly_name} ${device.definition?.model ? `(${device.definition?.model})` : ''}`;\n};\n\nexport const randomString = (len: number): string => Math.random().toString(36).substr(2, len);\n\nexport const isSecurePage = (): boolean => location.protocol === 'https:';\n\n\nexport const scale = (inputY: number, yRange: Array<number>, xRange: Array<number>): number => {\n    const [xMin, xMax] = xRange;\n    const [yMin, yMax] = yRange;\n\n    const percent = (inputY - yMin) / (yMax - yMin);\n    const outputX = percent * (xMax - xMin) + xMin;\n\n    return outputX;\n};\n\n\n\n\nfunction replacer(key: string, value: object) {\n    const originalObject = this[key];\n    if (originalObject instanceof Map) {\n        return {\n            dataType: 'Map',\n            value: Array.from(originalObject.entries()),\n        };\n    } else {\n        return value;\n    }\n}\n\nfunction reviver(key: string, value: { dataType: string; value: Iterable<readonly [unknown, unknown]>; }) {\n    if (typeof value === 'object' && value !== null) {\n        if (value.dataType === 'Map') {\n            return new Map(value.value);\n        }\n    }\n    return value;\n}\n\nexport const serialize = (data: object) => {\n    return JSON.stringify(data, replacer);\n}\n\nexport const deSerialize = (str: string) => {\n    return JSON.parse(str, reviver);\n}\n\n\nexport const download = (data: object, filename: string): void => {\n    const blob = new Blob([serialize(data)], { type: 'octet/stream' });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    document.body.appendChild(a);\n    a.href = url;\n    a.download = filename;\n\n    setTimeout(() => {\n        a.click();\n        window.URL.revokeObjectURL(url);\n        document.body.removeChild(a);\n    }, 1);\n\n}\n\nexport const sanitizeZ2MDeviceName = (deviceName: string): string => deviceName?.replace(/:|\\s|\\//g, \"-\");\n\n\nexport const getEndpoints = (obj: Device | Group): Endpoint[] => {\n    if (!obj) {\n        return []\n    } else if ((obj as Device).endpoints) {\n        return Array.from((obj as Device).endpoints.keys());\n    } else if ((obj as Group).members) {\n        return (obj as Group).members.map(g => g.endpoint);\n    }\n    return [];\n}","import React, { FunctionComponent, ImgHTMLAttributes, useState } from \"react\";\nimport genericDevice from \"../../images/generic-zigbee-device.png\";\nimport { Device, DeviceState } from \"../../types\";\nimport cx from \"classnames\";\nimport { sanitizeZ2MDeviceName } from \"../../utils\";\ntype DeviceImageProps = {\n    device: Device;\n    deviceStatus?: DeviceState;\n    type?: \"img\" | \"svg\";\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst genericDeiviceImageFallback = (device: Device): string => genericDevice;\nconst genSlsDeviceImageUrlZ2M = (device: Device): string => `https://www.zigbee2mqtt.io/images/devices/${sanitizeZ2MDeviceName(device?.definition?.model)}.jpg`;\n\nconst sanitizeModelIDForImageUrl = (modelName: string): string => modelName?.replace(\"/\", \"_\");\n\nexport const genSlsDeviceImageUrlSLS = (device: Device): string => (`https://slsys.github.io/Gateway/devices/png/${sanitizeModelIDForImageUrl(device.model_id)}.png`);\n\n\nconst AVALIABLE_GENERATORS = [\n    genSlsDeviceImageUrlZ2M, genSlsDeviceImageUrlSLS, genericDeiviceImageFallback\n]\n\nconst DeviceImage: FunctionComponent<DeviceImageProps & ImgHTMLAttributes<HTMLDivElement | SVGImageElement>> = (props) => {\n    const [imageGenerators, setimageGenerators] = useState(AVALIABLE_GENERATORS);\n    const { device, deviceStatus, type = \"img\", className, ...rest } = props;\n    let src = genericDeiviceImageFallback(device);\n    if (device?.definition?.model && imageGenerators.length) {\n        src = imageGenerators[0](device);\n    }\n\n    const onImageError = () => {\n        const newGenerators = [...imageGenerators];\n        newGenerators.shift();\n        setimageGenerators(newGenerators);\n    };\n    const otaSpinner = deviceStatus?.update?.state === \"updating\" ? <i title=\"Updating firmware\" className=\"fa fa-sync fa-spin position-absolute bottom-0 right-0\" /> : null;\n    const interviewSpinner = device.interviewing ? <i title=\"Interviewing\" className=\"fa fa-spinner fa-spin position-absolute bottom-0 right-0\" /> : null;\n    const unseccessfullInterview = !device.interviewing && !device.interview_completed ? <i title=\"Interview failed\" className=\"fa fa-exclamation-triangle position-absolute top-0 right-0 text-danger\" /> : null;\n    switch (type) {\n        case \"svg\":\n            return src ? <image {...rest} onError={onImageError} href={src} /> : null;\n        case \"img\":\n        default:\n            return src ? <div className={cx(className, \"position-relative\")} {...rest}>\n                <img onError={onImageError} src={src} className={\"position-relative\"} />\n                {interviewSpinner}\n                {otaSpinner}\n                {unseccessfullInterview}\n            </div> : null;\n    }\n}\nexport default DeviceImage;","import React, { Component, createRef, RefObject } from \"react\";\nimport { LinkI, NodeI } from \"./types\";\nimport cx from \"classnames\";\nimport style from \"./map.css\";\nimport { MouseEventsResponderNode } from \".\";\nimport { Device } from \"../../types\";\nimport DeviceImage from \"../device-image\";\nimport { Simulation } from \"d3-force\";\nimport { select, selectAll } from \"d3-selection\";\nimport { drag } from \"d3-drag\";\n\n\nconst calcStarPoints = (\n    centerX: number,\n    centerY: number,\n    innerCircleArms: number,\n    innerRadius: number,\n    outerRadius: number\n): string => {\n    const angle = Math.PI / innerCircleArms;\n    const angleOffsetToCenterStar = 60;\n    const totalArms = innerCircleArms * 2;\n    let points = \"\";\n    for (let i = 0; i < totalArms; i++) {\n        const isEvenIndex = i % 2 == 0;\n        const r = isEvenIndex ? outerRadius : innerRadius;\n        const currX = centerX + Math.cos(i * angle + angleOffsetToCenterStar) * r;\n        const currY = centerY + Math.sin(i * angle + angleOffsetToCenterStar) * r;\n        points += `${currX}, ${currY} `;\n    }\n    return points;\n};\n\n\nexport const getStarShape = (innerCircleArms: number, styleStarWidth: number, innerOuterRadiusRatio: number): string => {\n    return calcStarPoints(\n        15,\n        15,\n        innerCircleArms,\n        styleStarWidth,\n        innerOuterRadiusRatio\n    );\n};\n\ninterface NodeProps extends MouseEventsResponderNode {\n    node: NodeI;\n}\n\nconst offlineTimeout = 3600 * 2;\n\nexport const isOnline = (device: Device): boolean => {\n\n    return true; //Date.now() - device.lastSeen < offlineTimeout;\n};\n\nclass Node extends Component<NodeProps, {}> {\n    ref = createRef<SVGPolygonElement | SVGCircleElement | SVGImageElement>();\n\n    componentDidMount(): void {\n        const { current } = this.ref;\n        const { node } = this.props;\n        select(current as SVGElement).data([node]);\n    }\n\n    onMouseOut = (): void => {\n        const { node, onMouseOut } = this.props;\n        onMouseOut && onMouseOut(node, this.ref.current);\n    };\n\n    onMouseOver = (): void => {\n        const { node, onMouseOver } = this.props;\n        onMouseOver && onMouseOver(node, this.ref.current);\n    };\n\n    onDblClick = (): void => {\n        const { node, onDblClick } = this.props;\n        onDblClick && onDblClick(node, this.ref.current);\n    };\n\n    render() {\n\n        const { node } = this.props;\n        const { onMouseOver, onMouseOut, onDblClick } = this;\n        const deviceType = node.type as string;\n        const cn = cx(style.node, style[deviceType]); //{ [style.offline]: !isOnline(node.device, time) }\n        return (<g className={cn}\n            ref={this.ref as RefObject<SVGImageElement>}\n            onMouseOver={onMouseOver}\n            onMouseOut={onMouseOut}\n            onDoubleClick={onDblClick}\n        >\n            {\n                node.type === \"Coordinator\" ? (\n                    <polygon\n                        points={getStarShape(5, 5, 14) as string}\n                    />\n                ) : (\n                        <DeviceImage\n                            type=\"svg\"\n                            width={32}\n                            height={32}\n                            device={node as unknown as Device}\n                            className={`${style.img}`}\n                        />\n                    )\n            }\n            <text>{node.friendlyName}</text>\n\n        </g>);\n\n    }\n}\n\ninterface NodesProps extends MouseEventsResponderNode {\n    nodes: NodeI[];\n    simulation: Simulation<NodeI, LinkI>;\n}\n\ntype NodesState = {\n    toggle: boolean;\n}\n\nexport default class Nodes extends Component<NodesProps, NodesState> {\n    state: Readonly<NodesState> = {\n        toggle: false\n    }\n    updateDrag(): void {\n        const { simulation } = this.props;\n        const dragForce = drag<SVGCircleElement, NodeI>()\n            .on(\"start\", (event, d) => {\n                if (!event.active) {\n                    simulation.alphaTarget(0.3).restart();\n                }\n                d.fx = d.x;\n                d.fy = d.y;\n            })\n            .on(\"drag\", (event, d) => {\n                d.fx = event.x;\n                d.fy = event.y;\n            })\n            .on(\"end\", (event, d) => {\n                if (!event.active) {\n                    simulation.alphaTarget(0);\n                }\n                d.fx = undefined;\n                d.fy = undefined;\n            });\n\n\n        selectAll<SVGCircleElement, NodeI>(`.${style.node}`)\n            .call(dragForce);\n    }\n\n    componentDidMount(): void {\n        this.updateDrag();\n    }\n\n    componentDidUpdate(): void {\n        this.updateDrag();\n    }\n\n   \n\n    render() {\n        const { nodes, onMouseOut, onMouseOver } = this.props;\n        return (\n            <g className={style.nodes}>\n                {nodes.map((node: NodeI) => (\n                    <Node\n                        onMouseOut={onMouseOut}\n                        onMouseOver={onMouseOver}\n                        key={node.ieeeAddr}\n                        node={node}\n                    />\n                ))}\n            </g>\n        );\n    }\n}\n","import { SimulationLinkDatum, SimulationNodeDatum } from \"d3-force\";\nimport { DeviceType, DeviceDefinition } from \"../../types\";\n\nexport interface NodeI extends SimulationNodeDatum {\n    ieeeAddr: string;\n    friendlyName?: string;\n    type?: DeviceType;\n    failed?: string[];\n    lastSeen?: number;\n    definition?: DeviceDefinition;\n}\n\nexport type LinkType =\n    \"Coordinator2EndDevice\" |\n    \"EndDevice2Coordinator\" |\n\n    \"Coordinator2Router\" |\n    \"Router2Coordinator\" |\n\n    \"EndDevice2Router\" |\n    \"Router2EndDevice\" |\n\n    \"Router2Router\" |\n\n    \"BrokenLink\";\n\nexport interface Source extends SimulationNodeDatum {\n    ieeeAddr: string;\n}\n\nexport interface Target extends SimulationNodeDatum {\n    ieeeAddr: string;\n}\nexport enum ZigbeeRelationship {\n    NeigbhorIsParent,\n    NeigbhorIsAChild,\n    NeigbhorIsASibling,\n    NoneOfTheAbove,\n    NeigbhorIsAFormerChild\n}\n\nexport interface LinkI extends SimulationLinkDatum<NodeI> {\n    source: Source;\n    target: Target;\n    linkquality: number;\n    linkqualities: number[];\n    depth: number;\n    routes: unknown[];\n    sourceIeeeAddr: string;\n    targetIeeeAddr: string;\n    sourceNwkAddr: number;\n    lqi: number;\n    relationship: ZigbeeRelationship;\n    relationships: ZigbeeRelationship[];\n    linkType: LinkType;\n}\n\nexport interface GraphI {\n    nodes: NodeI[];\n    links: LinkI[];\n}\n","import createStore from \"unistore\";\nimport devtools from \"unistore/devtools\";\nimport initialState from './initialState.txt';\n\n\nimport { Device, DeviceState, BridgeConfig, BridgeInfo, TouchLinkDevice } from \"./types\";\nimport { GraphI } from \"./components/map/types\";\nimport { deSerialize } from \"./utils\";\n\nexport interface GroupAddress {\n    endpoint: number;\n    ieee_address: string;\n}\n\nexport interface Group {\n    id: number;\n    friendly_name: string;\n    members: GroupAddress[];\n}\n\nexport interface LogMessage {\n    level: \"error\" | \"info\" | \"warning\";\n    message: string;\n}\n\nexport interface GlobalState {\n    devices: Map<string, Device>;\n    deviceStates: Map<string, DeviceState>;\n    touchlinkDevices: TouchLinkDevice[];\n    touchlinkScanInProgress: boolean;\n    touchlinkIdentifyInProgress: boolean;\n    touchlinkResetInProgress: boolean;\n    networkGraph: GraphI;\n    networkGraphIsLoading: boolean;\n    groups: Group[];\n    bridgeConfig: BridgeConfig;\n    bridgeInfo: BridgeInfo;\n    logs: LogMessage[];\n};\nconst _store = createStore(deSerialize(initialState) as GlobalState);\nconst store = process.env.NODE_ENV === 'production' ?  _store : devtools(_store);\n\nexport default store;","import ReconnectingWebSocket from \"reconnecting-websocket\";\nimport store, { Group, LogMessage } from \"./store\";\nimport { BridgeConfig, BridgeInfo, TouchLinkDevice, Device, DeviceState } from './types';\nimport { sanitizeGraph, isSecurePage, randomString } from \"./utils\";\nimport { Notyf } from \"notyf\";\nimport { GraphI } from \"./components/map/types\";\n\nimport orderBy from \"lodash/orderBy\";\n\n\nconst MAX_LOGS_RECORDS_IN_BUFFER = 100;\nconst TOKEN_LOCAL_STORAGE_ITEM_NAME = \"z2m-token\";\nconst AUTH_FLAG_LOCAL_STORAGE_ITEM_NAME = \"z2m-auth\";\nconst UNAUTHORIZED_ERROR_CODE = 4401;\n\nconst notyf = new Notyf();\n\ninterface Message {\n    topic: string;\n    payload: string | object | object[] | string[];\n}\n\nconst blacklistedMessages: RegExp[] = [\n    /MQTT publish/\n];\n\nconst isLogMessage = (msg: LogMessage | ResponseWithStatus): msg is LogMessage => {\n    return (msg as LogMessage).level !== undefined && (msg as LogMessage).message !== undefined;\n}\n\nconst isResponseWithStatus = (msg: LogMessage | ResponseWithStatus): msg is ResponseWithStatus => {\n    return (msg as ResponseWithStatus).status !== undefined;\n}\n\nconst showNotity = (data: LogMessage | ResponseWithStatus): void => {\n    let message = \"\", level = \"\";\n    if (isLogMessage(data)) {\n        message = data.message;\n        level = data.level;\n    } else if (isResponseWithStatus(data)) {\n        switch (data.status) {\n            case \"error\":\n                level = \"error\";\n                message = data.error;\n                break;\n            default:\n                break;\n        }\n    }\n\n    switch (level) {\n        case \"error\":\n        case \"warning\":\n            notyf.error(message);\n            break;\n        case \"info\":\n            notyf.success(message);\n            break;\n\n        default:\n            break;\n    }\n};\n\ninterface ResponseWithStatus {\n    status: \"ok\" | \"error\";\n    data: unknown;\n    error?: string;\n    transaction?: string;\n}\ninterface TouchllinkScanResponse extends ResponseWithStatus {\n    data: {\n        found: TouchLinkDevice[];\n    };\n}\ninterface Callable {\n    (): void;\n}\nclass Api {\n    url: string;\n    socket: ReconnectingWebSocket;\n    requests: Map<string, [Callable, Callable]> = new Map<string, [Callable, Callable]>();\n    transactionNumber = 1;\n    transactionRndPreffix: string;\n    constructor(url: string) {\n        this.url = url;\n        this.transactionRndPreffix = randomString(5);\n    }\n    send = (topic: string, payload: object): Promise<void> => {\n        console.debug(\"Calling API\", { topic, payload });\n\n        if (topic.startsWith('bridge/request/')) {\n            const transaction = `${this.transactionRndPreffix}-${this.transactionNumber++}`;\n            const promise = new Promise<void>((resolve, reject) => {\n                this.requests.set(transaction, [resolve, reject]);\n            });\n            this.socket.send(JSON.stringify({ topic, payload: { ...payload, transaction } }));\n            return promise;\n        } else {\n            this.socket.send(JSON.stringify({ topic, payload }));\n            return Promise.resolve();\n        }\n    }\n\n    urlProvider = async () => {\n        const url = new URL(this.url)\n        let token = localStorage.getItem(TOKEN_LOCAL_STORAGE_ITEM_NAME);\n        const authRequired = !!localStorage.getItem(AUTH_FLAG_LOCAL_STORAGE_ITEM_NAME);\n        if (authRequired) {\n            if (!token) {\n                token = prompt(\"enter your z2m admin token\");\n                localStorage.setItem(TOKEN_LOCAL_STORAGE_ITEM_NAME, token);\n            }\n            url.searchParams.append(\"token\", token);\n        }\n        return url.toString();\n    }\n\n    connect(): void {\n        this.socket = new ReconnectingWebSocket(this.urlProvider);\n        this.socket.addEventListener(\"message\", this.onMessage);\n        this.socket.addEventListener(\"close\", this.onClose);\n    }\n    private procsessBridgeMessage = (data: Message): void => {\n        switch (data.topic) {\n            case \"bridge/config\":\n                store.setState({\n                    bridgeConfig: data.payload as BridgeConfig\n                });\n                break;\n\n            case \"bridge/info\":\n                store.setState({\n                    bridgeInfo: data.payload as BridgeInfo\n                });\n                break;\n\n            case \"bridge/devices\":\n                {\n                    const devicesMap = new Map();\n                    orderBy((data.payload as Device[]), \"friendly_name\").forEach((device) => {\n                        const dev = { ...device };\n                        dev.endpoints = new Map(Object.entries(device.endpoints));\n                        devicesMap.set(device.ieee_address, dev);\n                    });\n                    store.setState({\n                        devices: devicesMap\n                    })\n                }\n                break;\n\n            case \"bridge/groups\":\n                store.setState({\n                    groups: data.payload as Group[]\n                })\n                break;\n\n            case \"bridge/event\":\n                break;\n\n            case \"bridge/logging\":\n                {\n                    const { logs } = store.getState();\n                    const newLogs = [...logs.slice(-MAX_LOGS_RECORDS_IN_BUFFER)];\n                    newLogs.push(data.payload as LogMessage);\n                    store.setState({ logs: newLogs });\n                    const log = data.payload as LogMessage;\n                    if (blacklistedMessages.every(val => !val.test(log.message))) {\n                        showNotity(log);\n                    }\n                }\n                break;\n\n            case \"bridge/response/networkmap\":\n                {\n                    const response = data.payload as ResponseWithStatus;\n                    if (response.status == \"ok\") {\n                        const { value } = response.data as { value: unknown };\n                        store.setState({\n                            networkGraphIsLoading: false,\n                            networkGraph: sanitizeGraph(value as GraphI)\n                        });\n                    } else {\n                        store.setState({ networkGraphIsLoading: false });\n                    }\n                }\n                break;\n\n\n            case \"bridge/response/touchlink/scan\":\n                {\n                    const { status, data: payloadData } = data.payload as TouchllinkScanResponse;\n                    if (status === \"ok\") {\n                        store.setState({ touchlinkScanInProgress: false, touchlinkDevices: payloadData.found });\n                    } else {\n                        store.setState({ touchlinkScanInProgress: false });\n                    }\n                }\n                break;\n\n            case \"bridge/response/touchlink/identify\":\n                store.setState({ touchlinkIdentifyInProgress: false });\n                break;\n\n            case \"bridge/response/touchlink/factory_reset\":\n                store.setState({ touchlinkResetInProgress: false });\n                break;\n\n            default:\n                break;\n        }\n        if (data.topic.startsWith(\"bridge/response/\")) {\n            showNotity(data.payload as ResponseWithStatus);\n            this.resolvePromises(data.payload as ResponseWithStatus);\n        }\n    }\n\n    private resolvePromises(message: ResponseWithStatus): void {\n        const { transaction, status } = message;\n        if (transaction !== undefined) {\n            const [resolve, reject] = this.requests.get(transaction);\n            if (resolve || resolve) {\n                if (status == \"ok\" || status == undefined) {\n                    resolve();\n                } else {\n                    reject();\n                }\n\n                this.requests.delete(transaction);\n           }\n        }\n    }\n\n    private onClose = (e: CloseEvent): void => {\n        if (e.code === UNAUTHORIZED_ERROR_CODE) {\n            localStorage.setItem(AUTH_FLAG_LOCAL_STORAGE_ITEM_NAME, \"true\");\n            localStorage.removeItem(TOKEN_LOCAL_STORAGE_ITEM_NAME);\n            notyf.error(\"Unauthorized\");\n            setTimeout(() => {\n                window.location.reload();\n            }, 1000);\n        }\n    }\n\n    private onMessage = (event: MessageEvent): void => {\n        let data = {} as Message;\n        try {\n            data = JSON.parse(event.data) as Message;\n        } catch (e) {\n            notyf.error(e.message);\n            notyf.error(event.data);\n        }\n\n        if (data.topic.startsWith(\"bridge/\")) {\n            this.procsessBridgeMessage(data);\n        } else {\n            const { deviceStates } = store.getState();\n            const newDeviceStates = new Map(deviceStates);\n            newDeviceStates.set(data.topic, { ...newDeviceStates.get(data.topic), ...(data.payload as DeviceState) });\n            store.setState({ deviceStates: newDeviceStates });\n        }\n    }\n}\nconst apiUrl = `${window.location.host}${document.location.pathname}api`;\nconst api = new Api(`${isSecurePage() ? 'wss' : 'ws'}://${apiUrl}`);\nexport default api;","/* eslint-disable @typescript-eslint/no-unused-vars */\n\nimport { GlobalState } from \"./store\";\nimport { Store } from \"unistore\";\n\nimport { Cluster, Device, ReportingConfig, TouchLinkDevice } from \"./types\";\nimport api from \"./api\";\nimport { download } from \"./utils\";\n\nexport interface UtilsApi {\n    exportState(): Promise<void>;\n}\n\nexport interface TouchlinkApi {\n    touchlinkScan(): Promise<void>;\n    touchlinkIdentify(device: TouchLinkDevice): Promise<void>;\n    touchlinkReset(device: TouchLinkDevice): Promise<void>;\n}\n\nexport interface OtaApi {\n    checkOTA(deviceName: string): Promise<void>;\n    updateOTA(deviceName: string): Promise<void>;\n}\nexport interface DeviceApi {\n    renameDevice(\n        old: string,\n        newName: string,\n        homeassistantRename: boolean\n    ): Promise<void>;\n    removeDevice(dev: string, force: boolean, block: boolean): Promise<void>;\n    configureDevice(name: string): Promise<void>;\n}\n\nexport interface StateApi {\n    setStateValue(dev: string, name: string, value: unknown): Promise<void>;\n    setDeviceState(dev: string, value: object): Promise<void>;\n    getDeviceState(dev: string, value: object): Promise<void>;\n}\n\nexport interface GroupsApi {\n    createGroup(name: string, id?: number): Promise<void>;\n    removeGroup(name: string): Promise<void>;\n    addDeviceToGroup(device: string, group: string): Promise<void>;\n    removeDeviceFromGroup(device: string, group: string): Promise<void>;\n    renameGroup(oldName: string, newName: string): Promise<void>;\n}\nexport interface BindApi {\n    addBind(from: string, to: string, clusters: Cluster[]): Promise<void>;\n    removeBind(from: string, to: string, clusters: Cluster[]): Promise<void>;\n}\nexport interface BridgeApi {\n    setPermitJoin(permit: boolean, device: Device): Promise<void>;\n    updateConfigValue(name: string, value: unknown): Promise<void>;\n}\nexport interface MapApi {\n    networkMapRequest(): Promise<void>;\n}\nexport interface ReportingApi {\n    configureReport(device: string, config: ReportingConfig): Promise<void>;\n}\n\nconst actions = (store: Store<GlobalState>): object => ({\n    addBind: (\n        state,\n        from: string,\n        to: string,\n        clusters: Cluster[]\n    ): Promise<void> => {\n        const bindParams = {\n            from,\n            to,\n            clusters,\n        };\n        return api.send(\"bridge/request/device/bind\", bindParams);\n    },\n    removeBind: (\n        state,\n        from: string,\n        to: string,\n        clusters: Cluster[]\n    ): Promise<void> => {\n        const bindParams = {\n            from,\n            to,\n            clusters,\n        };\n        return api.send(\"bridge/request/device/unbind\", bindParams);\n    },\n\n    setStateValue(\n        state,\n        dev: string,\n        name: string,\n        value: string | number | boolean\n    ): Promise<void> {\n        return api.send(`${dev}/set`, { [name]: value });\n    },\n    setDeviceState(state, dev: string, value: object) {\n        return api.send(`${dev}/set`, value);\n    },\n    getDeviceState(state, dev: string, value: object) {\n        return api.send(`${dev}/get`, value);\n    },\n    setPermitJoin(state, permit = true, device: Device): Promise<void> {\n        return api.send(\"bridge/request/permit_join\", { value: permit, device: device?.friendly_name });\n    },\n\n    renameDevice: (\n        state,\n        from: string,\n        to: string,\n        homeassistantRename: boolean\n    ): Promise<void> => {\n        return api.send(\"bridge/request/device/rename\", {\n            from,\n            to,\n            'homeassistant_rename': homeassistantRename,\n        });\n    },\n    removeDevice: (\n        state,\n        dev: string,\n        force: boolean,\n        block: boolean\n    ): Promise<void> => {\n        return api.send(\"bridge/request/device/remove\", { id: dev, force, block });\n    },\n\n    configureDevice: (state, name: string): Promise<void> => {\n        return api.send(\"bridge/request/device/configure\", { id: name });\n    },\n\n    networkMapRequest: (state): Promise<void> => {\n        store.setState({ networkGraphIsLoading: true, networkGraph: { nodes: [], links: [] } });\n        return api.send(\"bridge/request/networkmap\", { type: \"raw\", routes: false });\n    },\n    createGroup: (state, group: string, id: number): Promise<void> => {\n        const payload = {\n            'friendly_name': group\n        };\n        if (id) {\n            payload['id'] = id;\n        }\n        return api.send(\"bridge/request/group/add\", payload);\n    },\n\n    removeGroup: (state, group: string): Promise<void> => {\n        return api.send(\"bridge/request/group/remove\", {id: group});\n    },\n\n    addDeviceToGroup: (state, device: string, group: string): Promise<void> => {\n        return api.send(\"bridge/request/group/members/add\", { group, device });\n    },\n\n    removeDeviceFromGroup: (\n        state,\n        device: string,\n        group: string\n    ): Promise<void> => {\n        return api.send(\"bridge/request/group/members/remove\", { device, group });\n    },\n    renameGroup: (state, oldName: string, newName: string): Promise<void> => {\n        return api.send(\"bridge/request/group/rename\", { from: oldName, to: newName });\n    },\n\n    touchlinkScan(): Promise<void> {\n        store.setState({ touchlinkScanInProgress: true, touchlinkDevices: [] });\n        return api.send(\"bridge/request/touchlink/scan\", {value: true});\n    },\n    touchlinkIdentify(state, device: TouchLinkDevice): Promise<void> {\n        store.setState({ touchlinkIdentifyInProgress: true });\n        return api.send(\"bridge/request/touchlink/identify\", device);\n\n    },\n    touchlinkReset(state, device: TouchLinkDevice): Promise<void> {\n        store.setState({ touchlinkResetInProgress: true });\n        return api.send(\"bridge/request/touchlink/factory_reset\", device);\n    },\n\n    checkOTA: (state, deviceName: string): Promise<void> => {\n        return api.send(\"bridge/request/device/ota_update/check\", { id: deviceName });\n    },\n    updateOTA: (state, deviceName: string): Promise<void> => {\n        return api.send(\"bridge/request/device/ota_update/update\", { id: deviceName });\n    },\n    updateConfigValue(state, name: string, value: unknown): Promise<void> {\n        return api.send(`bridge/request/config/${name}`, {value});\n    },\n    exportState(state): Promise<void> {\n        download(state, 'state.json');\n        return Promise.resolve();\n    },\n    configureReport(state, device: string, config: ReportingConfig): Promise<void> {\n        return api.send('bridge/request/device/configure_reporting', {\n            id: device,\n            ...config\n        });\n    }\n});\nexport default actions;\n","import React, { ButtonHTMLAttributes, Component } from \"react\";\n\ninterface ButtonProps<T> {\n    item?: T;\n    onClick?(arg1: T): void;\n    promt?: boolean | string;\n}\n\nexport default class Button<T> extends Component<ButtonProps<T> & Omit<ButtonHTMLAttributes<HTMLButtonElement>, 'onClick'>, {}> {\n    onClick = (): void => {\n        const { item, onClick, promt } = this.props;\n        let confirmed = true;\n        if (promt) {\n            confirmed = confirm(typeof promt === \"string\" ? promt : \"Are you sure?\");\n        }\n        confirmed && onClick && onClick(item);\n    };\n\n    render() {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { children, item, promt, ...rest } = this.props;\n        return <button type=\"button\" {...rest} onClick={this.onClick}>{children}</button>;\n    }\n}","import { ZigbeeRelationship } from \"./types\";\n\ninterface LinkType {\n  title: string;\n  relationship: ZigbeeRelationship;\n}\nexport const linkTypes: LinkType[] = [\n  {\n      title: 'IsParent',\n      relationship: ZigbeeRelationship.NeigbhorIsParent\n  },\n  {\n      title: 'IsAChild',\n      relationship: ZigbeeRelationship.NeigbhorIsAChild\n  },\n  {\n      title: 'IsASibling',\n      relationship: ZigbeeRelationship.NeigbhorIsASibling\n  },\n  {\n      title: 'NoneOfTheAbove',\n      relationship: ZigbeeRelationship.NoneOfTheAbove\n  }\n];","import React, { FunctionComponent } from \"react\";\n\nconst Spinner: FunctionComponent = () => {\n  return <div className=\"d-flex align-items-center\">\n    <strong>Loading, please wait.</strong>\n    <div className=\"spinner-border me-2\" role=\"status\">\n      <span className=\"sr-only\">Loading...</span>\n    </div>\n  </div>\n}\nexport default Spinner;","import React, { ChangeEvent, Component, createRef, Fragment } from \"react\";\nimport Links from \"./links\";\nimport Nodes, { getStarShape } from \"./nodes\";\nimport { GraphI, LinkI, NodeI, Source, Target, ZigbeeRelationship } from \"./types\";\nimport { connect } from \"unistore/react\";\nimport { GlobalState } from \"../../store\";\nimport actions, { MapApi } from \"../../actions\";\n\nimport Button from \"../button\";\nimport { ForceLink, forceLink, forceCollide, forceCenter, forceSimulation, forceX, forceY } from \"d3-force\";\nimport { select, selectAll, Selection } from \"d3-selection\";\nimport { forceManyBodyReuse } from \"d3-force-reuse\"\nimport { zoom, zoomIdentity, ZoomTransform } from \"d3-zoom\";\nimport { linkTypes } from \"./consts\";\nimport Spinner from \"../spinner\";\nimport intersection from \"lodash/intersection\";\nimport style from \"./map.css\";\nimport cx from \"classnames\";\nexport interface MouseEventsResponderNode {\n    onMouseOver?: (arg0: NodeI, el: SVGPolygonElement | SVGCircleElement | SVGImageElement) => void;\n    onMouseOut?: (arg0: NodeI, el: SVGPolygonElement | SVGCircleElement | SVGImageElement) => void;\n    onDblClick?: (arg0: NodeI, el: SVGPolygonElement | SVGCircleElement | SVGImageElement) => void;\n}\n\ninterface MapState {\n    selectedNode: NodeI;\n    width: number;\n    height: number;\n    visibleLinks: ZigbeeRelationship[];\n    legendIsVisible: boolean;\n}\nconst angle = (s: Source, t: Target) => Math.atan2(t.y - s.y, t.x - s.x);\nconst xpos = (offset: number, s: Source, t: Target) => offset * Math.cos(angle(s, t)) + s.x;\nconst ypos = (offset: number, s: Source, t: Target) => offset * Math.sin(angle(s, t)) + s.y;\n\n\n\nconst parentOrChild = [ZigbeeRelationship.NeigbhorIsAChild, ZigbeeRelationship.NeigbhorIsParent];\nconst linkStrregth = (d: LinkI) => {\n    if (d.linkType === \"Router2Router\") {\n        return 1;\n    }\n    if (parentOrChild.includes(d.relationship)) {\n        return 0.5;\n    }\n\n    return 0;\n}\n\nconst distancesMap = {\n    BrokenLink: 450,\n    Router2Router: 200,\n    Coordinator2Router: 200,\n    Coordinator2EndDevice: 50,\n    EndDevice2Router: 50\n};\n\n\nconst getDistance = (d: LinkI): number => {\n    return distancesMap[d.linkType] ?? 200;\n    // const depth = ~~(Math.min(4, d.depth));\n    // return 50 * depth + distance;\n};\n\nconst computeLink = (d: LinkI, transform: ZoomTransform): string => {\n    const src = d.source;\n    const dst = d.target;\n    const [x1, y1] = transform.apply([src.x, src.y]);\n    const [x2, y2] = transform.apply([dst.x, dst.y]);\n    return `M ${x1} ${y1} L ${x2} ${y2}`;\n}\n\ntype SelNode = Selection<SVGElement, NodeI, HTMLElement, unknown>;\ntype SelLink = Selection<SVGElement, LinkI, HTMLElement, unknown>;\n\ntype TickedParams = {\n    transform: ZoomTransform;\n    node: SelNode;\n    link: SelLink;\n    linkLabel: SelLink;\n    links: LinkI[];\n}\nconst ticked = ({ transform, node, link, linkLabel, links }: TickedParams): void => {\n    links.forEach(function (d) {\n        const [x1, y1] = transform.apply([d.source.x, d.source.y]),\n            [x2, y2] = transform.apply([d.target.x, d.target.y]),\n            slope = (y2 - y1) / (x2 - x1);\n\n        (d as unknown as NodeI).x = (x2 + x1) / 2;\n        (d as unknown as NodeI).y = (x2 - x1) * slope / 2 + y1;\n    });\n    link.attr(\"d\", (d) => computeLink(d, transform));\n    linkLabel\n        .attr('x', (d) => transform.applyX(xpos(100, d.source, d.target)))\n        .attr('y', (d) => transform.applyY(ypos(100, d.source, d.target)))\n\n    const imgXShift = 32 / 2;\n    const imgYShift = 32 / 2;\n    const computeTransform = (d: NodeI) => {\n        if (d) {\n            const [X, Y] = transform.apply([d.x, d.y]);\n            return `translate(${X - imgXShift}, ${Y - imgYShift})`;\n        }\n    }\n    node.attr(\"transform\", computeTransform);\n};\ntype ProcessHighlightsParams = {\n    networkGraph: GraphI;\n    links: LinkI[];\n    selectedNode: NodeI;\n    node: SelNode;\n    link: SelLink;\n    linkLabel: SelLink;\n}\nconst processHighlights = ({ networkGraph, links, selectedNode, node, link, linkLabel }: ProcessHighlightsParams) => {\n    const linkedByIndex = new Set<string>();\n    networkGraph.nodes.forEach(n => linkedByIndex.add(n.ieeeAddr + \",\" + n.ieeeAddr));\n    links.forEach((l) => linkedByIndex.add(l.sourceIeeeAddr + \",\" + l.targetIeeeAddr));\n\n    const neighboring = (a: Source, b: Target): boolean => linkedByIndex.has(a.ieeeAddr + \",\" + b.ieeeAddr)\n    const computeOpacity = (l: LinkI) => (l.source === selectedNode || l.target === selectedNode ? 1 : 0.15);\n    if (selectedNode) {\n        node.style(\"opacity\", (o: NodeI) => neighboring(selectedNode, o) || neighboring(o, selectedNode) ? 1 : 0.15);\n        link.style(\"stroke-opacity\", computeOpacity);\n        linkLabel.style(\"opacity\", computeOpacity);\n    } else {\n        node.style(\"opacity\", 1);\n        link.style(\"stroke-opacity\", 1);\n        linkLabel.style(\"opacity\", 1);\n    }\n}\n\nexport class MapComponent extends Component<GlobalState & MapApi, MapState> {\n    ref = createRef<HTMLDivElement>();\n    svgRef = createRef<SVGSVGElement>();\n    simulation = forceSimulation<NodeI, LinkI>();\n    state: Readonly<MapState> = {\n        selectedNode: null,\n        width: 0,\n        height: 0,\n        visibleLinks: parentOrChild,\n        legendIsVisible: true,\n    };\n    transform: ZoomTransform = zoomIdentity;\n\n    updateNodes = (): void => {\n        const { networkGraph } = this.props;\n        if (!networkGraph.nodes.length) {\n            return;\n        }\n        const { visibleLinks, selectedNode, width, height } = this.state;\n\n        const node = selectAll<SVGElement, NodeI>(`.${style.node}`);\n        const link = selectAll<SVGElement, LinkI>(`.${style.link}`);\n        const linkLabel = selectAll<SVGElement, LinkI>(`.${style.linkLabel}`);\n\n        const links = networkGraph.links.filter(l => intersection(visibleLinks, l.relationships).length);\n        this.simulation.nodes(networkGraph.nodes.concat(links as unknown as NodeI[]));\n        this.simulation.force<ForceLink<NodeI, LinkI>>(\"link\").links(links);\n        this.simulation.on(\"tick\", () => ticked({ transform: this.transform, node, link, linkLabel, links }));\n\n\n        //add zoom capabilities\n        const everything = select<SVGGeometryElement, NodeI>('.everything');\n        const zoomHandler = zoom()\n            .extent([[0, 0], [width, height]])\n            .scaleExtent([1 / 10, 8])\n            .on(\"zoom\", ({ transform }) => {\n                everything.attr(\"transform\", transform);\n            });\n        zoomHandler(select(this.svgRef.current));\n\n        processHighlights({ networkGraph, links, selectedNode, node, link, linkLabel });\n        node.on(\"click\", (event, d: NodeI) => {\n            const { selectedNode } = this.state;\n            this.setState({ selectedNode: selectedNode ? null : d });\n        });\n        this.simulation.alphaTarget(0.03).restart();\n    }\n\n\n    updateForces(width: number, height: number): void {\n        this.simulation = this.simulation\n            .force(\"link\", forceLink<NodeI, LinkI>().id(d => d.ieeeAddr).distance(getDistance).strength(linkStrregth))\n            .force(\"charge\", forceManyBodyReuse().strength(-700))\n            .force(\"collisionForce\", forceCollide())\n            .force(\"center\", forceCenter(width / 2, height / 2))\n            .force(\"x\", forceX().strength(0.1))\n            .force(\"y\", forceY().strength(0.2))\n    }\n\n    initPage(): void {\n        const { width, height } = (this.ref.current as HTMLDivElement).getBoundingClientRect();\n        this.setState({ width, height });\n        this.updateForces(width, height);\n    }\n\n    componentDidMount(): void {\n        this.initPage()\n    }\n\n    componentDidUpdate(): void {\n        this.updateNodes();\n    }\n\n    renderMap() {\n        const { width, height, visibleLinks } = this.state;\n\n        const { networkGraph } = this.props;\n        const links = networkGraph.links.filter(l => intersection(visibleLinks, l.relationships).length > 0);\n        return (\n            <svg ref={this.svgRef} viewBox={`0 0 ${width} ${height}`}>\n                <g className=\"everything\">\n                    <Links links={links} />\n                    <Nodes\n                        nodes={networkGraph.nodes}\n                        simulation={this.simulation}\n                    />\n                </g>\n            </svg >\n        )\n    }\n    onRequestClick = (): void => {\n        const { networkMapRequest } = this.props;\n        networkMapRequest();\n    }\n    renderMessage() {\n        const { networkGraphIsLoading } = this.props;\n        return (\n            <div className=\"h-100 d-flex justify-content-center align-items-center\">\n                {\n                    networkGraphIsLoading ? (\n                        <div>\n                            <Spinner />\n                            <div>Depending on the size of your network this can take somewhere between 10 seconds and 2 minutes.</div>\n                        </div>\n\n                    ) : <Button onClick={this.onRequestClick} className=\"btn btn-primary d-block\">Load map</Button>\n                }\n            </div>\n        );\n    }\n    onLinkTypeFilterChange = (e: ChangeEvent<HTMLInputElement>): void => {\n        const { visibleLinks: stateVisibleLinks } = this.state;\n        const { checked, value } = e.target;\n        const inValue = parseInt(value, 10);\n        let visibleLinks = [...stateVisibleLinks];\n        if (checked) {\n            visibleLinks.push(inValue);\n        } else {\n            visibleLinks = visibleLinks.filter((v) => v !== inValue);\n        }\n        this.setState({ visibleLinks });\n    }\n    renderMapControls() {\n        const { visibleLinks } = this.state;\n        return <div className={style.controls}>\n            {\n                linkTypes.map(linkType => (\n                    <div key={linkType.title} className=\"form-check form-check-inline\">\n                        <input onChange={this.onLinkTypeFilterChange} className=\"form-check-input\" type=\"checkbox\" id={linkType.title} value={linkType.relationship} checked={visibleLinks.includes(linkType.relationship)} />\n                        <label className=\"form-check-label\" htmlFor={linkType.title}>{linkType.title}</label>\n                    </div>\n                ))\n            }\n            {\n                <div className=\"btn-group btn-group-sm\" role=\"group\">\n                    <Button<void> title=\"Refresh data\" className=\"btn btn-primary\" onClick={this.onRequestClick}><i\n                        className=\"fa fa-sync\" /></Button>\n                </div>\n            }\n        </div>\n    }\n    render() {\n        const { networkGraph } = this.props;\n        const { legendIsVisible } = this.state;\n        return (\n            <div className={style.container} ref={this.ref}>\n                {networkGraph.nodes.length ? <Fragment>{this.renderMapControls()} {this.renderMap()}</Fragment> : this.renderMessage()}\n                <div className={cx(\"fixed-bottom\", { \"d-none\": !legendIsVisible })} onClick={() => this.setState({ legendIsVisible: false })}>\n                    <div className={cx(style.node, style.Coordinator)}>\n                        <svg width=\"28\" height=\"28\" viewBox=\"0 0 28 28\">\n                            <polygon points={getStarShape(5, 5, 14) as string} />\n                        </svg> is Coordinator</div>\n                    <div className={cx(style.node, style.EndDevice)}>Green means End Device</div>\n                    <div className={cx(style.node, style.Router)}>Blue means Router</div>\n\n                    <div>Solid lines are the link to the <span className={cx(style.node, style.Coordinator)}>Coordinator</span></div>\n                    <div>Dashed lines are the link with <span className={cx(style.node, style.Coordinator)}>Router</span></div>\n                    <div>Link quality is between 0 - 255, values with / represents multiple types of links</div>\n                    <div>Click on me to hide</div>\n                </div>\n            </div>\n        );\n    }\n}\n\n\nconst mappedProps = [\"networkGraph\", \"networkGraphIsLoading\"];\nconst ConnectedMap = connect<{}, MapState, GlobalState, {}>(mappedProps, actions)(MapComponent);\nexport default ConnectedMap;\n","import React, { Component, FunctionComponent,  Fragment } from \"react\";\nimport cx from \"classnames\";\n// import * as style from \"./style.css\";\n\n\nexport const ModalHeader: FunctionComponent<{}> = props => {\n    return <div className=\"modal-header\">{props.children}</div>;\n};\n\nexport const ModalBody: FunctionComponent<{}> = props => {\n    return <div className=\"modal-body\">{props.children}</div>;\n};\n\nexport const ModalFooter: FunctionComponent<{}> = props => {\n    return <div className=\"modal-footer\">{props.children}</div>;\n};\ninterface ModalProps {\n    isOpen?: boolean;\n}\ninterface ModalState {\n    modalShow: string;\n    display: string;\n}\n\nclass Modal extends Component<ModalProps, ModalState> {\n    constructor(props: ModalProps) {\n        super(props);\n        this.state = {\n            modalShow: '',\n            display: 'none'\n        };\n        this.openModal = this.openModal.bind(this);\n        this.closeModal = this.closeModal.bind(this);\n    }\n\n    openModal() {\n        this.setState({\n            modalShow: 'show',\n            display: 'block'\n        });\n    }\n\n    closeModal() {\n        this.setState({\n            modalShow: '',\n            display: 'none'\n        });\n    }\n\n    componentDidMount() {\n        this.props.isOpen ? this.openModal() : this.closeModal();\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.isOpen !== this.props.isOpen) {\n            this.props.isOpen ? this.openModal() : this.closeModal();\n        }\n    }\n\n    render() {\n        return (\n            <div\n                className={`modal fade ${ this.state.modalShow}`}\n\n                role=\"dialog\"\n                aria-hidden=\"true\"\n                style={{ display: this.state.display }}\n            >\n                <div className=\"modal-dialog\" role=\"document\">\n                    <div className=\"modal-content\">{this.props.children}</div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Modal;\n\n\n\n// interface Props {\n//     onOk(): void;\n//     onCancel(): void;\n// }\n// const Modal: FunctionComponent<Props> = (props: Props) => {\n//     const { onOk, onCancel } = props;\n//     return (\n//         <Fragment>\n\n//             <button type=\"button\" className=\"btn btn-primary\" data-toggle=\"modal\" data-target=\"#exampleModal\">\n//                 Launch demo modal\n// </button>\n//             <div className=\"modal fade\" id=\"exampleModal\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n//                 <div className=\"modal-dialog\">\n//                     <div className=\"modal-content\">\n//                         <div className=\"modal-header\">\n//                             <h5 className=\"modal-title\" id=\"exampleModalLabel\">Modal title</h5>\n//                             <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n//                                 <span aria-hidden=\"true\">&times;</span>\n//                             </button>\n//                         </div>\n//                         <div className=\"modal-body\">\n//                             ...\n//                         </div>\n//                         <div className=\"modal-footer\">\n//                             <button onClick={onOk} type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n//                             <button onClick={onCancel} type=\"button\" className=\"btn btn-primary\">Ok</button>\n//                         </div>\n//                     </div>\n//                 </div>\n//             </div>\n//         </Fragment>\n//     );\n// };\n\n// export default Modal;\n","import React, { ChangeEvent, Component } from \"react\";\nimport Button from \"../button\";\nimport { Device, DeviceState } from \"../../types\";\nimport { connect } from \"unistore/react\";\nimport actions, { OtaApi, DeviceApi } from \"../../actions\";\nimport cx from \"classnames\";\nimport Modal, { ModalHeader, ModalBody, ModalFooter } from \"../modal\";\nimport { GlobalState } from \"../../store\";\ninterface DeviceControlGroupProps {\n    device: Device;\n    state?: DeviceState;\n}\ninterface DeviceRenameParams {\n    friendlyName: string;\n    isHassRename: boolean;\n}\ninterface DeviceRemovalParams {\n    block: boolean;\n    force: boolean;\n}\n\n\ninterface DeviceControlGroupState {\n    isRenameModalOpened: boolean;\n    isDeviceRemovalModalOpened: boolean;\n    removeParams: DeviceRemovalParams;\n    renameParams: DeviceRenameParams;\n\n}\n\nexport class DeviceControlGroup extends Component<DeviceControlGroupProps & DeviceApi & OtaApi & GlobalState, DeviceControlGroupState> {\n    state = {\n        isRenameModalOpened: false,\n        isDeviceRemovalModalOpened: false,\n        renameParams: {\n            friendlyName: this.props.device.friendly_name,\n            isHassRename: false\n        },\n        removeParams: {\n            block: false,\n            force: false\n        }\n    }\n\n    onRenameClick = async (): Promise<void> => {\n        const { renameDevice, device } = this.props;\n        const { renameParams } = this.state;\n\n        await renameDevice(device.friendly_name, renameParams.friendlyName, renameParams.isHassRename);\n        this.setState({\n            isRenameModalOpened: false\n        });\n    };\n\n\n    onRemoveClick = (): void => {\n        const { removeDevice, device } = this.props;\n        const { removeParams } = this.state;\n        removeDevice(device.friendly_name, removeParams.force, removeParams.block);\n        this.setState({\n            isDeviceRemovalModalOpened: false\n        });\n    };\n\n    toggleRenameModal = (): void => {\n        const { isRenameModalOpened } = this.state;\n        this.setState({ isRenameModalOpened: !isRenameModalOpened });\n    }\n    toggleDeviceRemovalModal = (): void => {\n        const { isDeviceRemovalModalOpened } = this.state;\n        this.setState({ isDeviceRemovalModalOpened: !isDeviceRemovalModalOpened });\n    }\n\n    onHassEntityIdChange = (e: ChangeEvent<HTMLInputElement>): void => {\n        const { renameParams } = this.state;\n        const { checked } = e.target;\n        renameParams.isHassRename = checked;\n        this.setState({ renameParams });\n    }\n    onFriendlyNameChange = (e: ChangeEvent<HTMLInputElement>): void => {\n        const { renameParams } = this.state;\n        const { value } = e.target;\n        renameParams.friendlyName = value;\n        this.setState({ renameParams });\n    }\n\n    onDeviceRemovalParamChange = (e: ChangeEvent<HTMLInputElement>): void => {\n        const { removeParams } = this.state;\n        const { checked, name } = e.target;\n        removeParams[name] = checked;\n        this.setState({ removeParams });\n    }\n    renderRenameButton() {\n        const { bridgeInfo, device } = this.props;\n        const { isRenameModalOpened, renameParams } = this.state;\n        return (\n            <><Button<void> className=\"btn btn-secondary\" onClick={this.toggleRenameModal} title=\"Rename device\"><i className=\"fa fa-edit\" /></Button>\n                <Modal isOpen={isRenameModalOpened}>\n                    <ModalHeader>\n                        <h3>Rename device</h3>\n                        <small>{device.friendly_name}</small>\n                    </ModalHeader>\n                    <ModalBody>\n                        <div className=\"mb-3\">\n                            <label htmlFor={`fn${device.ieee_address}`} className=\"form-label\">Friendly name</label>\n                            <input id={`fn${device.ieee_address}`} onChange={this.onFriendlyNameChange} type=\"text\" className=\"form-control\" value={renameParams.friendlyName} />\n                        </div>\n                        {bridgeInfo?.config?.homeassistant ? (\n                            <div className=\"form-check form-switch\">\n                                <input className=\"form-check-input\" checked={renameParams.isHassRename} type=\"checkbox\" id={`hass${device.ieee_address}`} onChange={this.onHassEntityIdChange} />\n                                <label className=\"form-check-label\" htmlFor={`hass${device.ieee_address}`}>Update Home Assistant entity ID</label>\n                            </div>\n                        ) : null}\n                    </ModalBody>\n                    <ModalFooter>\n                        <button type=\"button\" className=\"btn btn-secondary\" onClick={this.toggleRenameModal}>Close</button>\n                        <button type=\"button\" className=\"btn btn-primary\" onClick={this.onRenameClick}>Save changes</button>\n                    </ModalFooter>\n                </Modal></>\n        )\n    }\n    renderDeviceRemovalButton() {\n        const { device } = this.props;\n        const { isDeviceRemovalModalOpened, removeParams } = this.state;\n        return (\n            <><Modal isOpen={isDeviceRemovalModalOpened}>\n                <ModalHeader>\n                    <h3>Remove device</h3>\n                    <small>{device.friendly_name}</small>\n                </ModalHeader>\n                <ModalBody>\n                    <div className=\"form-check form-switch\">\n                        <input className=\"form-check-input\" name=\"force\" checked={removeParams.force} type=\"checkbox\" id={`force${device.ieee_address}`} onChange={this.onDeviceRemovalParamChange} />\n                        <label className=\"form-check-label\" htmlFor={`force${device.ieee_address}`}>Force remove</label>\n                    </div>\n                    <div className=\"form-check form-switch\">\n                        <input className=\"form-check-input\" name=\"block\" checked={removeParams.block} type=\"checkbox\" id={`block${device.ieee_address}`} onChange={this.onDeviceRemovalParamChange} />\n                        <label className=\"form-check-label\" htmlFor={`block${device.ieee_address}`}>Block from joining again</label>\n                    </div>\n                </ModalBody>\n                <ModalFooter>\n                    <button type=\"button\" className=\"btn btn-secondary\" onClick={this.toggleDeviceRemovalModal}>Close</button>\n                    <button type=\"button\" className=\"btn btn-danger\" onClick={this.onRemoveClick}>Delete</button>\n                </ModalFooter>\n            </Modal>\n                <button onClick={this.toggleDeviceRemovalModal} className=\"btn btn-danger\" title=\"Remove device\"><i className={cx(\"fa\", \"fa-trash\")} /></button></>\n        )\n    }\n    render() {\n        const { device, configureDevice, checkOTA, updateOTA, state } = this.props;\n        return (\n            <div className=\"btn-group btn-group-sm\" role=\"group\">\n                {this.renderRenameButton()}\n                <Button<string> className=\"btn btn-secondary\" onClick={configureDevice} item={device.friendly_name} title=\"Reconfigure\" promt><i className={cx(\"fa\", \"fa-cogs\")} /></Button>\n                {\n                    state?.update?.state === \"available\" ?\n                        <Button<string> className=\"btn btn-secondary\" onClick={updateOTA} item={device.friendly_name} title=\"Update OTA\" promt><i className={cx(\"fa\", \"fa-cloud-download-alt\")} /></Button>\n                        : <Button<string> className=\"btn btn-secondary\" onClick={checkOTA} item={device.friendly_name} title=\"Check OTA\"><i className={cx(\"fa\", \"fa-cloud\")} /></Button>\n                }\n                {this.renderDeviceRemovalButton()}\n\n\n            </div>\n        );\n    }\n}\n\nconst mappedProps = [\"bridgeInfo\"];\nconst ConnectedDeviceControlGroup = connect<DeviceControlGroupProps, {}, GlobalState, DeviceApi & OtaApi>(mappedProps, actions)(DeviceControlGroup);\nexport default ConnectedDeviceControlGroup;\n\n","import React, { Fragment } from \"react\";\nimport { Device } from \"../../types\";\n\ntype VendorProps = {\n  device: Device;\n}\nconst normalizeModel = (model: string): string => {\n  const find = '[/| |:]';\n  const re = new RegExp(find, 'g');\n  return model.replace(re, '_');\n};\n\nexport const VendorLink: React.FunctionComponent<VendorProps> = (props: VendorProps) => {\n  const { device } = props;\n  if (device.supported) {\n    const url = `https://www.zigbee2mqtt.io/information/supported_devices.html#${encodeURIComponent(normalizeModel(device.definition?.vendor?.toLowerCase()))}`;\n    return <a target=\"_blank\" rel=\"noopener noreferrer\" href={url}>{device.definition?.vendor}</a>\n  }\n  return <Fragment>Unsupported</Fragment>;\n}\n\n\nexport const ModelLink: React.FunctionComponent<VendorProps> = (props: VendorProps) => {\n  const { device } = props;\n  let url = 'https://www.zigbee2mqtt.io/how_tos/how_to_support_new_devices.html#how-to-support-new-devices';\n  let title = device.model_id;\n  if (device.supported) {\n    const acnchor = [\n      encodeURIComponent(device.definition?.vendor?.toLowerCase()),\n      encodeURIComponent(device.definition?.model?.toLowerCase()),\n    ].join('-');\n    url = `https://www.zigbee2mqtt.io/devices/${encodeURIComponent(normalizeModel(device.definition?.model))}.html#${encodeURIComponent(normalizeModel(acnchor))}`;\n    title = device.definition?.model;\n  }\n  return <a target=\"_blank\" rel=\"noopener noreferrer\" href={url}>{title}</a>\n}\n","import React, { Fragment, FunctionComponent } from \"react\";\nimport { PowerSource as PowerSourceType } from \"../../types\";\nimport style from \"./style.css\";\n\n\ninterface PowerSourceProps {\n    source: PowerSourceType;\n    battery?: number;\n    batteryLow?: boolean;\n    showLevel?: boolean;\n}\n\n\nconst PowerSource: FunctionComponent<PowerSourceProps> = ({ source, battery, batteryLow, showLevel, ...rest }) => {\n    let batteryClass = \"\";\n    let title = \"\";\n\n    switch (source) {\n        case \"Battery\":\n            title = 'Battery';\n            if (batteryLow !== undefined) {\n                batteryClass = batteryLow ? `fa-battery-empty ${style.blinking} text-danger` : 'fa-battery-full text-success';\n                title += batteryLow ? ' LOW' : ' OK';\n            }\n            if (battery !== undefined) {\n                if (battery >= 85) {\n                    batteryClass += \" fa-battery-full\";\n                } else if (battery >= 75) {\n                    batteryClass += \" fa-battery-three-quarters\";\n                } else if (battery >= 50) {\n                    batteryClass += \" fa-battery-half\";\n                } else if (battery >= 25) {\n                    batteryClass += \" fa-battery-quarter\";\n                } else if (battery >= 10) {\n                    batteryClass += ` fa-battery-empty ${style.blinking}`\n                } else {\n                    return <span className={`${style.blinking} text-danger`} role=\"alert\">{battery}%</span>\n                }\n            }\n            title += `${battery ? `, power level ${battery}%` : \"\"}`;\n            if (!batteryClass) {\n                batteryClass = \"fa-question\";\n            }\n            return <Fragment>{showLevel ? <span className=\"pe-2\">Battery {battery !== undefined ? `${battery}%` : null}</span> : null}<i className={`fa ${batteryClass}`} title={title} {...rest} /></Fragment>;\n\n        case \"Mains (single phase)\":\n        case \"DC Source\":\n            return <i className={`fa fa-plug ${style.plug}`} title={source} {...rest} />;\n        default:\n            return <i className={`fa fa-question`} title={source} {...rest} />;\n    }\n};\n\nexport default PowerSource;\n","/* eslint-disable react/display-name */\nimport React, { Component, Fragment } from \"react\";\nimport { Device, DeviceState } from \"../../types\";\nimport { toHex, toHHMMSS } from \"../../utils\";\nimport DeviceControlGroup from \"../device-control\";\nimport cx from \"classnames\";\nimport style from \"./style.css\";\nimport { connect } from \"unistore/react\";\nimport { GlobalState } from \"../../store\";\nimport get from 'lodash/get';\nimport DeviceImage from \"../device-image\";\nimport { ModelLink, VendorLink } from \"../vendor-links/verndor-links\";\nimport PowerSource from \"../power-source\";\n\n\ntype DeviceInfoProps = {\n    device: Device;\n}\ninterface PropsFromStore {\n    deviceStates: Map<string, DeviceState>;\n}\n// [Flower sensor](http://modkam.ru/?p=1700)\nconst markdownLinkRegex = /\\[(.*?)\\]\\((.*?)\\)/;\n\nconst displayProps = [\n    {\n        label: 'Friendly name',\n        render: (device: Device) => <dd className=\"col-12 col-md-7\"><strong>{device.friendly_name}</strong></dd>,\n    },\n    {\n        key: 'type',\n        label: 'Device type'\n    },\n    {\n        key: 'model_id',\n        label: 'Zigbee model'\n    },\n    {\n        key: 'definition.description',\n        label: 'Description',\n        if: 'supported',\n        render: (device: Device) => {\n            const result = markdownLinkRegex.exec(device.definition.description);\n            let content = <span>{device.definition.description}</span>;\n            if (result) {\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                const [all, title, link] = result;\n                content = <a target=\"_blank\" rel=\"noopener noreferrer\"href={link}>{title}</a>\n            }\n            return <dd className=\"col-12 col-md-7\">{content}</dd>\n        },\n    },\n    {\n        render: (device: Device) => <dd className=\"col-12 col-md-7\" ><p className={cx('mb-0', 'font-weight-bold', { 'text-danger': !device.supported, 'text-success': device.supported })}>{device.supported ? 'Supported' : 'Unsupported'}</p></dd>,\n        label: 'Support status'\n    },\n    {\n        render: (device: Device) => <dd className=\"col-12 col-md-7\">{device.definition.supports}</dd>,\n        label: 'Supports',\n        if: 'definition.supports'\n    },\n    {\n        key: 'ieee_address',\n        label: 'IEEE address'\n    },\n    {\n        key: 'network_address',\n        label: 'Network address',\n        render: (device: Device) => <dd className=\"col-12 col-md-7\">{toHex(device.network_address)}</dd>,\n    },\n    {\n        key: 'date_code',\n        label: 'Firmware build date',\n        if: 'date_code'\n    },\n    {\n        key: 'software_build_id',\n        label: 'Firmware version',\n        if: 'software_build_id'\n    },\n\n    {\n        key: 'definition.vendor',\n        label: 'Vendor',\n        if: 'supported',\n        render: (device: Device) => <dd className=\"col-12 col-md-7\"><VendorLink device={device} /></dd>\n    },\n    {\n        key: 'definition.model',\n        label: 'Model',\n        if: 'supported',\n        render: (device: Device) => <dd className=\"col-12 col-md-7\"><ModelLink device={device} /></dd>\n    },\n\n    {\n        label: 'Power source',\n        render: (device: Device, deviceStatus: DeviceState) => <dd className=\"col-12 col-md-7\"><PowerSource showLevel={true} source={device.power_source} battery={deviceStatus.battery} batteryLow={deviceStatus.battery_low} /></dd>\n    },\n    {\n        label: 'Interview completed',\n        render: (device: Device) => <dd className=\"col-12 col-md-7\">{device.interview_completed ? 'Yes' : 'No'}</dd>\n    }\n];\n// eslint-disable-next-line react/prefer-stateless-function\nexport class DeviceInfo extends Component<DeviceInfoProps & PropsFromStore, {}> {\n    render() {\n        const { device, deviceStates } = this.props;\n        const deviceStatus: DeviceState = deviceStates.get(device.friendly_name) ?? {} as DeviceState;\n        return (\n            <Fragment>\n                <div className=\"d-flex justify-content-center\">\n                    <DeviceImage className={`card-img-top w-auto ${style[\"device-pic\"]}`} device={device} deviceStatus={deviceStatus} />\n                </div>\n\n\n                {/* <h2 className=\"card-title\">{device.friendly_name} {device.type}</h2> */}\n\n\n                <dl className=\"row\">\n                    {\n                        displayProps.filter(prop => prop.if === undefined || get(device, prop.if, false)).map(prop => (\n                            <Fragment key={prop.label}>\n                                <dt className=\"col-12 col-md-5\">{prop.label}</dt>\n                                {prop.render ?\n                                    prop.render(device, deviceStatus) : <dd className=\"col-12 col-md-7\">{get(device, prop.key)}</dd>}\n\n                            </Fragment>\n                        ))\n                    }\n                    {\n                        deviceStatus?.update?.state === \"updating\" ? (\n                            <Fragment>\n                                <dt className=\"col-12 col-md-5\">Updating firmware</dt>\n                                <dd className=\"col-12 col-md-7\">\n                                    <div className=\"progress\">\n                                        <div className=\"progress-bar progress-bar-striped progress-bar-animated\" style={{ width: `${deviceStatus.update.progress}%` }}>\n                                            {deviceStatus.update.progress}%\n                                        </div>\n                                    </div>\n                                    <div>Remaining time {toHHMMSS(deviceStatus.update.remaining)}</div>\n                                </dd>\n                            </Fragment>\n                        ) : null\n                    }\n                </dl>\n\n\n                <DeviceControlGroup device={device} state={deviceStatus} />\n\n            </Fragment>\n        );\n    }\n}\n\nconst mappedProps = [\"deviceStates\"];\n\nconst ConnectedDeviceInfoPage = connect<DeviceInfoProps, {}, GlobalState, PropsFromStore>(mappedProps)(DeviceInfo);\nexport default ConnectedDeviceInfoPage;","import React, { ChangeEvent, Component, SelectHTMLAttributes } from \"react\";\nimport { Device, ObjectType } from \"../../types\";\nimport { getDeviceDisplayName } from \"../../utils\";\nimport { Group } from \"../../store\";\nconst DELIMITER = '|';\ninterface DevicePickerProps {\n    type: ObjectType;\n    value: string | number;\n    devices: Map<string, Device>;\n    groups?: Group[];\n    onChange(device: Device | Group, type: ObjectType): void;\n}\nexport default class DevicePicker extends Component<DevicePickerProps & Omit<SelectHTMLAttributes<HTMLSelectElement>, 'onChange'>, {}> {\n    onSelect = (e: ChangeEvent<HTMLSelectElement>): void => {\n        const { onChange, devices, groups = [] } = this.props;\n        const { value } = e.target as HTMLSelectElement;\n\n        if (devices.has(value)) {\n            onChange(devices.get(value), \"device\");\n        } else {\n            const group = groups.find(g => parseInt(value, 10) === g.id);\n            onChange(group, \"group\");\n        }\n    }\n    render() {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { devices, groups, value, type, onChange, ...rest } = this.props;\n        let options = [<option key=\"hidden\" hidden>Select device</option>];\n\n        const devicesOptions = [];\n        devices.forEach((device) => {\n            devicesOptions.push(<option\n                title={device.definition?.description}\n                key={device.ieee_address}\n                value={device.ieee_address}\n            >{getDeviceDisplayName(device)}</option>);\n        });\n        if (groups && groups.length) {\n            const groupOptions = groups.map(group => <option\n                key={group.friendly_name}\n                value={group.id}>{group.friendly_name}\n            </option>);\n            options.push(<optgroup key=\"Groups\" label=\"Groups\">{groupOptions}</optgroup>);\n            options.push(<optgroup key=\"Devices\" label=\"Devices\">{devicesOptions}</optgroup>);\n        } else {\n            options = options.concat(devicesOptions);\n        }\n        return <select\n            value={value}\n            onChange={this.onSelect}\n            className=\"form-control\"\n            {...rest}\n        >{options}\n\n        </select>;\n\n    }\n}","import React, { ChangeEvent, Component, SelectHTMLAttributes } from \"react\";\nimport { Endpoint } from \"../../types\";\n\n\n\ninterface EndpointPickerProps {\n    onChange(endpoint: Endpoint): void;\n    value: Endpoint;\n    values: Endpoint[];\n}\n\nexport default class EndpointPicker extends Component<EndpointPickerProps & Omit<SelectHTMLAttributes<HTMLSelectElement>, 'onChange'>, {}> {\n    onSelect = (e: ChangeEvent<HTMLSelectElement>): void => {\n        const { onChange } = this.props;\n        const { value } = e.target as HTMLSelectElement;\n        onChange(value);\n    }\n    render() {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { onSelect, value, values, disabled, onChange, ...rest } = this.props;\n        const hasOnlyOneEP = values.length == 1;\n\n        const options = values.map(ep => <option key={ep} value={ep}>{ep}</option>)\n        options.unshift(<option key=\"hidded\" hidden>Select endpoint</option>);\n        return <select disabled={value && hasOnlyOneEP || disabled}\n            value={value}\n            className=\"form-control\"\n            title={hasOnlyOneEP ? 'The only endpoint' : null}\n            onChange={this.onSelect}\n            {...rest}>\n            {options}\n        </select>;\n\n    }\n}","import React, { ChangeEvent, Component, InputHTMLAttributes } from \"react\";\nimport { Cluster } from \"../../types\";\nimport { randomString } from \"../../utils\";\n\n\n\nconst clusterDescriptions = {\n    genPowerCfg: \"PowerCfg\",\n    genScenes: \"Scenes\",\n    genOnOff: \"OnOff\",\n    genLevelCtrl: \"LevelCtrl\",\n    lightingColorCtrl: \"LColorCtrl\",\n    closuresWindowCovering: \"Closures\",\n    genMultistateInput: \"MultistateInput\",\n    genGroups: \"Groups\",\n    genOta: \"Ota\",\n    touchlink: \"Touchlink\",\n    genIdentify: \"Identify\",\n    msTemperatureMeasurement: \"Temperature\",\n    msIlluminanceMeasurement: \"Illuminance\",\n    msRelativeHumidity: \"Humidity\",\n    msPressureMeasurement: \"Pressure\",\n    msSoilMoisture: \"Soil Moisture\",\n}\n\nexport enum PickerType {\n    MULTIPLE,\n    SINGLE\n}\nexport interface ClusterGroup {\n    name: string;\n    clusters: Cluster[];\n}\ninterface ClusterPickerProps {\n    value: Cluster[] | Cluster;\n    onChange(arg1: Cluster[] | Cluster | undefined): void;\n    clusters: Cluster[] | ClusterGroup[];\n    pickerType: PickerType;\n}\ninterface ClusterPickerState {\n    pickerId: string;\n}\n\n\n\nfunction isClusterGroup(clusters: Cluster[] | ClusterGroup[]): clusters is ClusterGroup[] {\n\n    return typeof clusters[0] !== 'string';\n}\n\n// eslint-disable-next-line react/prefer-stateless-function\nexport default class ClusterPicker extends Component<ClusterPickerProps & Omit<InputHTMLAttributes<HTMLInputElement | HTMLSelectElement>, 'onChange'>, ClusterPickerState> {\n    public static defaultProps = {\n        clusters: []\n    };\n    state: Readonly<ClusterPickerState> = {\n        pickerId: randomString(5)\n    }\n\n    onChange = (e: ChangeEvent<HTMLInputElement | HTMLSelectElement>): void => {\n        const { onChange, pickerType } = this.props;\n        let { value } = this.props;\n        const { name } = e.target;\n        if (pickerType === PickerType.MULTIPLE) {\n            const { checked: isChecked } = e.target as HTMLInputElement;\n            if (isChecked) {\n                (value as Cluster[]).push(name);\n            } else {\n                value = (value as Cluster[]).filter(v => v !== name);\n            }\n        } else {\n            const { value: selectedValue } = e.target as HTMLInputElement;\n            value = selectedValue;\n        }\n        onChange(value);\n    }\n    render() {\n        const { pickerType } = this.props;\n        if (pickerType === PickerType.MULTIPLE) {\n            return this.renderMultiPicker();\n        } else {\n            return this.renderSinglePicker();\n        }\n    }\n    renderMultiPicker() {\n        const { pickerId } = this.state;\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { clusters, value, pickerType, onChange, ...rest } = this.props;\n        let options = [];\n        if (isClusterGroup(clusters)) {\n            //TODO: implement if necessary\n            console.warn(\"Not implemented\");\n        } else {\n            options = clusters.map(cluster => (\n                <div key={cluster} className=\"form-check form-check-inline\">\n                    <input className=\"form-check-input\"\n                        type=\"checkbox\"\n                        checked={value.includes(cluster)}\n                        name={cluster}\n                        id={`${pickerId}_${cluster}`}\n                        value={cluster}\n                        onChange={this.onChange}\n                        {...rest}\n                    />\n                    <label className=\"form-check-label\" htmlFor={`${pickerId}_${cluster}`} title={cluster}>{clusterDescriptions[cluster] ?? cluster}</label>\n                </div>\n            ));\n        }\n\n        return options;\n    }\n\n    renderSinglePicker() {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { clusters, onChange, pickerType, ...rest } = this.props;\n        const options = [<option key=\"hidden\" hidden>Select cluster</option>];\n        if (isClusterGroup(clusters)) {\n            clusters.forEach(group => {\n                const groupOptions = group.clusters.map(cluster => <option key={cluster} value={cluster}>{clusterDescriptions[cluster] ?? cluster}</option>)\n                if (groupOptions.length === 0) {\n                    groupOptions.push(<option key=\"none\" disabled>None</option>)\n                }\n                options.push(<optgroup key={group.name} label={group.name}>{groupOptions}</optgroup>);\n            });\n\n\n        } else {\n            clusters.forEach(cluster => {\n                options.push(<option key={cluster} value={cluster}>{clusterDescriptions[cluster] ?? cluster}</option>);\n            })\n        }\n        return (<select className=\"form-select\" onChange={this.onChange} {...rest}>\n            {options}\n        </select>)\n    }\n}","import React, { Component } from \"react\";\nimport { Device, Endpoint, Cluster, ObjectType } from \"../../types\";\nimport DevicePicker from \"../device-picker\";\nimport EndpointPicker from \"../endpoint-picker\";\nimport ClusterPicker, { PickerType } from \"../cluster-picker\";\nimport Button from \"../button\";\nimport { Group } from \"../../store\";\nimport { NiceBindingRule } from \"./bind\";\nimport { getEndpoints } from \"../../utils\";\n\n\n\n\ninterface BindRowProps {\n    rule: NiceBindingRule;\n    idx: number;\n    devices: Map<string, Device>;\n    groups: Group[];\n    device: Device;\n    onBind(from: string, to: string, clusters: Cluster[]): void;\n    onUnBind(from: string, to: string, clusters: Cluster[]): void;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\ninterface BindRowState {\n    stateRule: NiceBindingRule;\n}\nconst getTarget = (rule: NiceBindingRule, devices: Map<string, Device>, groups: Group[]) => {\n    if (rule.target.type === \"group\") {\n        return groups.find(g => g.id === rule.target.id);\n    }\n    return devices.get(rule.target.ieee_address);\n}\ntype Action = \"Bind\" | \"Unbind\";\nexport default class BindRow extends Component<BindRowProps, BindRowState> {\n    state: Readonly<BindRowState> = {\n        stateRule: null\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    static getDerivedStateFromProps(props: Readonly<BindRowProps>, state: BindRowState): Partial<BindRowState> {\n        const { rule } = props;\n        return {\n            stateRule: rule\n        };\n    }\n    setSourceEp = (sourceEp: Endpoint): void => {\n        const { stateRule } = this.state;\n        stateRule.source.endpoint = sourceEp;\n        this.setState({ stateRule });\n    }\n\n    setDestination = (destination: Device | Group, type: ObjectType): void => {\n        const { stateRule } = this.state;\n        if (type === \"device\") {\n            const endpoints = getEndpoints(destination);\n            stateRule.target['ieee_address'] = (destination as Device)['ieee_address'];\n            stateRule.target.type = \"endpoint\";\n            stateRule.target.endpoint = endpoints[0];\n            delete stateRule.target.id;\n        } else if (type === \"group\") {\n            stateRule.target.id = (destination as Group).id;\n            stateRule.target.type = \"group\";\n            delete stateRule.target.ieee_address;\n        }\n        stateRule.clusters = [];\n        this.setState({ stateRule });\n    }\n\n    setDestinationEp = (destinationEp: Endpoint): void => {\n        const { stateRule } = this.state;\n        stateRule.target.endpoint = destinationEp;\n        stateRule.clusters = [];\n        this.setState({ stateRule });\n    }\n\n    setClusters = (clusters: Cluster[]): void => {\n        const { stateRule } = this.state;\n        stateRule.clusters = clusters;\n        this.setState({ stateRule });\n    }\n\n    getBidningParams(): { from: string; to: string; clusters: string[] } {\n        const { device, groups, devices } = this.props;\n        const { stateRule } = this.state;\n        const from = `${device.friendly_name}/${stateRule.source.endpoint}`;\n        let to: string;\n        if (stateRule.target.type === \"group\") {\n            const targetGroup = groups.find(group => group.id === stateRule.target.id);\n            to = `${targetGroup.friendly_name}`;\n        } else if (stateRule.target.type === \"endpoint\") {\n            const targeDevice = devices.get(stateRule.target.ieee_address);\n            if (targeDevice.type === \"Coordinator\") {\n                to = `${targeDevice.friendly_name}`;\n            } else {\n                to = `${targeDevice.friendly_name}/${stateRule.target.endpoint}`;\n            }\n        }\n        return { from, to, clusters: stateRule.clusters };\n    }\n\n    onBindOrUnBindClick = (action: Action): void => {\n        const { onUnBind, onBind } = this.props;\n        const { from, to, clusters } = this.getBidningParams();\n        if (action == \"Bind\") {\n            onBind(from, to, clusters);\n        } else {\n            onUnBind(from, to, clusters);\n        }\n    }\n\n    isValidRule(): boolean {\n        const { stateRule } = this.state;\n        let valid = false;\n        if (stateRule.target.type == \"endpoint\") {\n            valid = stateRule.source.endpoint\n                && stateRule.target.ieee_address\n                && stateRule.target.endpoint\n                && stateRule.clusters.length > 0;\n        } else if (stateRule.target.type == \"group\") {\n            valid = stateRule.source.endpoint\n                && stateRule.target.id\n                && stateRule.clusters.length > 0;\n        }\n        return valid;\n    }\n\n    render() {\n        const { devices, groups, idx, device } = this.props;\n        const { stateRule } = this.state;\n\n        const targetType: ObjectType = stateRule.target.type === \"endpoint\" ? \"device\" : \"group\";\n\n        const sourceEndpoints = getEndpoints(device);\n        const target = getTarget(stateRule, devices, groups);\n        const destinationEndpoints = getEndpoints(target);\n\n        const possibleClusters: Set<Cluster> = new Set(stateRule.clusters);\n        const destEndpoint = device.endpoints.get(stateRule.source.endpoint);\n        if (destEndpoint) {\n            destEndpoint.clusters.output.forEach(cluster => possibleClusters.add(cluster));\n        }\n        return (<tr>\n            <th scope=\"row\">{idx + 1}</th>\n            <td><EndpointPicker disabled={!stateRule.isNew} values={sourceEndpoints} value={stateRule.source.endpoint} onChange={this.setSourceEp} /></td>\n            <td><DevicePicker disabled={!stateRule.isNew} type={targetType} value={stateRule.target.ieee_address || stateRule.target.id} devices={devices} groups={groups} onChange={this.setDestination} /></td>\n            <td>{stateRule.target.type === \"endpoint\" ? <EndpointPicker disabled={!stateRule.isNew} values={destinationEndpoints} value={stateRule.target.endpoint} onChange={this.setDestinationEp} /> : null}</td>\n            <td><ClusterPicker pickerType={PickerType.MULTIPLE} clusters={Array.from(possibleClusters)} value={stateRule.clusters} onChange={this.setClusters} /></td>\n            <td><div className=\"btn-group btn-group-sm\">\n                <Button<Action> item={\"Bind\"} disabled={!this.isValidRule()} title=\"Bind\" className=\"btn btn-primary\" onClick={this.onBindOrUnBindClick}><i\n                    className=\"fa fa-heart\" /></Button>\n                <Button<Action> item={\"Unbind\"} disabled={!stateRule.isNew && !this.isValidRule()} title=\"Unbind\" className=\"btn btn-secondary\" onClick={this.onBindOrUnBindClick}><i\n                    className=\"fa fa-heart-broken\" /></Button>\n            </div></td>\n        </tr>);\n    }\n}","import React, { Component } from \"react\";\nimport { Device, Cluster, Endpoint } from \"../../types\";\nimport BindRow from \"./bind-row\";\nimport actions, { BindApi } from \"../../actions\";\nimport { connect } from \"unistore/react\";\nimport { GlobalState, Group } from \"../../store\";\nimport { getEndpoints } from \"../../utils\";\n\n\ninterface PropsFromStore {\n    devices: Map<string, Device>;\n    groups: Group[];\n}\ninterface BindProps {\n    device: Device;\n}\n\nexport interface NiceBindingRule {\n    id?: number;\n    isNew?: number;\n    source: {\n        ieee_address: string;\n        endpoint: Endpoint;\n    };\n    target: {\n        id?: number;\n        endpoint?: Endpoint;\n        ieee_address?: string;\n        type: \"endpoint\" | \"group\";\n    };\n    clusters: Cluster[];\n}\nconst rule2key = (rule: NiceBindingRule): string => `${rule.source.endpoint}-${rule.isNew}${rule.source.ieee_address}-${rule.target.id}-${rule.target.ieee_address}-${rule.clusters.join('-')}`;\nconst convertBidningsIntoNiceStructure = (device: Device): NiceBindingRule[] => {\n    const bindings = {};\n    device.endpoints.forEach((description, endpoint) => {\n        description.bindings\n            .forEach(b => {\n                let targetId = b.target.id ?? `${b.target.ieee_address}-${b.target.endpoint}`;\n\n                targetId = `${targetId}-${endpoint}`;\n\n                if (bindings[targetId]) {\n                    bindings[targetId].clusters.push(b.cluster);\n                } else {\n                    bindings[targetId] = {\n                        source: {\n                            // eslint-disable-next-line @typescript-eslint/camelcase\n                            ieee_address: device.ieee_address,\n                            endpoint\n                        },\n                        target: b.target,\n                        clusters: [b.cluster]\n                    }\n                }\n            });\n    });\n    return Object.values(bindings);\n}\ntype BindState = {\n    bidingRules: NiceBindingRule[];\n}\nexport class Bind extends Component<BindProps & PropsFromStore & BindApi, BindState> {\n    state: BindState = {\n        bidingRules: []\n    }\n    onBindClick = (from: string, to: string, clusters: Cluster[]): void => {\n        const { addBind } = this.props;\n        addBind(from, to, clusters);\n    };\n    onUnBindClick = (from: string, to: string, clusters: Cluster[]): void => {\n        const { removeBind } = this.props;\n        removeBind(from, to, clusters);\n    };\n    static getDerivedStateFromProps(props: Readonly<BindProps & PropsFromStore>, state: BindState): Partial<BindState> {\n        const { device } = props;\n        const endpoints = getEndpoints(device);\n        const bidingRules = convertBidningsIntoNiceStructure(device);\n        bidingRules.push({ isNew: Date.now(), target: {}, source: { 'ieee_address': device.ieee_address, endpoint: endpoints[0] }, clusters: [] } as NiceBindingRule);\n        return {\n            bidingRules\n        };\n    }\n    render() {\n        const { device, devices, groups } = this.props;\n        const { bidingRules } = this.state;\n        return (\n            <div className=\"table-responsive\">\n                <table className=\"table\">\n                    <thead>\n                        <tr>\n                            <th scope=\"col\">#</th>\n                            <th scope=\"col\">Source EP</th>\n                            <th scope=\"col\">Destination</th>\n                            <th scope=\"col\">Destination EP</th>\n                            <th scope=\"col\">Clusters</th>\n                            <th scope=\"col\">Actions</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {\n                            bidingRules.map((rule, idx) => <BindRow\n                                key={rule2key(rule)}\n                                rule={rule}\n                                groups={groups}\n                                onUnBind={this.onUnBindClick}\n                                onBind={this.onBindClick}\n                                device={device}\n                                idx={idx}\n                                devices={devices} />)\n                        }\n                    </tbody>\n\n                </table>\n            </div>\n        );\n    }\n}\n\nconst mappedProps = [\"devices\", \"groups\"];\nconst ConnectedBindPage = connect<BindProps, {}, GlobalState, PropsFromStore & BindApi>(mappedProps, actions)(Bind);\nexport default ConnectedBindPage","import React, { ChangeEvent, Component, InputHTMLAttributes } from \"react\";\nimport { Attribute, Cluster } from \"../../types\";\n\nimport Clusters from \"zigbee-herdsman/dist/zcl/definition/cluster\"\n\ninterface AttributePickerProps {\n    cluster: Cluster;\n    value: Attribute;\n    onChange: (attr: Attribute) => void;\n}\n// eslint-disable-next-line react/prefer-stateless-function\nexport default class AttributePicker extends Component<AttributePickerProps & Omit<InputHTMLAttributes<HTMLSelectElement>, 'onChange'>, {}> {\n\n    onChange = (e: ChangeEvent<HTMLSelectElement>): void => {\n        const { onChange } = this.props;\n        const { value } = e.target;\n        onChange(value);\n    }\n    render() {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { cluster, onChange, ...rest } = this.props;\n        let attrs = [];\n        const clusterDefinition = Clusters[cluster];\n        if (clusterDefinition) {\n            attrs = Object.keys(clusterDefinition.attributes);\n        }\n        const options = attrs.map(attr => <option key={attr} value={attr}>{attr}</option>);\n        options.unshift(<option key=\"none\" hidden>Select attribute</option>)\n        return (<select disabled={attrs.length === 0} className=\"form-select\" onChange={this.onChange} {...rest}>\n            {options}\n        </select>)\n    }\n}","import React, { ChangeEvent, Component } from \"react\";\nimport { Device, Endpoint, Cluster, Attribute } from \"../../types\";\n\nimport EndpointPicker from \"../endpoint-picker\";\nimport ClusterPicker, { ClusterGroup, PickerType } from \"../cluster-picker\";\n\nimport { NiceReportingingRule } from \"./reporting\";\nimport { getEndpoints } from \"../../utils\";\nimport AttributePicker from \"../attribute-picker\";\nimport Clusters from \"zigbee-herdsman/dist/zcl/definition/cluster\"\nimport Button from \"../button\";\n\n\ninterface ReportingRowProps {\n  rule: NiceReportingingRule;\n  idx: number;\n  device: Device;\n  onApply(rule: NiceReportingingRule): void;\n}\ninterface ReportingRowState {\n  stateRule: NiceReportingingRule;\n}\n\nconst getClusters = (device: Device, endpoint: Endpoint): ClusterGroup[] => {\n  let possibleClusters = Object.keys(Clusters);\n  let availableClusters = [];\n  const ep = device.endpoints.get(endpoint);\n  if (ep) {\n    availableClusters = availableClusters.concat(ep.clusters.output);\n    possibleClusters = possibleClusters.filter(cluster => !availableClusters.includes(cluster))\n  }\n  return [\n    {\n      name: 'Avaliable',\n      clusters: availableClusters\n    },\n    {\n      name: 'Possible',\n      clusters: possibleClusters\n    }\n  ]\n}\nconst requiredRuleFileds = ['maximum_report_interval', 'minimum_report_interval', 'reportable_change', 'endpoint', 'cluster', 'attribute'];\nconst isValidRule = (rule: NiceReportingingRule): boolean => {\n  return requiredRuleFileds.every(field => rule[field] !== undefined)\n}\nexport default class ReportingRow extends Component<ReportingRowProps, ReportingRowState> {\n\n  state: Readonly<ReportingRowState> = {\n    stateRule: {} as NiceReportingingRule\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  static getDerivedStateFromProps(props: Readonly<ReportingRowProps>, state: ReportingRowState): Partial<ReportingRowState> {\n    const { rule } = props;\n    return {\n      stateRule: rule\n    };\n  }\n\n  setSourceEp = (sourceEp: Endpoint): void => {\n    const { stateRule } = this.state;\n    stateRule.endpoint = sourceEp;\n    this.setState({ stateRule });\n  }\n  setCluster = (cluster: Cluster): void => {\n    const { stateRule } = this.state;\n    stateRule.cluster = cluster;\n    this.setState({ stateRule });\n  }\n\n  setAttribute = (attr: Attribute): void => {\n    const { stateRule } = this.state;\n    stateRule.attribute = attr;\n    this.setState({ stateRule });\n  }\n\n  changeHandler = (event: ChangeEvent<HTMLInputElement>): void => {\n    const { stateRule } = this.state;\n    const { name, value } = event.target;\n    stateRule[name] = value;\n    this.setState({ stateRule });\n  }\n\n  applyRule = (): void => {\n    const { onApply } = this.props;\n    const { stateRule } = this.state;\n    onApply(stateRule);\n  }\n\n  disableRule = (): void => {\n    const { onApply } = this.props;\n    const { stateRule } = this.state;\n    // eslint-disable-next-line @typescript-eslint/camelcase\n    onApply({ ...stateRule, maximum_report_interval: 0xFFFF });\n  }\n\n\n  render() {\n    const { rule, idx, device } = this.props;\n    const { stateRule } = this.state;\n    const sourceEndpoints = getEndpoints(device);\n\n    return (<tr>\n      <th scope=\"row\">{idx + 1}</th>\n      <td><EndpointPicker disabled={!rule.isNew} values={sourceEndpoints} value={stateRule.endpoint} onChange={this.setSourceEp} /></td>\n      <td><ClusterPicker disabled={!stateRule.endpoint} pickerType={PickerType.SINGLE} clusters={getClusters(device, stateRule.endpoint)} value={stateRule.cluster} onChange={this.setCluster} /></td>\n      <td><AttributePicker value={stateRule.attribute} cluster={stateRule.cluster} onChange={this.setAttribute} /></td>\n      <td><input onChange={this.changeHandler} value={stateRule.minimum_report_interval} required type=\"number\" name=\"minimum_report_interval\" className=\"form-control\" /></td>\n      <td><input onChange={this.changeHandler} value={stateRule.maximum_report_interval} required type=\"number\" name=\"maximum_report_interval\" className=\"form-control\" /></td>\n      <td><input placeholder=\"Enter 65535 to disable reporting\" onChange={this.changeHandler} value={stateRule.reportable_change} required type=\"number\" name=\"reportable_change\" className=\"form-control\" /></td>\n      <td>\n        <div className=\"btn-group\" role=\"group\" aria-label=\"Basic example\">\n          <Button<void> disabled={!isValidRule(stateRule)} className=\"btn btn-primary\" onClick={this.applyRule}>Apply</Button>\n          {!stateRule.isNew ? <Button<void> promt className=\"btn btn-danger\" onClick={this.disableRule}>Disable</Button> : null}\n        </div>\n      </td>\n    </tr>);\n  }\n}","import React, { Component } from \"react\";\nimport { Device, Cluster, Endpoint, Attribute } from \"../../types\";\n\nimport actions, { ReportingApi } from \"../../actions\";\nimport { connect } from \"unistore/react\";\nimport { GlobalState, Group } from \"../../store\";\nimport ReportingRow from \"./reporting-row\";\n\n\ninterface PropsFromStore {\n    devices: Map<string, Device>;\n    groups: Group[];\n}\ninterface ReportingProps {\n    device: Device;\n}\n\nexport interface NiceReportingingRule {\n    id?: number;\n    isNew?: number;\n    endpoint: Endpoint;\n\n    cluster: Cluster;\n    attribute: Attribute;\n    minimum_report_interval: number;\n    maximum_report_interval: number;\n    reportable_change: number;\n}\nconst convertBidningsIntoNiceStructure = (device: Device): NiceReportingingRule[] => {\n    const reportings: NiceReportingingRule[] = [];\n    device.endpoints.forEach((description, endpoint) => {\n        description.configured_reportings\n            .forEach(reportingRule => {\n                reportings.push({\n                    ...reportingRule,\n                    endpoint\n                } as NiceReportingingRule)\n            });\n    });\n    return reportings;\n}\ntype ReportingState = {\n    reportingRules: NiceReportingingRule[];\n}\n\nconst rule2key = (rule: NiceReportingingRule): string => `${rule.isNew}${rule.cluster}-${rule.attribute}`;\n\nexport class Reporting extends Component<ReportingProps & PropsFromStore & ReportingApi, ReportingState> {\n    state: ReportingState = {\n        reportingRules: []\n    }\n    static getDerivedStateFromProps(props: Readonly<ReportingProps & PropsFromStore>): Partial<ReportingState> {\n        const { device } = props;\n        // const endpoints = getEndpoints(device);\n        const reportingRules = convertBidningsIntoNiceStructure(device);\n\n        // eslint-disable-next-line @typescript-eslint/camelcase\n        reportingRules.push({ isNew: Date.now(), reportable_change: 0, minimum_report_interval: 60, maximum_report_interval: 3600 } as NiceReportingingRule);\n        return {\n            reportingRules\n        };\n    }\n\n    onApply = (rule: NiceReportingingRule) => {\n        const { configureReport, device } = this.props;\n        // eslint-disable-next-line @typescript-eslint/camelcase\n        const { cluster, endpoint, attribute, minimum_report_interval, maximum_report_interval, reportable_change } = rule;\n        configureReport(`${device.friendly_name}/${endpoint}`, {\n            // eslint-disable-next-line @typescript-eslint/camelcase\n            cluster, attribute, minimum_report_interval, maximum_report_interval, reportable_change\n        });\n    }\n    render() {\n        const { device } = this.props;\n        const { reportingRules } = this.state;\n\n        return (\n            <div className=\"table-responsive\">\n                <table className=\"table\">\n                    <thead>\n                        <tr>\n                            <th scope=\"col\">#</th>\n                            <th scope=\"col\">Endpoint</th>\n                            <th scope=\"col\">Cluster</th>\n                            <th scope=\"col\">Attribute</th>\n                            <th scope=\"col\">Min rep interval</th>\n                            <th scope=\"col\">Max rep interval</th>\n                            <th scope=\"col\">Min rep change</th>\n                            <th scope=\"col\">&nbsp;</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {\n                            reportingRules.map((rule, idx) =>\n                                <ReportingRow\n                                    key={rule2key(rule)}\n                                    idx={idx}\n                                    rule={rule}\n                                    device={device}\n                                    onApply={this.onApply}\n                                />)\n                        }\n                    </tbody>\n\n                </table>\n            </div>\n        );\n    }\n}\n\nconst mappedProps = [\"devices\", \"groups\"];\nconst ConnectedReportingPage = connect<ReportingProps, {}, GlobalState, PropsFromStore & ReportingApi>(mappedProps, actions)(Reporting);\nexport default ConnectedReportingPage","import React, { Component } from \"react\";\nimport { Device, DeviceState } from \"../../types\";\nimport actions, { StateApi } from \"../../actions\";\nimport { connect } from \"unistore/react\";\nimport { GlobalState } from \"../../store\";\n\ninterface PropsFromStore {\n    deviceStates: Map<string, DeviceState>;\n\n}\ninterface StatesProps {\n    device: Device;\n}\n\nclass States extends Component<StatesProps & PropsFromStore & StateApi, {}> {\n    setStateValue = (name: string, value: unknown): void => {\n        const { setStateValue, device } = this.props;\n        setStateValue(device.friendly_name, name, value);\n    };\n\n    render() {\n        const { device, deviceStates } = this.props;\n        const deviceState = deviceStates.get(device.friendly_name) ?? {};\n        return <pre>{JSON.stringify(deviceState, null, 4)}</pre>;\n    }\n}\n\nconst mappedProps = [\"deviceStates\"];\nconst ConnectedDeviceStates = connect<StatesProps, {}, GlobalState, StateApi>(mappedProps, actions)(States);\nexport default ConnectedDeviceStates;\n","export type DeviceType = \"EndDevice\" | \"Router\" | \"Coordinator\";\n\n\ninterface OTAState {\n    state: \"available\" | \"updating\";\n    progress: number;\n    remaining: number;\n}\nexport type RGBColor = {\n    r: number;\n    g: number;\n    b: number;\n}\nexport type HueSaturationColor = {\n    hue: number;\n    saturation: number;\n}\n\nexport type XYColor = {\n    x: number;\n    y: number;\n}\nexport type AnyColor = RGBColor | XYColor | HueSaturationColor;\nexport interface DeviceState {\n    battery?: number;\n    battery_low?: boolean;\n    last_seen?: string | number;\n    elapsed?: number;\n    linkquality: number;\n    update?: OTAState;\n    state?: string;\n    brightness?: number;\n    color_temp?: number;\n    color?: AnyColor;\n    tilt?: number;\n    position?: number;\n    [k: string]: string | number | boolean | OTAState | AnyColor;\n}\n\nexport type Cluster = string;\nexport type Attribute = string;\n\nexport type Endpoint = string | number;\n\n\n\n\nexport interface Meta {\n    revision: number;\n    transportrev: number;\n    product: number;\n    majorrel: number;\n    minorrel: number;\n    maintrel: number;\n}\n\nexport interface Coordinator {\n    type: string;\n    meta: Meta;\n}\n\nexport interface Network {\n    channel: number;\n    pan_id: number;\n    extended_pan_id: number[];\n}\nexport interface Z2MConfig {\n    homeassistant: boolean;\n    advanced: {\n        elapsed: boolean;\n        last_seen: 'disable' | 'ISO_8601' | 'ISO_8601_local' | 'epoch';\n        legacy_api: boolean;\n    };\n    [k: string]: unknown;\n}\nexport interface BridgeConfig {\n    version: string;\n    commit: string;\n    coordinator: Coordinator;\n    network: Network;\n    log_level: string;\n    permit_join: boolean;\n\n}\n\nexport interface BridgeInfo {\n    config?: Z2MConfig;\n    permit_join: boolean;\n    commit?: string;\n    version?: string;\n    coordinator?: {\n        meta?: {\n            revision?: string;\n        };\n        type?: string;\n    };\n}\n\nexport type PowerSource = \"Battery\" | \"Mains (single phase)\" | \"DC Source\";\n\nexport type GenericFeatureType = \"numeric\" | \"binary\" | \"enum\" | \"text\";\nexport type ComposeiteFeatureType = \"fan\" | \"light\" | \"switch\" | \"cover\" | \"lock\" | \"composite\" | \"climate\";\nexport type AllPossibleFeatures = GenericFeatureType & ComposeiteFeatureType;\n\n\nexport enum FeatureAccessMode {\n    NONE,\n    ACCESS_STATE = 0b001,\n    ACCESS_WRITE = 0b010,\n    ACCESS_READ = 0b100,\n}\nexport interface GenericExposedFeature {\n    type: GenericFeatureType;\n    name?: string;\n    unit?: \"string\";\n    access?: FeatureAccessMode;\n    endpoint?: Endpoint;\n    property: string;\n    description?: string;\n}\n\nexport interface BinaryFeature extends GenericExposedFeature {\n    type: \"binary\";\n    value_on: unknown;\n    value_off: unknown;\n    value_toggle?: unknown;\n}\n\nexport interface CompositeFeature extends Omit<GenericExposedFeature, \"type\"> {\n    type: ComposeiteFeatureType;\n    features: (GenericExposedFeature | CompositeFeature)[];\n}\n\nexport type GenericOrCompositeFeature = GenericExposedFeature | CompositeFeature;\n\nexport interface NumericFeaturePreset {\n    name: string;\n    value: number;\n    description?: string;\n}\nexport interface NumericFeature extends GenericExposedFeature {\n    type: \"numeric\";\n    value_min?: number;\n    value_max?: number;\n    presets?: NumericFeaturePreset[];\n}\n\nexport interface TextualFeature extends GenericExposedFeature {\n    type: \"text\";\n}\n\nexport interface EnumFeature extends GenericExposedFeature {\n    type: \"enum\";\n    values: unknown[];\n}\n\nexport interface LightFeature extends CompositeFeature {\n    type: \"light\";\n}\n\nexport interface SwitchFeature extends CompositeFeature {\n    type: \"switch\";\n}\n\nexport interface CoverFeature extends CompositeFeature {\n    type: \"cover\";\n}\n\nexport interface LockFeature extends CompositeFeature {\n    type: \"lock\";\n}\nexport interface FanFeature extends CompositeFeature {\n    type: \"fan\";\n}\n\nexport interface ClimateFeature extends CompositeFeature {\n    type: \"climate\";\n}\n\nexport interface ColorFeature extends CompositeFeature {\n    type: \"composite\";\n    name: \"color_xy\" | \"color_hs\";\n    features: NumericFeature[];\n}\n\nexport interface DeviceDefinition {\n    description: string;\n    model: string;\n    supports: string;\n    vendor: string;\n    exposes: GenericExposedFeature[] | CompositeFeature[];\n}\nexport interface ReportingConfig {\n    cluster: Cluster;\n    attribute: Attribute;\n    maximum_report_interval: number;\n    minimum_report_interval: number;\n    reportable_change: number;\n}\nexport interface EndpointDescription {\n    bindings: BindRule[];\n    configured_reportings: ReportingConfig[];\n    clusters: {\n        input: Cluster[];\n        output: Cluster[];\n    };\n}\n\nexport interface Device {\n    ieee_address: string;\n    type: DeviceType;\n    network_address: number;\n    model: string;\n    friendly_name: string;\n    power_source: PowerSource;\n    model_id: string;\n    interviewing: boolean;\n    interview_completed: boolean;\n    software_build_id: number;\n    supported: boolean;\n    definition?: DeviceDefinition;\n    date_code: string;\n    endpoints: Map<Endpoint, EndpointDescription>;\n}\n\nexport type ObjectType = \"device\" | \"group\";\nexport interface BindRule {\n    cluster: Cluster;\n    target: {\n        id?: number;\n        endpoint?: Endpoint;\n        ieee_address?: string;\n        type: \"endpoint\" | \"group\";\n    };\n\n}\nexport type SortDirection = \"asc\" | \"desc\";\n\nexport interface TouchLinkDevice {\n    ieee_address: string;\n    channel: number;\n}","\nimport { GenericExposedFeature, BinaryFeature, NumericFeature, EnumFeature, LightFeature, CompositeFeature, SwitchFeature, CoverFeature, LockFeature, ColorFeature, TextualFeature, ClimateFeature } from \"../../types\";\n\nexport function isBinaryFeature(feature: GenericExposedFeature | CompositeFeature): feature is BinaryFeature {\n  return feature.type === \"binary\";\n}\n\nexport function isNumericFeature(feature: GenericExposedFeature | CompositeFeature): feature is NumericFeature {\n  return feature.type === \"numeric\";\n}\nexport function isTextualFeature(feature: GenericExposedFeature | CompositeFeature): feature is TextualFeature {\n  return feature.type === \"text\";\n}\n\nexport function isEnumFeature(feature: GenericExposedFeature | CompositeFeature): feature is EnumFeature {\n  return feature.type === \"enum\";\n}\n\nexport function isLightFeature(feature: GenericExposedFeature | CompositeFeature): feature is LightFeature {\n  return feature.type === \"light\";\n}\nexport function isSwitchFeature(feature: GenericExposedFeature | CompositeFeature): feature is SwitchFeature {\n  return feature.type === \"switch\";\n}\n\nexport function isCoverFeature(feature: GenericExposedFeature | CompositeFeature): feature is CoverFeature {\n  return feature.type === \"cover\";\n}\n\nexport function isLockFeature(feature: GenericExposedFeature | CompositeFeature): feature is LockFeature {\n  return feature.type === \"lock\";\n}\n\nexport function isCompositeFeature(feature: GenericExposedFeature | CompositeFeature): feature is CompositeFeature {\n  return feature.type === \"composite\" && (feature.name !== \"color_xy\" && feature.name !== \"color_hs\");\n}\n\nexport function isColorFeature(feature: GenericExposedFeature | CompositeFeature): feature is ColorFeature {\n  return feature.type === \"composite\" && (feature.name == \"color_xy\" || feature.name == \"color_hs\");\n}\n\nexport function isClimateFeature(feature: GenericExposedFeature | CompositeFeature): feature is ClimateFeature {\n  return feature.type === \"climate\";\n}\n","import React, { FunctionComponent } from \"react\";\nimport Button from \"../button\";\nimport cx from \"classnames\";\ntype Primitive = number | string;\n\nexport type ValueWithLabelOrPrimitive = {\n  value: number;\n  name: string;\n  description?: string;\n} | Primitive;\n\ntype EnumProps = {\n  value?: ValueWithLabelOrPrimitive;\n  onChange(value: unknown): void;\n  values: ValueWithLabelOrPrimitive[];\n}\n\n\nfunction isPrimitive(step: ValueWithLabelOrPrimitive): step is Primitive {\n  return [\"number\", \"string\"].includes(typeof step);\n}\n\nconst EnumEditor: FunctionComponent<EnumProps> = (props) => {\n  const { onChange, values, value } = props;\n  return <div className=\"btn-group me-2\">\n    {\n      values.map(v => <Button<ValueWithLabelOrPrimitive>\n        className={cx(\"btn btn-outline-secondary\", { active: isPrimitive(v) ? v === value : v.value == (isPrimitive(value) ? value : value?.value) })}\n        onClick={item => onChange(item)}\n        key={isPrimitive(v) ? v : v.name}\n        item={isPrimitive(v) ? v : v.value}\n        title={isPrimitive(v) ? v as string : v.description}\n      >{isPrimitive(v) ? v : v.name}</Button>)\n    }\n  </div>;\n}\nexport default EnumEditor;","import React, { Fragment, FunctionComponent, InputHTMLAttributes, useEffect, useState } from \"react\";\nimport { randomString } from \"../../utils\";\nimport cx from \"classnames\";\nimport EnumEditor, { ValueWithLabelOrPrimitive } from \"../enum-editor/enum-editor\";\n\n\n\ntype RangeProps = {\n  value: number;\n  unit?: string;\n  onChange(value: object | number): void;\n  steps?: ValueWithLabelOrPrimitive[];\n}\n\nconst RangeEditor: FunctionComponent<RangeProps & Omit<InputHTMLAttributes<HTMLInputElement>, 'onChange'>> = (props) => {\n  const { onChange, value, min, max, unit, steps, ...rest } = props;\n  const [id, setId] = useState<string>(randomString(5));\n  const [currentValue, setCurrentValue] = useState<number>(value)\n\n  useEffect(() => {\n    setCurrentValue(value)\n  }, [value]);\n\n  const showRange = min !== undefined && max !== undefined;\n  return <div className=\"input-group align-items-center\">\n    {steps ? <EnumEditor values={steps} onChange={onChange} /> : null}\n    {showRange ? <input\n      id={id}\n      min={min}\n      max={max}\n      type=\"range\"\n      className=\"form-range form-control border-0\"\n      value={currentValue}\n      onChange={e => setCurrentValue(e.target.valueAsNumber)}\n      onMouseUp={(() => onChange(currentValue))}\n      {...rest}\n    /> : null}\n    <input\n      type=\"number\"\n      className={cx(\"form-control\", {'ms-1': showRange})}\n      value={currentValue}\n      onChange={e => setCurrentValue(e.target.valueAsNumber)}\n      onBlur={() => onChange(currentValue)}\n      {...rest}\n      style={showRange ? { 'maxWidth': '100px' } : null}\n    />\n    {unit ? <span className=\"input-group-text\" style={{ 'minWidth': '66px' }}>{unit}</span> : null}\n  </div>\n}\n\nexport default RangeEditor;\n","import React from \"react\";\n\ntype DisplayValueProps = {\n  value: unknown;\n}\n\nexport function DisplayValue(props: DisplayValueProps) {\n  const { value } = props;\n  switch (typeof value) {\n    case 'boolean':\n      return <>{value ? 'true' : 'false'}</>;\n    case \"undefined\":\n      return <>N/A</>;\n    case \"object\":\n      return <>{value === null ? 'null' : JSON.stringify(value)}</>;\n    case \"string\":\n      return <>{value === \"\" ? <small className=\"text-muted\">empty string</small> : value}</>;\n    default:\n      return <>{JSON.stringify(value)}</>;\n  }\n}","\nimport React, { Fragment, FunctionComponent } from \"react\";\nimport { DeviceState, Device, Endpoint, GenericExposedFeature, CompositeFeature } from \"../../types\";\nimport { DisplayValue } from \"../DisplayValue\";\n\nexport interface BaseFeatureProps<T> {\n  feature: T;\n  deviceState: DeviceState;\n  device: Device;\n  onChange(endpoint: Endpoint, value: object): void;\n  onRead(endpoint: Endpoint, value: object): void;\n}\n\n\nexport const BaseViewer: FunctionComponent<BaseFeatureProps<GenericExposedFeature>> = (props) => {\n  const { feature: { property, unit }, deviceState } = props;\n  return <Fragment><strong><DisplayValue value={deviceState[property]}/></strong>{unit ? <small className=\"text-muted ms-1\">{unit}</small> : null}</Fragment>\n}\n\nexport const NoAccessError: FunctionComponent<BaseFeatureProps<GenericExposedFeature | CompositeFeature>> = ({ feature: { access } }) => <div className=\"alert alert-warning p-0\" role=\"alert\">Unknown acces {JSON.stringify(access, null, 4)}</div>;","import React, { FunctionComponent } from \"react\";\nimport { FeatureAccessMode, NumericFeature } from \"../../../types\";\nimport { ValueWithLabelOrPrimitive } from \"../../enum-editor/enum-editor\";\nimport RangeEditor from \"../../range-editor/range-editor\";\nimport { BaseFeatureProps, BaseViewer, NoAccessError } from \"../base\";\n\ninterface NumericProps extends BaseFeatureProps<NumericFeature> {\n  steps?: ValueWithLabelOrPrimitive[];\n}\n\nconst Numeric: FunctionComponent<NumericProps> = (props) => {\n  const { feature: { presets, access, endpoint, name, property, unit, value_max: valueMax, value_min: valueMin }, deviceState, steps, onChange } = props;\n  if (access & FeatureAccessMode.ACCESS_WRITE) {\n    return <RangeEditor\n      onChange={(value) => onChange(endpoint, { [name]: value })}\n      value={deviceState[property] as number ?? 0}\n      min={valueMin}\n      max={valueMax}\n      steps={presets && presets.length ? presets as ValueWithLabelOrPrimitive[]: steps}\n      unit={unit}\n    />\n  } else if (access & FeatureAccessMode.ACCESS_STATE) {\n    return <BaseViewer {...props} />\n  } else {\n    return <NoAccessError {...props} />\n  }\n}\n\nexport default Numeric;","import React, { ChangeEvent, Fragment, FunctionComponent, useState } from \"react\";\nimport { randomString } from \"../../utils\";\nimport Button from \"../button\";\nimport { DisplayValue } from \"../DisplayValue\";\n\ntype ToggleProps = {\n  onChange(value: unknown): void;\n\n  value: unknown;\n  valueOn: unknown;\n  valueOff: unknown;\n  label?: string;\n}\n\n\nconst Toggle: FunctionComponent<ToggleProps> = (props) => {\n  const { onChange, value, label, valueOn, valueOff } = props;\n  const [id, setId] = useState<string>(randomString(5));\n  const onCheckboxChange = (e: ChangeEvent<HTMLInputElement>) => onChange(e.target.checked ? valueOn : valueOff);\n  const valueExists = value !== undefined && value !== null;\n  return (\n    <Fragment>\n      <Button<unknown> className=\"btn btn-link ps-0\" item={valueOff} onClick={(item) => onChange(item)}><DisplayValue value={valueOff}/></Button>\n      {valueExists ? (\n        <div className=\"form-check form-switch d-inline-block\">\n        <input className=\"form-check-input\" type=\"checkbox\" id={id} checked={value === valueOn} onChange={onCheckboxChange} />\n        {label ? <label className=\"form-check-label\" htmlFor={id}>{label}</label> : null}\n      </div>\n      ): <i className=\"fa fa-question\" title=\"Current value unknown\"></i> }\n      <Button<unknown> className=\"btn btn-link\" item={valueOn} onClick={(item) => onChange(item)}><DisplayValue value={valueOn}/></Button>\n    </Fragment>\n  )\n}\n\nexport default Toggle;\n","import React, { FunctionComponent } from \"react\";\n\nimport { BinaryFeature, FeatureAccessMode } from \"../../../types\";\nimport Toggle from \"../../toggle\";\n\nimport { BaseFeatureProps, BaseViewer, NoAccessError } from \"../base\";\n\ntype BinaryProps = BaseFeatureProps<BinaryFeature>;\n\nconst Binary: FunctionComponent<BinaryProps> = (props) => {\n  const { feature: { access, endpoint, name, property, value_off: valueOff, value_on: valueOn }, deviceState, onChange } = props;\n  if (access & FeatureAccessMode.ACCESS_WRITE) {\n    return <Toggle\n      onChange={(value) => onChange(endpoint, { [property]: value })}\n      value={deviceState[property]}\n      valueOn={valueOn}\n      valueOff={valueOff}\n    />\n  } else if (access & FeatureAccessMode.ACCESS_STATE) {\n    return <BaseViewer {...props} />\n  } else {\n    return <NoAccessError {...props} />\n  }\n}\nexport default Binary;","\n\nimport React, { FunctionComponent } from \"react\";\n\nimport { EnumFeature, FeatureAccessMode } from \"../../../types\";\nimport EnumEditor, { ValueWithLabelOrPrimitive } from \"../../enum-editor/enum-editor\";\n\nimport { BaseFeatureProps, BaseViewer, NoAccessError } from \"../base\";\n\ntype EnumProps = BaseFeatureProps<EnumFeature>\n\nconst Enum: FunctionComponent<EnumProps> = (props) => {\n  const { onChange, feature: { access, name, values, endpoint, property }, deviceState } = props;\n  if (access & FeatureAccessMode.ACCESS_WRITE) {\n    return <EnumEditor\n      onChange={(value) => onChange(endpoint, { [name]: value })}\n      values={values as unknown as ValueWithLabelOrPrimitive[]}\n      value={deviceState[property] as ValueWithLabelOrPrimitive}\n    />\n  } else if (access & FeatureAccessMode.ACCESS_STATE) {\n    return <BaseViewer {...props} />\n  } else {\n    return <NoAccessError {...props} />\n  }\n}\nexport default Enum;","import React, { FunctionComponent } from \"react\";\nimport { LightFeature } from \"../../../types\";\nimport { scale } from \"../../../utils\";\nimport { ValueWithLabelOrPrimitive } from \"../../enum-editor/enum-editor\";\nimport { BaseFeatureProps } from \"../base\";\nimport Composite from \"../composite/composite\";\n\ntype LightProps = BaseFeatureProps<LightFeature>\nconst stepsConfiguration = {\n  brightness: [0, 25, 50, 75, 100].map<ValueWithLabelOrPrimitive>(item => ({ value: scale(item, [0, 100], [0, 255]), name: item + '%' })),\n  'color_temp': [1000, 2000, 3000, 4000, 5000, 6500].map<ValueWithLabelOrPrimitive>(kelvin => ({ value: 1000000.0 / kelvin, name: kelvin + 'K' }))\n};\n\nconst Light: FunctionComponent<LightProps> = (props) => <Composite type=\"light\" {...props} stepsConfiguration={stepsConfiguration} />;\nexport default Light;","import React, { FunctionComponent } from \"react\";\nimport { SwitchFeature } from \"../../../types\";\nimport { BaseFeatureProps } from \"../base\";\nimport Composite from \"../composite/composite\";\n\ntype SwitchProps = BaseFeatureProps<SwitchFeature>\n\nconst Switch: FunctionComponent<SwitchProps> = (props) => <Composite type=\"switch\" {...props} />;\n\nexport default Switch;","import React, { FunctionComponent } from \"react\";\nimport { CoverFeature } from \"../../../types\";\nimport { ValueWithLabelOrPrimitive } from \"../../enum-editor/enum-editor\";\nimport { BaseFeatureProps } from \"../base\";\nimport Composite from \"../composite/composite\";\n\nconst stepsConfiguration = {\n  position: [0, 25, 50, 75, 100].map<ValueWithLabelOrPrimitive>(item => ({ value: item, name: item + '' })),\n  tilt: [0, 25, 50, 75, 100].map<ValueWithLabelOrPrimitive>(item => ({ value: item, name: item + '' }))\n};\n\ntype CoverProps = BaseFeatureProps<CoverFeature>\n\nconst Cover: FunctionComponent<CoverProps> = (props) => <Composite type=\"cover\" {...props} stepsConfiguration={stepsConfiguration} />;\n\nexport default Cover;\n\n\n","import React, { FunctionComponent } from \"react\";\nimport { LockFeature } from \"../../../types\";\nimport { BaseFeatureProps } from \"../base\";\nimport Composite from \"../composite/composite\";\n\ntype LockProps = BaseFeatureProps<LockFeature>\n\nconst Lock: FunctionComponent<LockProps> = (props) => <Composite type=\"lock\" {...props} />\nexport default Lock;","import React, { FunctionComponent, InputHTMLAttributes, useEffect, useState } from \"react\";\nimport * as convertColors from \"color-convert\";\nimport { AnyColor, XYColor, HueSaturationColor } from \"../../types\";\nimport Button from \"../button\";\n\n\ntype Payload = AnyColor;\n\nexport type ColorFormat = \"color_xy\" | \"color_hs\";\ntype ColorProps = {\n  value: Payload;\n  steps?: string[];\n  format: ColorFormat;\n  onChange(value: object): void;\n}\n\nexport const toRGB = (source: AnyColor, sourceFormat: ColorFormat): string => {\n  switch (sourceFormat) {\n    case \"color_xy\":\n      {\n        const { x, y } = source as XYColor;\n        const z = 1.0 - x - y;\n        const Y = 1;\n        const X = (Y / y) * x;\n        const Z = (Y / y) * z;\n        return '#' + convertColors.xyz.hex([X * 100.0, Y * 100.0, Z * 100.0]);\n      }\n\n    case \"color_hs\":\n      {\n        const { hue, saturation } = source as HueSaturationColor;\n        return '#' + convertColors.hsv.hex([hue, saturation, 100]);\n      }\n    default:\n      return '#FFFFFF';\n  }\n}\n\nconst rgbToTargetFormat = (source: string, targetFormat: ColorFormat): object => {\n  switch (targetFormat) {\n    case \"color_hs\":\n      const [hue, saturation, v] = convertColors.hex.hsv(source);\n      return { hue, saturation };\n\n\n    case \"color_xy\":\n      const [X, Y, Z] = convertColors.hex.xyz(source);\n      const x = X / (X + Y + Z);\n      const y = Y / (X + Y + Z);\n      return { x, y };\n\n    default:\n      return { hex: source };\n  }\n\n}\nconst pridePallete = ['#FF0018', '#FFA52C', '#FFFF41', '#008018', '#0000F9', '#86007D'];\nconst ColorEditor: FunctionComponent<ColorProps & Omit<InputHTMLAttributes<HTMLInputElement>, 'onChange' | 'value'>> = (props) => {\n\n  const { onChange, value = {} as AnyColor, format, steps = pridePallete, ...rest } = props;\n  const [currentColor, setCurrentColor] = useState<string>(toRGB(value, format));\n  useEffect(() => {\n    setCurrentColor(toRGB(value, format))\n  }, [value, format]);\n\n  return <>\n    <div className=\"btn-group me-2\">\n      {\n        steps.map(step => <Button<string>\n          className=\"btn\"\n          style={{ backgroundColor: step }}\n          key={step}\n          item={step}\n          title={step}\n          onClick={(item) => onChange(rgbToTargetFormat(item, format))}>&nbsp;&nbsp;&nbsp;</Button>)\n      }\n    </div>\n    <input\n      type=\"color\"\n      className=\"form-control form-control-color\"\n      value={currentColor}\n      onChange={e => {\n        onChange(rgbToTargetFormat(e.target.value, format))\n      }}\n      {...rest}\n    />\n  </>\n\n}\n\nexport default ColorEditor;\n","import React, { FunctionComponent } from \"react\";\nimport { AnyColor, ColorFeature } from \"../../../../types\";\nimport ColorEditor from \"../../../color-editor/color-editor\";\n\nimport { BaseFeatureProps } from \"../../base\";\n\n\ntype ColorProps = BaseFeatureProps<ColorFeature>;\n\n\nconst Light: FunctionComponent<ColorProps> = (props) => {\n\n    const { deviceState, feature, onChange } = props;\n    const value = {};\n    for (const innerFeature of feature.features) {\n      value[innerFeature.name] = deviceState[feature.property]?.[innerFeature.property] ?? 0;\n    }\n    return <ColorEditor\n      onChange={(color) => onChange(feature.endpoint, { color })}\n      value={value as AnyColor}\n      format={feature.name} />\n}\nexport default Light;","import React, { Fragment, FunctionComponent, InputHTMLAttributes, useEffect, useState } from \"react\";\n\ntype TextualProps = {\n  value: string;\n  unit?: string;\n  onChange(value: string): void;\n}\n\nconst TextualEditor: FunctionComponent<TextualProps & Omit<InputHTMLAttributes<HTMLInputElement>, 'onChange'>> = (props) => {\n  const { onChange, value, unit, ...rest } = props;\n  const [currentValue, setCurrentValue] = useState<string>(value)\n\n  useEffect(() => {\n    setCurrentValue(value)\n  }, [value]);\n\n  return <Fragment>\n    <input\n      type=\"text\"\n      className=\"form-control\"\n      value={currentValue}\n      onChange={e => setCurrentValue(e.target.value)}\n      onBlur={() => onChange(currentValue)}\n      {...rest}\n    />\n    {unit ? <span className=\"input-group-text\" style={{'minWidth': '66px'}}>{unit}</span> : null}\n  </Fragment>\n}\n\nexport default TextualEditor;\n","import React, { FunctionComponent } from \"react\";\nimport { FeatureAccessMode, TextualFeature } from \"../../../types\";\nimport TextualEditor from \"../../textual-editor/textual-editor\";\n\nimport { BaseFeatureProps, BaseViewer, NoAccessError } from \"../base\";\n\ntype TextualProps = BaseFeatureProps<TextualFeature>;\n\nconst Textual: FunctionComponent<TextualProps> = (props) => {\n  const { feature: { access, endpoint, name, property }, deviceState, onChange } = props;\n  if (access & FeatureAccessMode.ACCESS_WRITE) {\n    return <TextualEditor\n      onChange={(value) => onChange(endpoint, { [name]: value })}\n      value={deviceState[property] as string ?? \"\"}\n    />\n  } else if (access & FeatureAccessMode.ACCESS_STATE) {\n    return <BaseViewer {...props} />\n  } else {\n    return <NoAccessError {...props} />\n  }\n}\nexport default Textual;","import React, { FunctionComponent } from \"react\";\nimport { ClimateFeature } from \"../../../types\";\n\nimport { BaseFeatureProps } from \"../base\";\nimport Composite from \"../composite/composite\";\n\n\ntype ClimateProps = BaseFeatureProps<ClimateFeature>\n\nconst Climate: FunctionComponent<ClimateProps> = (props) => <Composite type=\"climate\" {...props} />;\n\nexport default Climate;\n\n\n","import React, { Component, FunctionComponent, PropsWithChildren } from \"react\";\nimport { CompositeFeature, Endpoint, FeatureAccessMode, GenericExposedFeature } from \"../../../types\";\nimport { isBinaryFeature, isClimateFeature, isColorFeature, isCompositeFeature, isCoverFeature, isEnumFeature, isLightFeature, isLockFeature, isNumericFeature, isSwitchFeature, isTextualFeature } from \"../../device-page/type-guards\";\n\nimport Numeric from \"../numeric/numeric\";\n\nimport { BaseFeatureProps } from \"../base\";\nimport Binary from \"../binary/binary\";\nimport Enum from \"../enum/enum\";\nimport Light from \"../light/light\";\nimport Switch from \"../switch/switch\";\nimport Cover from \"../cover/cover\";\nimport Lock from \"../lock/lock\";\nimport Color from \"../composite/color/color\";\nimport Textual from \"../textual/textual\";\nimport Button from \"../../button\";\nimport groupBy from \"lodash/groupBy\";\nimport Climate from \"../climate/climate\";\n\n\ntype CompositeType = \"composite\" | \"light\" | \"switch\" | \"cover\" | \"lock\" | \"fan\" | \"climate\";\n\ninterface CompositeProps extends BaseFeatureProps<CompositeFeature> {\n  type: CompositeType;\n  stepsConfiguration?: object;\n}\n\ninterface CompositeState {\n  [key: string]: unknown;\n}\n\ntype FetatureWrapperProps = {\n  feature: CompositeFeature | GenericExposedFeature;\n  onRead(endpoint: Endpoint, property: object): void;\n};\nconst FeatureWrapper: FunctionComponent<PropsWithChildren<FetatureWrapperProps>> = (props) => {\n  const { children, feature, onRead } = props;\n  const isColor = feature.name?.startsWith(\"color_\"); //hardcode for color\n  const isReadable = (feature.access & FeatureAccessMode.ACCESS_READ) || isColor;\n  return <div className=\"row border-bottom pt-1\" >\n    <div className=\"col-12 col-md-3\">\n      <label className=\"col-form-label w-100\">\n        <div className=\"d-flex justify-content-between\">\n          <strong title={JSON.stringify(feature)}>{feature.name}</strong>\n          {isReadable ? (\n            <Button<CompositeFeature | GenericExposedFeature> item={feature} onClick={(item) => {\n              onRead(feature.endpoint, { [item.property]: \"\" })\n            }} className=\"btn btn-primary btn-sm\"><i className=\"fa fa-sync\"></i></Button>\n          ) : null}\n        </div>\n        {feature.description ? <small className=\"d-block text-muted\">{feature.description}</small> : null}\n      </label>\n\n    </div>\n\n\n    <div className=\"col-12 col-md-9 d-flex align-items-center\">\n      {children}\n    </div>\n\n  </div>\n}\n\nexport default class Composite extends Component<CompositeProps, CompositeState> {\n  state: Readonly<CompositeState> = {}\n  onChange = (endpoint: Endpoint, value: object) => {\n    const { onChange, feature } = this.props;\n    if (isCompositeFeature(feature)) {\n      this.setState(value)\n    } else {\n      onChange(endpoint, value);\n    }\n  }\n  onApplyClick = () => {\n    const { onChange, feature: { endpoint, property } } = this.props;\n    onChange(endpoint, property ? { [property]: this.state } : this.state);\n  }\n\n  onRead = (endpoint: Endpoint, property: object) => {\n    const { onRead, feature } = this.props;\n    if (isCompositeFeature(feature)) {\n      onRead(endpoint, {[feature.property]: property})\n    } else {\n      onRead(endpoint, property);\n    }\n\n  }\n  renderFeature = (feature: CompositeFeature | GenericExposedFeature) => {\n    const { deviceState, device, stepsConfiguration } = this.props;\n\n\n    const genericParams = { key: JSON.stringify(feature), device, deviceState, onChange: this.onChange, onRead: this.onRead };\n    const wrapperParams = { key: JSON.stringify(feature), feature, onRead: this.onRead };\n\n    if (isBinaryFeature(feature)) {\n      return <FeatureWrapper {...wrapperParams}>\n        <Binary feature={feature} {...genericParams} />\n      </FeatureWrapper>\n    } else if (isNumericFeature(feature)) {\n      return <FeatureWrapper {...wrapperParams}>\n        <Numeric feature={feature} {...genericParams}\n          steps={stepsConfiguration?.[feature.name]} />\n      </FeatureWrapper>\n    } else if (isTextualFeature(feature)) {\n      return <FeatureWrapper {...wrapperParams}>\n        <Textual feature={feature} {...genericParams} />\n      </FeatureWrapper>\n    } else if (isEnumFeature(feature)) {\n      return <FeatureWrapper {...wrapperParams}>\n        <Enum feature={feature} {...genericParams} />\n      </FeatureWrapper>\n    } else if (isLightFeature(feature)) {\n      return <Light feature={feature} {...genericParams} />\n    } else if (isSwitchFeature(feature)) {\n      return <Switch feature={feature} {...genericParams} />\n    } else if (isCoverFeature(feature)) {\n      return <Cover feature={feature} {...genericParams} />\n    } else if (isLockFeature(feature)) {\n      return <Lock feature={feature} {...genericParams} />\n    } else if (isColorFeature(feature)) {\n      return <FeatureWrapper {...wrapperParams}>\n        <Color feature={feature} {...genericParams} />\n      </FeatureWrapper>\n    } else if (isClimateFeature(feature)) {\n      return <Climate feature={feature} {...genericParams} />\n    } else if (isCompositeFeature(feature)) {\n      return <FeatureWrapper {...wrapperParams}>\n        <div className=\"row\">\n          <Composite type=\"composite\" feature={feature} {...genericParams} />\n        </div>\n      </FeatureWrapper>\n    }\n    return (<FeatureWrapper {...wrapperParams}>\n      <pre>{JSON.stringify(feature, null, 4)}</pre>\n    </FeatureWrapper>);\n  }\n  render() {\n    const MAGIC_NO_ENDPOINT = 'MAGIC_NO_ENDPOINT';\n    const { feature } = this.props;\n    const { features } = feature;\n    const groupedFeatures = groupBy(features, f => f.endpoint ?? MAGIC_NO_ENDPOINT);\n    const result = [];\n    if (groupedFeatures[MAGIC_NO_ENDPOINT]) {\n      result.push(...groupedFeatures[MAGIC_NO_ENDPOINT].map(this.renderFeature));\n      delete groupedFeatures[MAGIC_NO_ENDPOINT];\n    }\n    for (const epName in groupedFeatures) {\n      const featuresGroup = groupedFeatures[epName];\n      result.push(<div key={epName}>Endpoint: {epName}<div className=\"ps-4\">{...featuresGroup.map(this.renderFeature)}</div></div>);\n    }\n    if (isCompositeFeature(feature)) {\n      result.push(<div key={feature.name}><Button className=\"btn btn-primary float-right\" onClick={this.onApplyClick}>Apply</Button></div>)\n    }\n    return result;\n\n  }\n}\n","import React, { Component } from \"react\";\nimport { CompositeFeature, Device, DeviceState } from \"../../types\";\nimport actions, { StateApi } from \"../../actions\";\n\nimport { connect } from \"unistore/react\";\nimport { GlobalState } from \"../../store\";\n\nimport Composite from \"../features/composite/composite\";\n\ninterface PropsFromStore {\n    deviceStates: Map<string, DeviceState>;\n}\ninterface ExposesProps {\n    device: Device;\n}\n\nclass Exposes extends Component<ExposesProps & PropsFromStore & StateApi, {}> {\n    render() {\n        const { device, deviceStates, setDeviceState, getDeviceState } = this.props;\n        const deviceState = deviceStates.get(device.friendly_name) ?? {} as DeviceState;\n        if (device.definition?.exposes) {\n            return <Composite feature={{ features: device.definition.exposes } as CompositeFeature} type=\"composite\" device={device} deviceState={deviceState}\n                onChange={(endpoint, value) => {\n                    setDeviceState(`${device.friendly_name}${endpoint ? `/${endpoint}` : ''}`, value)\n                }}\n                onRead={(endpoint, value) => {\n                    getDeviceState(`${device.friendly_name}${endpoint ? `/${endpoint}` : ''}`, value)\n                }}\n            />\n        } else {\n            return \"Device doesn't expose anything\"\n        }\n    }\n}\n\nconst mappedProps = [\"deviceStates\"];\n\nconst ConnectedDeviceExposes = connect<ExposesProps, {}, GlobalState, StateApi>(mappedProps, actions)(Exposes);\nexport default ConnectedDeviceExposes;\n","import React, { Component, FunctionComponent } from \"react\";\nimport { Device } from \"../../types\";\nimport treeStyle from \"./tree.css\";\n\ninterface ClustersProps {\n    device: Device;\n}\ntype ClustersComp = {\n    label: string;\n    clusters: string[];\n}\nconst ClustersComp: FunctionComponent<ClustersComp> = (props) => {\n    const { label, clusters } = props;\n    if (clusters.length) {\n        return (<li>\n            <span>{label}</span>\n            <ul>{clusters.map(cluster => <li key={cluster}><span>{cluster}</span></li>)}</ul>\n        </li>)\n    } else {\n        return null;\n    }\n\n}\nexport default class Clusters extends Component<ClustersProps, {}> {\n    render() {\n        const { device } = this.props;\n        return <dl className={`${treeStyle.tree} row`}>\n            <ul>\n                <li>\n                    <span>{device.ieee_address}</span>\n                    <ul>\n                        {Array.from(device.endpoints.entries()).map(([epName, epData]) => {\n                            return (\n                                <li key={epName}>\n                                    <span>Endpoint <strong>{epName}</strong></span>\n                                    <ul>\n                                        <ClustersComp label=\"Output clusters\" clusters={epData.clusters.output} />\n                                        <ClustersComp label=\"Input clusters\" clusters={epData.clusters.input} />\n                                    </ul>\n                                </li>\n                            );\n                        })}\n                    </ul>\n                </li>\n            </ul>\n        </dl>\n\n    }\n}\n\n","import React, { Component } from \"react\";\nimport { NavLink, Redirect, RouteComponentProps, withRouter } from \"react-router-dom\";\nimport { connect } from \"unistore/react\";\nimport actions from \"../../actions\";\nimport { GlobalState } from \"../../store\";\nimport DeviceInfo from \"./info\";\nimport Bind from \"./bind\";\nimport Reporting from \"./reporting\";\nimport States from \"./states\";\nimport ConnectedDeviceExposes from \"./exposes\";\nimport Clusters from \"./clusters\";\nimport styles from \"./style.css\";\n\ntype UrlParams = {\n    dev: string;\n    tab?: TabName;\n};\ntype DevicePageProps = RouteComponentProps<UrlParams>;\n\n\ntype TabName = \"info\" | \"bind\" | \"state\" | \"exposes\" | \"clusters\" | \"reporting\";\n// eslint-disable-next-line react/prefer-stateless-function\nexport class DevicePage extends Component<DevicePageProps & GlobalState, {}> {\n    renderContent() {\n        const { match, devices } = this.props;\n        const { tab, dev } = match.params;\n        const device = devices.get(dev);\n\n        switch (tab) {\n            case \"info\":\n                return <DeviceInfo device={device} />;\n            case \"bind\":\n                return <Bind device={device} />;\n            case \"state\":\n                return <States device={device} />;\n            case \"exposes\":\n                return <ConnectedDeviceExposes device={device} />;\n            case \"clusters\":\n                return <Clusters device={device} />\n            case \"reporting\":\n                return <Reporting device={device} />\n            default:\n                return <Redirect to={`/device/${dev}/info`} />;\n        }\n\n    }\n    render() {\n\n        const { devices, match } = this.props;\n        const { dev } = match.params;\n        const device = devices.get(dev);\n        if (!device) {\n            return <div className=\"h-100 d-flex justify-content-center align-items-center\">Unknown device</div>\n        }\n        const links = [\n            {\n                title: 'About',\n                url: `/device/${dev}/info`\n            },\n            {\n                title: 'Exposes',\n                url: `/device/${dev}/exposes`\n            },\n            {\n                title: 'Bind',\n                url: `/device/${dev}/bind`\n            },\n            {\n                title: 'Reporting',\n                url: `/device/${dev}/reporting`\n            },\n            {\n                title: 'State',\n                url: `/device/${dev}/state`\n            },\n            {\n                title: 'Clusters',\n                url: `/device/${dev}/clusters`\n            }\n        ];\n\n        return (<div className=\"\">\n            <h3>{device.friendly_name}</h3>\n            <ul className=\"nav nav-tabs\">\n                {\n                    links.map(link => <li key={link.title} className=\"nav-item\">\n                        <NavLink activeClassName=\"active\" className={`nav-link ${styles['small-nav']}`} to={link.url}>{link.title}</NavLink>\n                    </li>)\n                }\n            </ul>\n            <div className=\"tab-content\">\n                <div className=\"tab-pane fade show active container\">\n                    {this.renderContent()}\n                </div>\n            </div>\n        </div>);\n\n    }\n}\nconst devicePageWithRouter = withRouter(DevicePage);\nconst mappedProps = [\"devices\"];\nconst ConnectedDevicePage = connect<{}, {}, GlobalState, {}>(mappedProps, actions)(devicePageWithRouter);\nexport default ConnectedDevicePage;\n","import React, { Component} from \"react\";\nimport { connect } from \"unistore/react\";\nimport actions, { TouchlinkApi } from \"../../actions\";\nimport { GlobalState } from \"../../store\";\nimport Button from \"../button\";\nimport { TouchLinkDevice } from \"../../types\";\nimport { genDeviceDetailsLink } from \"../../utils\";\nimport cx from \"classnames\";\nimport { Link } from \"react-router-dom\";\n\n\n\n// eslint-disable-next-line react/prefer-stateless-function\nexport class TouchlinkPage extends Component<TouchlinkApi & GlobalState, {}> {\n    onIdentifyClick = (device: TouchLinkDevice): void => {\n        const { touchlinkIdentify } = this.props;\n        touchlinkIdentify(device);\n    }\n\n    onResetClick = (device: TouchLinkDevice): void => {\n        const { touchlinkReset } = this.props;\n        touchlinkReset(device);\n    }\n\n    renderTouchlinkDevices() {\n        const { touchlinkDevices, devices, touchlinkIdentifyInProgress, touchlinkResetInProgress } = this.props;\n        const touchlinkInProgress = touchlinkIdentifyInProgress || touchlinkResetInProgress;\n        return (\n            <div className=\"table-responsive\">\n                <table className=\"table align-middle\">\n                    <thead>\n                        <tr>\n                            <th scope=\"col\">#</th>\n                            <th scope=\"col\">ieee_address</th>\n                            <th scope=\"col\">friendly_name</th>\n                            <th scope=\"col\">channel</th>\n                            <th scope=\"col\">&nbsp;</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {touchlinkDevices.map((touchlinkDevice, idx) => (\n                            <tr key={touchlinkDevice.ieee_address}>\n                                <td>{idx + 1}</td>\n                                <td>{\n                                    devices.has(touchlinkDevice.ieee_address) ?\n                                        (<Link to={genDeviceDetailsLink(touchlinkDevice.ieee_address)}>{touchlinkDevice.ieee_address}</Link>) : touchlinkDevice.ieee_address}</td>\n                                <td>{devices.get(touchlinkDevice.ieee_address)?.friendly_name}</td>\n                                <td>{touchlinkDevice.channel}</td>\n                                <td>\n                                    <div className=\"btn-group float-right\" role=\"group\" aria-label=\"Basic example\">\n                                        <Button<TouchLinkDevice> disabled={touchlinkInProgress} item={touchlinkDevice} title=\"Identify\" className=\"btn btn-primary\" onClick={this.onIdentifyClick}><i\n                                            className={cx(\"fa\", { \"fa-exclamation-triangle\": !touchlinkIdentifyInProgress, \"fas fa-circle-notch fa-spin\": touchlinkIdentifyInProgress })} /></Button>\n                                        <Button<TouchLinkDevice> disabled={touchlinkInProgress} item={touchlinkDevice} title=\"Factory reset\" className=\"btn btn-danger\" onClick={this.onResetClick}><i\n                                            className={cx(\"fa\", { \"fa-broom\": !touchlinkResetInProgress, \"fas fa-circle-notch fa-spin\": touchlinkResetInProgress })} /></Button>\n                                    </div>\n                                </td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n    renderNoDevices() {\n        const { touchlinkScan } = this.props;\n        return (\n            <Button className=\"btn btn-primary mx-auto d-block\" onClick={touchlinkScan}>Scan</Button>\n        );\n    }\n    render() {\n        const { touchlinkDevices, touchlinkScanInProgress, touchlinkScan } = this.props;\n        return (\n            <div className=\"container\">\n                <div className=\"card mt-2\">\n                    <div className=\"card-header allign-middle\">\n                        Detected {touchlinkDevices.length} touchlink devices.\n                        <Button title=\"Rescan\" className=\"btn btn-primary btn-sm float-right\" onClick={touchlinkScan}><i className=\"fa fa-sync\" /></Button>\n                    </div>\n\n                    <div>\n                        <div className=\"card-body\">\n                            {touchlinkScanInProgress ? (\n                                <div className=\"d-flex justify-content-center\">\n                                    <div className=\"spinner-border\" role=\"status\">\n                                        <span className=\"sr-only\">Loading...</span>\n                                    </div>\n                                </div>\n                            ) : touchlinkDevices.length === 0 ? this.renderNoDevices() : this.renderTouchlinkDevices()}\n\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\nconst mappedProps = [\"touchlinkDevices\", \"devices\", \"touchlinkScanInProgress\", \"touchlinkIdentifyInProgress\", \"touchlinkResetInProgress\"];\n\nexport default connect<{}, {}, GlobalState, TouchlinkApi>(mappedProps, actions)(TouchlinkPage);","import React, { useState, ChangeEvent, InputHTMLAttributes, useEffect } from \"react\";\n\nimport Button from \"../button\";\nimport RangeEditor from \"../range-editor/range-editor\";\n\ninterface UniversalEditorProps {\n    values?: unknown[];\n    onChange(arg1: unknown): void;\n}\n\nconst togglePairs = new Map<string | boolean, string | boolean>([\n    ['ON', 'OFF'],\n    ['OFF', 'ON'],\n    ['OPEN', 'CLOSE'],\n    ['CLOSE', 'OPEN'],\n    ['LOCK', 'UNLOCK'],\n    ['UNLOCK', 'LOCK'],\n    [true, false],\n    [false, true]\n]);\n\nconst BluringInput: React.FunctionComponent<React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>> = (props) => {\n    const { onChange, value, ...rest } = props;\n    const [internalValue, setInternalValue] = useState(value);\n    useEffect(() => {\n        setInternalValue(value);\n    }, [value]);\n\n\n    return <input\n        value={internalValue}\n        onBlur={() => onChange({ target: { value: internalValue } } as ChangeEvent<HTMLInputElement>)}\n        onChange={e => setInternalValue(e.target.value)}\n        {...rest} />\n}\n\nconst UniversalEditor: React.FunctionComponent<InputHTMLAttributes<unknown> & UniversalEditorProps> = (props) => {\n    const { value, values, onChange, disabled, name, ...rest } = props;\n\n    const isToggleParameter = togglePairs.has(value as string | boolean);\n\n\n    if (values) {\n        return (<select className=\"form-select\"\n            disabled={disabled}\n            value={value as string}\n            onChange={e => onChange(e.target.value)}>\n            {values.map(val => <option key={val as string} value={val as string}>{val as string}</option>)}\n        </select>)\n    }\n    switch (typeof value) {\n        case \"boolean\":\n            return (\n                <div className=\"form-check form-switch\">\n                    <input type=\"checkbox\" className=\"form-check-input\"\n                        disabled={disabled}\n                        checked={value as boolean}\n                        onChange={e => onChange(e.target.checked)}\n                        {...rest} />\n                </div>\n            );\n        case \"number\":\n            return (<div className=\"row\">\n                <div className=\"col-9\">\n                    <RangeEditor disabled={disabled} value={value} onChange={v => onChange(v)} {...rest} />\n                </div>\n                <div className=\"col-3\">\n                    <input type=\"number\" step=\"any\" className=\"form-control col-2\"\n                        disabled={disabled}\n                        value={value as number}\n                        onChange={e => onChange(e.target.valueAsNumber)}\n                        {...rest} />\n                </div>\n\n\n            </div >);\n        default:\n            if (isToggleParameter) {\n                return (\n                    <div className=\"row\">\n                        <div className=\"col-3\">\n                            <Button<string | boolean> title=\"Toggle\" value=\"Toggle\"\n                                className=\"btn btn-primary\"\n                                disabled={disabled}\n                                item={togglePairs.get(value as string | boolean)}\n                                onClick={payload => onChange(payload)}>\n                                <i className=\"fa fa-exchange-alt\" />\n                            </Button>\n                        </div>\n                        <div className=\"col-9\">\n                            <BluringInput type=\"text\" className=\"form-control\"\n                                disabled={disabled}\n                                value={value as string}\n                                onChange={e => onChange(e.target.value)}\n                                {...rest}\n                            />\n                        </div>\n                    </div>\n                );\n            }\n            return (<BluringInput type=\"text\" className=\"form-control\"\n                disabled={disabled}\n                value={value as string}\n                onChange={e => onChange(e.target.value)}\n                {...rest} />);\n\n\n    }\n};\nexport default UniversalEditor;","import React, { Component } from \"react\";\nimport { connect } from \"unistore/react\";\nimport actions, { BridgeApi, UtilsApi } from \"../../actions\";\nimport { GlobalState } from \"../../store\";\nimport get from \"lodash/get\";\nimport UniversalEditor from \"../universal-editor\";\nimport isEmpty from \"lodash/isEmpty\";\nimport { NavLink, Redirect, RouteComponentProps, withRouter } from \"react-router-dom\";\nimport Button from \"../button\";\n\nexport const logLevelSetting = {\n    key: 'log_level',\n    path: 'log_level',\n    title: 'Log level',\n    description: 'Logging level',\n    values: ['debug', 'info', 'warn', 'error']\n};\nconst settings = [\n    {\n        key: 'last_seen',\n        path: 'config.advanced.last_seen',\n        title: 'Last seen',\n        description: 'Add a last_seen attribute to MQTT messages, contains date/time of last Zigbee message',\n        values: ['disable', 'ISO_8601', 'ISO_8601_local', 'epoch']\n    },\n    {\n        key: 'elapsed',\n        path: 'config.advanced.elapsed',\n        title: 'Elapsed',\n        description: 'Add an elapsed attribute to MQTT messages, contains milliseconds since the previous msg'\n    },\n    {...logLevelSetting},\n    {\n        key: 'homeassistant',\n        path: 'config.homeassistant',\n        title: 'Homeassistant support',\n        description: 'Home Assistant integration (MQTT discovery)'\n    }\n]\ntype SettingsTab = \"settings\" | \"bridge\" | \"about\";\n\ntype UrlParams = {\n    tab?: SettingsTab;\n};\ntype SettingsPageProps = RouteComponentProps<UrlParams>;\n\ndeclare const FRONTEND_VERSION: string; //injected by webpack.DefinePlugin\n\nexport class SettingsPage extends Component<SettingsPageProps & BridgeApi & GlobalState & UtilsApi, {}> {\n    updateConfig = (name: string, value: unknown): void => {\n        const { updateConfigValue } = this.props;\n        updateConfigValue(name, value);\n    }\n\n    render() {\n        return (\n            <>\n                <ul className=\"nav nav-tabs\">\n                    <li className=\"nav-item\">\n                        <NavLink className=\"nav-link\" activeClassName=\"active\" to={`/settings/settings`}>Settings</NavLink>\n                    </li>\n                    <li className=\"nav-item\">\n                        <NavLink className=\"nav-link\" activeClassName=\"active\" to={`/settings/bridge`}>Raw</NavLink>\n                    </li>\n                    <li className=\"nav-item\">\n                        <NavLink className=\"nav-link\" activeClassName=\"active\" to={`/settings/about`}>About</NavLink>\n                    </li>\n                </ul>\n                <div className=\"tab-content\">\n                    <div className=\"tab-pane fade show active\">\n                        <div className=\"container\">\n                            {this.renderSwitcher()}\n                        </div>\n                    </div>\n                </div>\n            </>\n        )\n    }\n    renderSwitcher() {\n        const { match } = this.props;\n        const { tab } = match.params;\n        switch (tab) {\n            case \"settings\":\n                return this.renderSettings();\n            case \"bridge\":\n                return this.renderBridgeInfo();\n            case \"about\":\n                return this.renderAbout();\n            default:\n                return <Redirect to={`/settings/settings`} />;\n        }\n    }\n    renderAbout() {\n        const { bridgeInfo } = this.props;\n        const isZigbee2mqttDevVersion = bridgeInfo.version?.match(/^\\d+\\.\\d+\\.\\d+$/) === null;\n        const zigbee2mqttVersion = isZigbee2mqttDevVersion ?\n            bridgeInfo.version :\n            <a target=\"_blank\" rel=\"noopener noreferrer\" href={`https://github.com/Koenkk/zigbee2mqtt/releases/tag/${bridgeInfo.version}`}>{bridgeInfo.version}</a>;\n        const zigbee2mqttCommit = bridgeInfo.commit ?\n            <>commit: <a target=\"_blank\" rel=\"noopener noreferrer\" href={`https://github.com/Koenkk/zigbee2mqtt/commit/${bridgeInfo.commit}`}>{bridgeInfo.commit}</a></> :\n            null;\n        const v = FRONTEND_VERSION;\n        return <div className=\"mt-2\">\n            <dl className=\"row\">\n                <dt className=\"col-sm-3\">zigbee2mqtt version</dt>\n                <dd className=\"col-sm-9\">{zigbee2mqttVersion} {zigbee2mqttCommit}</dd>\n            </dl>\n\n            <dl className=\"row\">\n                <dt className=\"col-sm-3\">coordinator type</dt>\n                <dd className=\"col-sm-9\">{bridgeInfo.coordinator?.type ?? 'Unknown'}</dd>\n            </dl>\n            <dl className=\"row\">\n                <dt className=\"col-sm-3\">coordinator revision</dt>\n                <dd className=\"col-sm-9\">{bridgeInfo.coordinator?.meta?.revision ?? 'Unknown'}</dd>\n            </dl>\n\n            <dl className=\"row\">\n                <dt className=\"col-sm-3\">frontend version</dt>\n                <dd className=\"col-sm-9\">{v}</dd>\n            </dl>\n        </div>\n    }\n    renderBridgeInfo() {\n        const { bridgeInfo } = this.props;\n        return <pre>{JSON.stringify(bridgeInfo, null, 4)}</pre>\n    }\n\n    renderSettings() {\n        const { bridgeInfo, exportState } = this.props;\n        return <><div className=\"mt-2\">\n            {\n                !isEmpty(bridgeInfo) && settings.map(setting => (\n                    <div key={setting.key} className=\"row border-bottom pt-1\">\n                        <div className=\"col mb-3\">\n                            <label htmlFor={setting.key} className=\"form-label\">{setting.title}</label>\n                            <UniversalEditor\n                                disabled={get(bridgeInfo, setting.path) === undefined}\n                                value={get(bridgeInfo, setting.path) as string | ReadonlyArray<string> | number}\n                                values={setting.values}\n                                onChange={(value) => this.updateConfig(setting.key, value)}\n                            />\n                            <div className=\"form-text\">{setting.description}</div>\n                        </div>\n                    </div>\n                ))\n            }\n        </div>\n            <Button<void> className=\"mt-2 btn btn-primary\" onClick={exportState}>Download state</Button>\n        </>\n    }\n}\nconst SettingsPageWithRouter = withRouter(SettingsPage);\nconst mappedProps = [\"bridgeInfo\"];\nconst ConnectedSettingsPage = connect<{}, {}, GlobalState, BridgeApi>(mappedProps, actions)(SettingsPageWithRouter);\nexport default ConnectedSettingsPage;","import React, { FunctionComponent, useRef, useState } from 'react';\n\nimport { GlobalState } from '../../store';\nimport actions, { BridgeApi } from '../../actions';\nimport { connect } from 'unistore/react';\nimport Button from '../button';\nimport cx from \"classnames\";\nimport { Link, NavLink } from 'react-router-dom';\nimport useComponentVisible from '../../hooks/useComponentVisible';\nimport { Device } from '../../types';\nimport style from \"./style.css\";\nimport { useOnClickOutside } from '../../hooks/useOnClickOutside';\n\nconst urls = [\n    {\n        href: '/',\n        title: 'Devices',\n        exact: true\n    },\n    {\n        href: '/map',\n        title: 'Map'\n    },\n    {\n        href: '/settings',\n        title: 'Settings'\n    },\n    {\n        href: '/groups',\n        title: 'Groups'\n    },\n    {\n        href: '/touchlink',\n        title: 'Touchlink'\n    },\n    {\n        href: '/logs',\n        title: 'Logs'\n    }\n];\ntype StartStopJoinButtonProps = {\n    devices: Map<string, Device>;\n}\nconst StartStopJoinButton: FunctionComponent<StartStopJoinButtonProps & Pick<BridgeApi, 'setPermitJoin'> & Pick<GlobalState, 'bridgeInfo'>> = ({ devices, setPermitJoin, bridgeInfo }) => {\n    const { ref, isComponentVisible, setIsComponentVisible } = useComponentVisible(false);\n    const [selectedRouter, setSelectedRouter] = useState<Device>(null);\n    const routers = [];\n    const selectAndHide = (device: Device) => { setSelectedRouter(device); setIsComponentVisible(false) }\n    devices.forEach((device) => {\n        if (device.type == \"Router\") {\n            routers.push(<li key={device.friendly_name}>\n                <Button<Device> item={device} className=\"dropdown-item\" onClick={selectAndHide}>{device.friendly_name}</Button>\n            </li>)\n        }\n    });\n    const onBtnClick = () => {\n        setPermitJoin(!bridgeInfo.permit_join, selectedRouter);\n    }\n    return (\n        <div className=\"input-group w-auto\">\n            <button onClick={onBtnClick} type=\"button\" className=\"btn btn-outline-secondary\">{bridgeInfo.permit_join ? \"Disable join\" : \"Permit join\"} ({selectedRouter?.friendly_name ?? \"All\"})</button>\n            {routers.length ? (<><Button<boolean> type=\"button\" onClick={setIsComponentVisible} item={!isComponentVisible} className=\"btn btn-outline-secondary dropdown-toggle dropdown-toggle-split\" data-toggle=\"dropdown\" aria-expanded=\"false\">\n                <span className=\"visually-hidden\">Toggle Dropdown</span>\n            </Button>\n                <ul ref={ref} className={cx('dropdown-menu', style['scrollable-menu'], { show: isComponentVisible })}>\n                    <li key='all'>\n                        <Button<Device> item={null} className=\"dropdown-item\" onClick={selectAndHide}>All</Button>\n                    </li>\n                    {routers}\n                </ul></>) : null}\n\n        </div>\n    );\n}\n\ntype PropsFromStore = {\n    devices: Map<string, Device>;\n    bridgeInfo: object;\n}\nconst NavBar: FunctionComponent<PropsFromStore & BridgeApi & Pick<GlobalState, 'bridgeInfo'>> = ({ devices, setPermitJoin, bridgeInfo }) => {\n    const ref = useRef<HTMLDivElement>();\n    const [navbarIsVisible, setnavbarIsVisible] = useState<boolean>(false);\n    useOnClickOutside(ref, () => {\n        setnavbarIsVisible(false);\n    });\n    return (<nav className=\"navbar navbar-expand-md navbar-dark bg-dark fixed-top\">\n        <div ref={ref} className=\"container-fluid\">\n            <Link onClick={() => setnavbarIsVisible(false)} className=\"navbar-brand\" to=\"/\">Zigbee2MQTT</Link>\n            <button onClick={() => { setnavbarIsVisible(!navbarIsVisible) }} className=\"navbar-toggler\" type=\"button\">\n                <span className=\"navbar-toggler-icon\" />\n            </button>\n            <div className={cx(\"navbar-collapse collapse\", { show: navbarIsVisible })}>\n                <ul className=\"navbar-nav mb-2 mb-md-0\">\n                    {\n                        urls.map(url =>\n                            <li key={url.href} className=\"nav-item\">\n                                <NavLink onClick={() => setnavbarIsVisible(false)} exact={url.exact} className=\"nav-link\" to={url.href} activeClassName=\"active\">\n                                    {url.title}\n                                </NavLink>\n                            </li>)\n                    }\n                </ul>\n                <StartStopJoinButton\n                    devices={devices}\n                    setPermitJoin={setPermitJoin}\n                    bridgeInfo={bridgeInfo}\n                />\n            </div>\n        </div>\n    </nav>)\n}\nconst mappedProps = [\"bridgeInfo\", \"devices\"];\nconst ConnectedNavBar = connect<{}, {}, PropsFromStore, BridgeApi>(mappedProps, actions)(NavBar);\nexport default ConnectedNavBar;\n\n","import { useState, useEffect, useRef } from 'react';\n\nexport default function useComponentVisible(initialIsVisible: boolean) {\n    const [isComponentVisible, setIsComponentVisible] = useState(\n        initialIsVisible\n    );\n    const ref = useRef(null);\n\n    const handleHideDropdown = (event: KeyboardEvent) => {\n        if (event.key === \"Escape\") {\n            setIsComponentVisible(false);\n        }\n    };\n\n    const handleClickOutside = (event: MouseEvent) => {\n        if (ref.current && !ref.current.contains(event.target)) {\n            setIsComponentVisible(false);\n        }\n    };\n\n    useEffect(() => {\n        document.addEventListener(\"keydown\", handleHideDropdown, true);\n        document.addEventListener(\"click\", handleClickOutside, true);\n        return () => {\n            document.removeEventListener(\"keydown\", handleHideDropdown, true);\n            document.removeEventListener(\"click\", handleClickOutside, true);\n        };\n    });\n\n    return { ref, isComponentVisible, setIsComponentVisible };\n}","// extracted by mini-css-extract-plugin\nexport default {\"scrollable-menu\":\"_36Sntvyj-B3gg7Xj6xLUaY\"};","import {  useEffect } from 'react';\n\nexport function useOnClickOutside(ref, handler) {\n  useEffect(\n    () => {\n      const listener = event => {\n        // Do nothing if clicking ref's element or descendent elements\n        if (!ref.current || ref.current.contains(event.target)) {\n          return;\n        }\n\n        handler(event);\n      };\n\n      document.addEventListener('mousedown', listener);\n      document.addEventListener('touchstart', listener);\n\n      return () => {\n        document.removeEventListener('mousedown', listener);\n        document.removeEventListener('touchstart', listener);\n      };\n    },\n    // Add ref and handler to effect dependencies\n    // It's worth noting that because passed in handler is a new ...\n    // ... function on every render that will cause this effect ...\n    // ... callback/cleanup to run every render. It's not a big deal ...\n    // ... but to optimize you can wrap handler in useCallback before ...\n    // ... passing it into this hook.\n    [ref, handler]\n  );\n}","import React, { ChangeEvent, useState } from \"react\";\nimport { useInputChange } from \"../../hooks/useInputChange\";\nimport Button from \"../button\";\nimport Modal, { ModalHeader, ModalBody, ModalFooter } from \"../modal\";\n\ninterface RenameGroupFormProps {\n  name: string;\n  onRename(oldName: string, newName: string): void;\n}\n\nexport function RenameGroupForm(props: RenameGroupFormProps) {\n  const { name, onRename } = props;\n  const [modalIsOpened, setModalIsOpened] = useState(false);\n\n  const [renameGroupForm, handleInputChange] = useInputChange({ friendlyName: name });\n\n  return (\n    <>\n      <Modal isOpen={modalIsOpened}>\n        <ModalHeader>\n          <h3>Rename group</h3>\n          <small>{name}</small>\n        </ModalHeader>\n        <ModalBody>\n          <div className=\"mb-3\">\n            <label className=\"form-label\">Friendly name</label>\n            <input name=\"friendlyName\" onChange={handleInputChange as (event: ChangeEvent<HTMLInputElement>) => void} type=\"text\" className=\"form-control\" value={renameGroupForm['friendlyName']} />\n          </div>\n        </ModalBody>\n        <ModalFooter>\n          <button type=\"button\" className=\"btn btn-secondary\" onClick={() => setModalIsOpened(false)}>Close</button>\n          <button type=\"button\" className=\"btn btn-primary\" onClick={() => { onRename(name, renameGroupForm['friendlyName']); setModalIsOpened(false) }}>Save changes</button>\n        </ModalFooter>\n      </Modal>\n      <Button<void> className=\"btn btn-secondary\" onClick={() => setModalIsOpened(true)} title=\"Rename group\"><i className=\"fa fa-edit\" /></Button>\n    </>\n  )\n}\n\n","import { ChangeEvent, useState } from 'react'\ntype KVP = { [key: string]: string };\nexport const useInputChange = (initialState: KVP) => {\n  const [input, setInput] = useState<KVP>(initialState);\n\n  const handleInputChange = (e: ChangeEvent<HTMLInputElement>) => setInput({\n    ...input,\n    [e.currentTarget.name]: e.currentTarget.value\n  })\n\n  return [input, handleInputChange]\n}","import React, { ChangeEvent, Component } from \"react\";\nimport { connect } from \"unistore/react\";\nimport actions, { GroupsApi } from \"../../actions\";\nimport { GlobalState, Group, GroupAddress } from \"../../store\";\nimport Button from \"../button\";\nimport { Device, Endpoint } from \"../../types\";\nimport { genDeviceDetailsLink, getEndpoints } from \"../../utils\";\nimport style from './style.css';\nimport cx from 'classnames';\nimport EndpointPicker from \"../endpoint-picker\";\nimport DevicePicker from \"../device-picker\";\nimport { Link } from \"react-router-dom\";\nimport DeviceImage from \"../device-image\";\nimport { RenameGroupForm } from \"./RenameForm\";\n\n\ninterface GroupsPageState {\n    newGroupName: string;\n    newGroupId?: number;\n}\n\n\ninterface AddDeviceToGroupProps {\n    devices: Map<string, Device>;\n    group: Group;\n    addDeviceToGroup(deviceName: string, groupName: string): void;\n}\n\ninterface AddDeviceToGroupState {\n    device: string;\n    endpoint: Endpoint;\n}\n\ninterface DeviceGroupRowProps {\n    rowNumber: number;\n    groupAddress: GroupAddress;\n    devices: Map<string, Device>;\n    removeDeviceFromGroup(deviceFriendlyName: string): void;\n}\n\n// eslint-disable-next-line react/prefer-stateless-function\nclass DeviceGroupRow extends Component<DeviceGroupRowProps, {}> {\n    getDeviceObj(): Device | undefined {\n        const { groupAddress, devices } = this.props;\n        return devices.get(groupAddress.ieee_address);\n    }\n    render() {\n        const { rowNumber, groupAddress, removeDeviceFromGroup } = this.props;\n        const device = this.getDeviceObj();\n\n        return <tr>\n            <th scope=\"row\">{rowNumber + 1}</th>\n            <td className={style[\"device-pic\"]}>\n                <DeviceImage className={cx(style[\"device-image\"])} device={device} />\n            </td>\n            <td><Link to={genDeviceDetailsLink(device.ieee_address)}>{device.friendly_name}</Link></td>\n            <td>{groupAddress.ieee_address}</td>\n            <td>{groupAddress.endpoint}</td>\n            <td>{device && <Button<string> promt item={device.friendly_name} onClick={removeDeviceFromGroup} className=\"btn btn-danger btn-sm float-right\"><i className=\"fa fa-trash\" /></Button>}</td>\n        </tr>;\n    }\n}\ninterface DeviceGroupPropts {\n    group: Group;\n    devices: Map<string, Device>;\n    removeDeviceFromGroup(groupFriendlyName: string, deviceFriendlyName: string): void;\n}\n\n// eslint-disable-next-line react/prefer-stateless-function\nclass DeviceGroup extends Component<DeviceGroupPropts, {}> {\n    onRemove = (deviceFriendlyName: string): void => {\n        const { group, removeDeviceFromGroup } = this.props;\n        removeDeviceFromGroup(group.friendly_name, deviceFriendlyName);\n    }\n    render() {\n        const { group, devices } = this.props;\n        return <table className=\"table table-sm\">\n            <thead>\n                <tr>\n                    <th scope=\"col\">#</th>\n                    <th scope=\"col\">Pic</th>\n                    <th scope=\"col\">friendlyName</th>\n                    <th scope=\"col\">ieee_addr</th>\n                    <th scope=\"col\">Endpoint</th>\n                    <th scope=\"col\" className=\"text-right\">Action</th>\n                </tr>\n            </thead>\n            <tbody>\n                {group.members.map((groupMemebershipInfo, idx) => <DeviceGroupRow key={groupMemebershipInfo.ieee_address} removeDeviceFromGroup={this.onRemove} rowNumber={idx} devices={devices} groupAddress={groupMemebershipInfo} />)}\n            </tbody>\n        </table>;\n    }\n}\n\nclass AddDeviceToGroup extends Component<AddDeviceToGroupProps, AddDeviceToGroupState> {\n    state = {\n        device: undefined,\n        endpoint: undefined\n    };\n\n\n    onSubmit = (): void => {\n        const { addDeviceToGroup, group } = this.props;\n        const { device, endpoint } = this.state;\n        addDeviceToGroup(endpoint ? `${device}/${endpoint}` : device, group.friendly_name);\n\n    }\n    onDeviceSelect = (device: Device): void => {\n        const endpoints = getEndpoints(device);\n        this.setState({ device: device.ieee_address, endpoint: endpoints[0] });\n    }\n\n    onEpChange = (endpoint: Endpoint): void => {\n        this.setState({ endpoint });\n    }\n    render() {\n        const { device, endpoint } = this.state;\n        const { devices } = this.props;\n        const deviceObj = devices.get(device);\n\n        const endpoints = getEndpoints(deviceObj);\n\n        return <form className=\"row\">\n\n            <div className=\"col\">\n                <div className=\"input-group mb-3\">\n                    <DevicePicker type=\"device\" value={device} devices={devices} onChange={this.onDeviceSelect} />\n                    <EndpointPicker values={endpoints} value={endpoint} onChange={this.onEpChange} />\n                </div>\n\n            </div>\n\n            <div className=\"col\">\n                <Button<void> type=\"button\" onClick={this.onSubmit} className=\"btn btn-primary\">Add to group</Button>\n            </div>\n\n\n        </form>\n    }\n}\n\nexport class GroupsPage extends Component<GroupsApi & GlobalState, GroupsPageState> {\n    state: GroupsPageState = {\n        newGroupName: '',\n        newGroupId: undefined\n    }\n\n\n    changeHandler = (event: ChangeEvent<HTMLInputElement>): void => {\n        const { name, value } = event.target;\n        this.setState({ [name]: value } as unknown as GroupsPageState);\n    }\n\n    onGroupCreateSubmit = (): void => {\n        const { newGroupName, newGroupId } = this.state;\n        const { createGroup } = this.props;\n        createGroup(newGroupName, newGroupId);\n    }\n\n    renderGroupCreationForm() {\n        const { newGroupName, newGroupId } = this.state;\n        return (\n            <form className=\"row mt-2\">\n                <div className=\"input-group  mb-2\">\n                    <label htmlFor=\"newGroupName\" className=\"sr-only\">Group name</label>\n                    <input onChange={this.changeHandler} value={newGroupName} required type=\"text\" name=\"newGroupName\" className=\"form-control\" id=\"newGroupName\" placeholder=\"new group name\" />\n\n                    <label htmlFor=\"newGroupName\" className=\"sr-only\">Group id</label>\n                    <input onChange={this.changeHandler} value={newGroupId === undefined ? '' : newGroupId} type=\"number\" name=\"newGroupId\" className=\"form-control\" id=\"newGroupId\" placeholder=\"enter group id if necessary\" />\n\n                    <Button<void> onClick={this.onGroupCreateSubmit} className=\"btn btn-primary form-control\">Create group</Button>\n                </div>\n\n            </form>\n        )\n    }\n    removeGroup = (friendlyName: string): void => {\n        const { removeGroup } = this.props;\n        removeGroup(friendlyName);\n    }\n    removeDeviceFromGroup = (groupFriendlyName: string, deviceFriendlyName: string): void => {\n        const { removeDeviceFromGroup } = this.props;\n        removeDeviceFromGroup(deviceFriendlyName, groupFriendlyName);\n    }\n    renameGroup = (oldName: string, newName: string) => {\n        const { renameGroup } = this.props;\n        renameGroup(oldName, newName);\n    }\n    renderGroups() {\n        const { groups, devices, addDeviceToGroup } = this.props;\n        return (\n            <div id=\"accordion\">\n                {\n                    groups.map(group => (\n                        <div key={group.id} className=\"card mb-1\">\n                            <div className=\"card-header\" id={`heading${group.id}`}>\n                                <h5 className=\"mb-0\">\n                                    <button className=\"btn btn-link btn-sm\">\n                                        {group.friendly_name} (#{group.id})\n                                    </button>\n                                    <div className=\"btn-group float-right btn-group-sm\" role=\"group\" aria-label=\"Basic example\">\n\n                                        <Button<string> promt title=\"Remove group\" item={group.friendly_name} onClick={this.removeGroup} className=\"btn btn-danger\"><i className=\"fa fa-trash\" /></Button>\n                                        <RenameGroupForm name={group.friendly_name} onRename={this.renameGroup} />\n                                    </div>\n                                </h5>\n                            </div>\n\n                            <div>\n                                <div className=\"card-body\">\n                                    <div className=\"table-responsive\">\n                                        <DeviceGroup group={group} devices={devices} removeDeviceFromGroup={this.removeDeviceFromGroup} />\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"card-footer\">\n                                <AddDeviceToGroup addDeviceToGroup={addDeviceToGroup} devices={devices} group={group} />\n                            </div>\n                        </div>\n                    )).reverse()\n                }\n\n            </div>\n        )\n    }\n\n    render() {\n        return <div className=\"container\">\n            {this.renderGroupCreationForm()}\n            {this.renderGroups()}\n        </div>\n\n    }\n}\n\nconst mappedProps = [\"groups\", \"devices\"];\nconst ConnectedGroupsPage = connect<{}, {}, GlobalState, GroupsApi>(mappedProps, actions)(GroupsPage);\nexport default ConnectedGroupsPage;","// extracted by mini-css-extract-plugin\nexport default {\"device-pic\":\"_2p1XqBiO9XLlCB-lT60VCH\",\"device-image\":\"_3Z1i8qUrV2sErNF0__pVZt\"};","// extracted by mini-css-extract-plugin\nexport default {\"action-column\":\"_1AmFhCTIk_ifBlEJGnLJuK\",\"device-pic\":\"_1KD_wxLENsmTnroATY4BrA\",\"device-image\":\"_1kMXLbhsSotmS-uYUbIFl0\"};","import React, { MouseEvent, ThHTMLAttributes} from \"react\";\n\n\n\nimport { SortDirection } from \"../../types\";\nimport isEqual from \"lodash/isEqual\";\n\n\ninterface ActionTHProps<T> {\n    column: T | T[];\n    current: T | T[];\n    currentDirection: SortDirection;\n    onClick?(arg1: T | T[]): void;\n}\n\nexport default class ActionTH<T> extends React.Component<ActionTHProps<T> & Omit<ThHTMLAttributes<HTMLTableHeaderCellElement>, 'onClick'>, {}> {\n    onClick = (event: MouseEvent): void => {\n        event.preventDefault();\n        event.stopPropagation();\n        const { column, onClick } = this.props;\n        onClick && onClick(column);\n    };\n\n    renderArrow () {\n        const { currentDirection, current, column } = this.props;\n        if (isEqual(current, column)) {\n            if (currentDirection == \"asc\") {\n                return <i className={`fa fa-sort-amount-down-alt`} />;\n            }\n            return <i className={`fa fa-sort-amount-down`} />;\n        }\n        return <i className={`fa fa-sort-amount-down invisible`} />;\n    }\n\n    render () {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { children, onClick, current, column, currentDirection, ...rest } = this.props;\n        return (<th {...rest}>\n            <span className=\"btn btn-link\" onClick={this.onClick}>{children}</span>\n            {this.renderArrow()}\n        </th>);\n    }\n}\n","import style from \"./style.css\";\nimport React, { Component, Fragment } from \"react\";\nimport orderBy from \"lodash/orderBy\";\nimport DeviceControlGroup from \"../device-control\";\nimport { Device, SortDirection, DeviceState } from \"../../types\";\nimport { genDeviceDetailsLink, lastSeen, toHex } from \"../../utils\";\n\nimport { Notyf } from \"notyf\";\nimport PowerSource from \"../power-source\";\nimport { connect } from \"unistore/react\";\nimport { GlobalState } from \"../../store\";\nimport actions from \"../../actions\";\nimport ActionTH from \"./ActionTH\";\nimport isEqual from \"lodash/isEqual\";\nimport { Link } from \"react-router-dom\";\nimport DeviceImage from \"../device-image\";\nimport { ModelLink, VendorLink } from \"../vendor-links/verndor-links\";\nimport Spinner from \"../spinner\";\nimport { DisplayValue } from \"../DisplayValue\";\n\n\ntype SortColumn =\n    | \"device.network_address\"\n    | \"device.friendly_name\"\n    | \"device.ieee_address\"\n    | \"device.definition.vendor\"\n    | \"device.definition.model\"\n    | \"state.linkquality\"\n    | \"state.last_seen\"\n    | \"state.elapsed\"\n    | \"state.battery\";\n\n\ninterface ZigbeeTableState {\n    sortDirection: SortDirection;\n    sortColumn: SortColumn | SortColumn[];\n    currentTime: number;\n    sortedTableData: ZigbeeTableData[];\n    error?: object;\n}\n\n\ninterface ZigbeeTableData {\n    device: Device;\n    state: DeviceState;\n}\n\n\n\nconst storeKey = \"ZigbeeTableState\";\nconst longLoadingTimeout = 15 * 1000;\n\nexport class ZigbeeTable extends Component<GlobalState, ZigbeeTableState> {\n    constructor(props) {\n        super(props);\n        this.state = {\n            sortDirection: \"desc\",\n            sortColumn: \"device.network_address\",\n            currentTime: Date.now(),\n            sortedTableData: []\n        };\n    }\n\n    restoreState(): void {\n        const { sortColumn, sortDirection } = this.state;\n\n        const storedState = localStorage.getItem(storeKey);\n        if (storedState) {\n            try {\n                const restored: Pick<ZigbeeTableState, \"sortDirection\" | \"sortColumn\"> = JSON.parse(storedState);\n                this.setState(restored);\n            } catch (e) {\n                new Notyf().error(e.toString());\n            }\n        } else {\n            this.onSortChange(sortColumn, sortDirection);\n        }\n    }\n\n    saveState = (): void => {\n        const { sortDirection, sortColumn } = this.state;\n        const storeData = {\n            sortDirection,\n            sortColumn\n        };\n        //in private mode localstorage access can throw exceptions\n        try {\n            localStorage.setItem(storeKey, JSON.stringify(storeData));\n        } catch (e) {\n            new Notyf().error(e.toString());\n        }\n    };\n    handleLongLoading = () => {\n        const { devices } = this.props;\n\n        if (devices.size == 0) {\n            const error = <Fragment>\n                <strong>Loading devices takes too long time.</strong>\n                <div>Consider reading <a href=\"https://www.zigbee2mqtt.io/information/frontend.html\">documentation</a></div>\n            </Fragment>;\n            this.setState({ error });\n        }\n    }\n    componentDidMount(): void {\n        setTimeout(this.handleLongLoading, longLoadingTimeout);\n        this.restoreState();\n    }\n\n    static getDerivedStateFromProps(props: Readonly<GlobalState>, state: ZigbeeTableState): Partial<ZigbeeTableState> {\n        const { sortColumn, sortDirection } = state;\n        const { devices, deviceStates } = props;\n        const tableData: ZigbeeTableData[] = [];\n        devices.forEach((device) => {\n            if (device.type !== \"Coordinator\") {\n                tableData.push({\n                    device,\n                    state: deviceStates.get(device.friendly_name)\n\n                });\n            }\n        });\n        return { sortedTableData: orderBy<ZigbeeTableData>(tableData, sortColumn, [sortDirection]) };\n    }\n\n\n    onSortChange = (column: SortColumn | SortColumn[], sortDir: SortDirection = undefined): void => {\n        const { sortColumn } = this.state;\n        let { sortDirection } = this.state;\n\n        if (isEqual(sortColumn, column)) {\n            if (sortDir) {\n                sortDirection = sortDir;\n            } else if (sortDirection == \"asc\") {\n                sortDirection = \"desc\";\n            } else {\n                sortDirection = \"asc\";\n            }\n        }\n\n        this.setState({ sortColumn: column, sortDirection }, this.saveState);\n    };\n\n    renderError() {\n        const { error } = this.state;\n        return (<div className=\"h-100 d-flex justify-content-center align-items-center\">\n            <div className=\"d-flex align-items-center\">\n                {error}\n            </div>\n        </div>);\n    }\n\n    render() {\n        const { error } = this.state;\n        const { devices } = this.props;\n        if (devices.size) {\n            return this.renderDevicesTable();\n        }\n        if (error) {\n            return this.renderError();\n        }\n        return (<div className=\"h-100 d-flex justify-content-center align-items-center\">\n            <Spinner />\n        </div>);\n    }\n    lastSeenIsAvaliable(): boolean {\n        const { bridgeInfo } = this.props;\n        return bridgeInfo?.config?.advanced?.elapsed || bridgeInfo?.config?.advanced?.last_seen != \"disable\";\n    }\n\n    renderDevicesTableHeader() {\n        const { sortColumn, sortDirection } = this.state;\n        const { onSortChange } = this;\n        return (\n            <thead>\n                <tr className=\"text-nowrap\">\n                    <th>#</th>\n                    <th>Pic</th>\n                    <ActionTH<SortColumn> className={style[\"action-column\"]} column=\"device.friendly_name\"\n                        currentDirection={sortDirection} current={sortColumn}\n                        onClick={onSortChange}>Friendly name</ActionTH>\n                    <ActionTH<SortColumn> className={style[\"action-column\"]} column=\"device.ieee_address\"\n                        currentDirection={sortDirection} current={sortColumn}\n                        onClick={onSortChange}>IEEE address</ActionTH>\n                    <ActionTH<SortColumn> className={style[\"action-column\"]} column=\"device.definition.vendor\"\n                        currentDirection={sortDirection} current={sortColumn}\n                        onClick={onSortChange} title=\"definition.vendor\">Manufacturer</ActionTH>\n                    <ActionTH<SortColumn> className={style[\"action-column\"]} column=\"device.definition.model\"\n                        currentDirection={sortDirection} current={sortColumn}\n                        onClick={onSortChange}>Model</ActionTH>\n                    <ActionTH<SortColumn> className={style[\"action-column\"]} column=\"state.linkquality\"\n                        currentDirection={sortDirection} current={sortColumn}\n                        onClick={onSortChange}>LQI</ActionTH>\n                    {this.lastSeenIsAvaliable() && <ActionTH<SortColumn> className={style[\"action-column\"]} column={[\"state.last_seen\", \"state.elapsed\"]}\n                        currentDirection={sortDirection} current={sortColumn}\n                        onClick={onSortChange}>Last seen</ActionTH>}\n                    <ActionTH<SortColumn> className={style[\"action-column\"]} column=\"state.battery\"\n                        currentDirection={sortDirection} current={sortColumn}\n                        onClick={onSortChange}>Power</ActionTH>\n                    <th>&nbsp;</th>\n                </tr>\n            </thead>\n        )\n    }\n\n    renderDevicesTable() {\n        const { sortedTableData } = this.state;\n        return (\n            <div className=\"row no-gutters table-responsive\">\n                <table className=\"table align-middle col-12\">\n                    {this.renderDevicesTableHeader()}\n                    <tbody>\n                        {sortedTableData.map(({ device, state }, id) =>\n                            <tr key={device.friendly_name} title={state?.update?.state == \"available\" ? 'Avaliable OTA update' : device.definition?.description}>\n                                <td className=\"font-weight-bold\">{id + 1}</td>\n                                <td className={style[\"device-pic\"]}>\n                                    <DeviceImage className={style[\"device-image\"]} device={device} deviceStatus={state} />\n                                </td>\n                                <td>\n                                    <Link to={genDeviceDetailsLink(device.ieee_address)}>{device.friendly_name}</Link>\n                                </td>\n                                <td>{device.ieee_address} ({toHex(device.network_address, 4)})</td>\n                                <td className=\"text-truncate text-nowrap position-relative\"><VendorLink device={device} /></td>\n                                <td title={device?.definition?.description}><ModelLink device={device} /></td>\n                                <td><DisplayValue value={state?.linkquality}/></td>\n                                {this.lastSeenIsAvaliable() && <td>{lastSeen(state?.last_seen, state?.elapsed)}</td>}\n                                <td className=\"text-left\">\n                                    <PowerSource source={device.power_source} battery={state?.battery} batteryLow={state?.battery_low} />\n                                </td>\n                                <td>\n                                    <DeviceControlGroup device={device} state={state} />\n                                </td>\n                            </tr>)}\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n}\n\nconst mappedProps = [\"devices\", \"deviceStates\", \"bridgeInfo\"];\nconst ConnectedZigbeePage = connect<{}, ZigbeeTableState, GlobalState, {}>(mappedProps, actions)(ZigbeeTable);\nexport default ConnectedZigbeePage;\n","import React, { Component } from \"react\";\nimport { connect } from \"unistore/react\";\nimport actions, { BridgeApi } from \"../../actions\";\nimport { GlobalState } from \"../../store\";\nimport cx from \"classnames\";\nimport escapeRegExp from \"lodash/escapeRegExp\";\nimport UniversalEditor from \"../universal-editor\";\nimport { logLevelSetting } from \"../settings\";\nimport get from \"lodash/get\";\n\n\n\ntype LogsPageState = {\n    search: string;\n    logLevel: string;\n}\nconst ALL = 'all';\n\nconst Highlighted = ({ text = '', highlight = '' }) => {\n    if (!highlight.trim()) {\n        return <span>{text}</span>\n    }\n    const regex = new RegExp(`(${escapeRegExp(highlight)})`, 'gi')\n    const parts = text.split(regex)\n    return (\n        <span>\n            {parts.filter(part => part).map((part, i) => (\n                regex.test(part) ? <mark key={i}>{part}</mark> : <span key={i}>{part}</span>\n            ))}\n        </span>\n    )\n}\n\nexport class LogsPage extends Component<GlobalState & BridgeApi, LogsPageState> {\n    state = { search: '', logLevel: ALL }\n    updateConfig = (name: string, value: unknown): void => {\n        const { updateConfigValue } = this.props;\n        updateConfigValue(name, value);\n    }\n    renderSearch() {\n        const { search } = this.state;\n        const { bridgeInfo } = this.props;\n        const logLevels = [...logLevelSetting.values];\n        logLevels.unshift(ALL);\n\n        return <form className=\"row row-cols-lg-auto g-3 align-items-center\">\n            <div className=\"col-12\">\n                <label htmlFor=\"log-level\" className=\"form-label\">Show only</label>\n                <select id=\"log-level\" className=\"form-select\" onChange={e => this.setState({ logLevel: e.target.value })}>\n                    {logLevels.map(level => <option key={level} value={level}>{level}</option>)}\n                </select>\n            </div>\n            <div className=\"col-12\">\n                <label htmlFor=\"search-filter\" className=\"form-label\">Filter by text</label>\n                <input id=\"search-filter\" className=\"form-control col-10\" placeholder=\"Enter search criteria\" value={search} onChange={(e) => this.setState({ search: e.target.value })} type=\"text\"></input>\n            </div>\n            <div className=\"col-12\">\n                <label htmlFor={logLevelSetting.key} className=\"form-label\">Configuration log level</label>\n                <UniversalEditor\n                    disabled={get(bridgeInfo, logLevelSetting.path) === undefined}\n                    value={get(bridgeInfo, logLevelSetting.path) as string | ReadonlyArray<string> | number}\n                    values={logLevelSetting.values}\n                    onChange={(value) => this.updateConfig(logLevelSetting.key, value)}\n                />\n            </div>\n        </form>;\n    }\n    render() {\n        let { logs } = this.props;\n        const { search, logLevel } = this.state;\n\n        const _search = new RegExp(search, 'gi');\n\n        logs = logs\n            .filter(l => (logLevel === ALL || l.level === logLevel) && (!search || _search.test(l.message)))\n            .sort();\n\n        return <div className=\"container-fluid h-100 overflow-auto pt-2\">\n            {this.renderSearch()}\n            {logs.length == 0 ? <h1>You don&apos;t have {logLevel === ALL ? 'any' : logLevel} logs</h1> : null}\n            {\n                logs.map((l, idx) => <div key={idx}>\n                    {logLevel === ALL && <><span className={cx(\"badge\", {\n                        'bg-danger': l.level === 'error',\n                        'bg-warning': l.level === 'warning',\n                        'bg-info': l.level === 'info',\n                        'bg-secondary': ['error', 'warning', 'info'].includes(l.level) === false,\n                    }, \"text-capitalize\")}>{l.level}</span>&nbsp;</>}<code>\n                        <Highlighted text={l.message} highlight={search}></Highlighted>\n                    </code></div>)\n            }</div>\n    }\n}\n\nconst mappedProps = [\"logs\", \"bridgeInfo\"];\n\nexport default connect<{}, {}, GlobalState, {}>(mappedProps, actions)(LogsPage);","import React from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport Button from \"./button\";\nimport store from \"../store\";\nimport { download } from \"../utils\";\n\ninterface ErrorBoundaryState {\n    error?: Error;\n}\ntype ErrorBoundaryProps = RouteComponentProps<{}>;\n\nexport default class ErrorBoundary extends React.Component<ErrorBoundaryProps, ErrorBoundaryState> {\n    state: Readonly<ErrorBoundaryState> = {};\n\n    static getDerivedStateFromError(error: Error) {\n        return { hasError: true, error };\n    }\n\n    donwloadState = () => {\n        download(store.getState(), 'state.json');\n    }\n\n    render() {\n        const { error } = this.state;\n        if (error) {\n            return <div className=\"container\">\n                <h1 className=\"text-danger\">Take screenshot of this page and attach it to github issue, additionally <Button<void> className=\"mt-2 btn btn-link\" onClick={() => this.donwloadState()}>download state</Button> and attach to the issue</h1>\n                <h2>{error.name}</h2>\n                <h3>{error.message}</h3>\n                <pre>{error.stack}</pre>\n            </div>\n\n        }\n        return this.props.children;\n    }\n\n    componentDidUpdate(prevProps: ErrorBoundaryProps) {\n        const { location: { pathname } } = this.props;\n        const { location: { pathname: prevPathname } } = prevProps;\n        if (prevPathname !== pathname) {\n            this.setState({ error: null });\n        }\n    }\n}\n\n","import \"./main.css\";\n\nimport \"notyf/notyf.min.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\n\n\nimport React, { Component, FunctionComponent } from 'react';\n\nimport ConnectedMap from \"./components/map\";\n\nimport {\n    Switch,\n    Route,\n    HashRouter\n} from \"react-router-dom\";\n\nimport ConnectedDevicePage from \"./components/device-page\";\nimport TouchlinkPage from \"./components/touchlink-page\";\n\nimport store from \"./store\";\nimport { Provider } from \"unistore/react\";\nimport api from './api';\n\n\nimport ConnectedSettingsPage from \"./components/settings\";\nimport NavBar from \"./components/navbar\";\nimport ConnectedGroupsPage from \"./components/groups\";\nimport ConnectedZigbeePage from \"./components/zigbee\";\nimport LogsPage from \"./components/logs-page\";\nimport ReactDOM from \"react-dom\";\nimport ErrorBoundary from \"./components/ErrorBoundary\";\n\n\nconst ConnectedDevicePageWrap: FunctionComponent<{ dev: string }> = ({ dev }) => (\n    <ConnectedDevicePageWrap dev={dev} />\n);\n\n\napi.connect();\n\n// eslint-disable-next-line react/prefer-stateless-function\nclass Main extends Component {\n    render() {\n        return (\n            <Provider store={store}>\n                <HashRouter>\n                    <NavBar />\n                    <Switch>\n                        <Route path=\"/map\" render={(props) => <ErrorBoundary {...props}><ConnectedMap /></ErrorBoundary>} />\n                        <Route path=\"/device/:dev/:tab?\" render={(props) => <ErrorBoundary {...props}><ConnectedDevicePage /></ErrorBoundary>} />\n                        <Route path=\"/settings/:tab?\" render={(props) => <ErrorBoundary {...props}><ConnectedSettingsPage /></ErrorBoundary>} />\n                        <Route path=\"/groups\" render={(props) => <ErrorBoundary {...props}><ConnectedGroupsPage /></ErrorBoundary>} />\n                        <Route path=\"/logs\" render={(props) => <ErrorBoundary {...props}><LogsPage /></ErrorBoundary>} />\n                        <Route path=\"/touchlink\" render={(props) => <ErrorBoundary {...props}><TouchlinkPage /></ErrorBoundary>} />\n                        <Route path=\"/\" render={(props) => <ErrorBoundary {...props}><ConnectedZigbeePage /></ErrorBoundary>} />\n                    </Switch>\n                </HashRouter>\n            </Provider >\n\n        );\n    }\n}\n\n\nReactDOM.render(<Main />, document.getElementById(\"root\"));\n"],"sourceRoot":""}