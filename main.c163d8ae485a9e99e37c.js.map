{"version":3,"sources":["webpack:///./src/components/map/types.ts","webpack:///./src/components/map/map.css?ebaa","webpack:///./src/components/map/links.tsx","webpack:///./src/images/generic-zigbee-device.png","webpack:///./src/components/device-image/index.tsx","webpack:///./src/components/map/nodes.tsx","webpack:///./src/utils.ts","webpack:///./src/types.ts","webpack:///./src/store.ts","webpack:///./src/initialState.txt","webpack:///./src/api.ts","webpack:///./src/actions.ts","webpack:///./src/components/button/index.tsx","webpack:///./src/components/map/consts.ts","webpack:///./src/components/map/index.tsx","webpack:///./src/components/modal/index.tsx","webpack:///./src/components/device-control/index.tsx","webpack:///./src/components/device-page/style.css?16dd","webpack:///./src/components/power-source/style.css?d24a","webpack:///./src/components/power-source/index.tsx","webpack:///./src/components/vendor-links/verndor-links.tsx","webpack:///./src/components/device-page/info.tsx","webpack:///./src/components/device-picker/index.tsx","webpack:///./src/components/endpoint-picker/index.tsx","webpack:///./src/components/cluster-picker/index.tsx","webpack:///./src/components/device-page/bind-row.tsx","webpack:///./src/components/device-page/bind.tsx","webpack:///./src/components/device-page/states.tsx","webpack:///./src/components/device-page/type-guards.ts","webpack:///./src/components/enum-editor/enum-editor.tsx","webpack:///./src/components/range-editor/range-editor.tsx","webpack:///./src/components/features/numeric/numeric.tsx","webpack:///./src/components/toggle/index.tsx","webpack:///./src/components/features/binary/binary.tsx","webpack:///./src/components/features/enum/enum.tsx","webpack:///./src/components/features/light/light.tsx","webpack:///./src/components/features/switch/switch.tsx","webpack:///./src/components/features/cover/cover.tsx","webpack:///./src/components/features/lock/lock.tsx","webpack:///./src/components/color-editor/color-editor.tsx","webpack:///./src/components/features/composite/color/color.tsx","webpack:///./src/components/textual-editor/textual-editor.tsx","webpack:///./src/components/features/textual/textual.tsx","webpack:///./src/components/features/composite/composite.tsx","webpack:///./src/components/device-page/exposes.tsx","webpack:///./src/components/device-page/tree.css?271e","webpack:///./src/components/device-page/clusters.tsx","webpack:///./src/components/device-page/index.tsx","webpack:///./src/components/touchlink-page/index.tsx","webpack:///./src/components/universal-editor/index.tsx","webpack:///./src/components/settings/index.tsx","webpack:///./src/hooks/useComponentVisible.tsx","webpack:///./src/components/navbar/style.css?1108","webpack:///./src/components/navbar/index.tsx","webpack:///./src/components/groups/style.css?c745","webpack:///./src/components/groups/index.tsx","webpack:///./src/components/zigbee/style.css?bc2b","webpack:///./src/components/zigbee/ActionTH.tsx","webpack:///./src/components/zigbee/index.tsx","webpack:///./src/components/logs-page/index.tsx","webpack:///./src/components/ErrorBoundary.tsx","webpack:///./src/index.tsx"],"names":["ZigbeeRelationship","Link","props","linkType","id","rest","className","link","strokeWidth","fill","LinkLabel","linkLabel","linkquality","links","ref","current","selectAll","data","length","map","sourceIeeeAddr","targetIeeeAddr","key","xlinkHref","AVALIABLE_GENERATORS","device","definition","model","replace","imageGenerators","setimageGenerators","deviceStatus","type","src","onImageError","newGenerators","shift","otaSpinner","update","state","title","interviewSpinner","interviewing","unseccessfullInterview","interview_completed","onError","href","getStarShape","innerCircleArms","styleStarWidth","innerOuterRadiusRatio","centerX","centerY","innerRadius","outerRadius","angle","Math","PI","totalArms","points","i","r","cos","sin","calcStarPoints","onMouseOut","node","onMouseOver","onDblClick","componentDidMount","this","render","deviceType","cn","onDoubleClick","width","height","img","friendlyName","toggle","updateDrag","simulation","dragForce","drag","on","event","d","active","alphaTarget","restart","fx","x","fy","y","undefined","call","componentDidUpdate","nodes","ieeeAddr","genDeviceDetailsLink","deviceIdentifier","toHex","input","padding","repeat","toString","substr","toUpperCase","randomString","len","random","replacer","value","originalObject","Map","dataType","Array","from","entries","reviver","str","FeatureAccessMode","serialize","JSON","stringify","download","filename","blob","Blob","url","window","URL","createObjectURL","a","document","createElement","body","appendChild","setTimeout","click","revokeObjectURL","removeChild","parse","notyf","blacklistedMessages","showNotity","msg","message","level","status","isResponseWithStatus","error","success","send","topic","payload","console","debug","socket","procsessBridgeMessage","setState","bridgeConfig","bridgeInfo","forEach","dev","endpoints","Object","set","ieee_address","devices","groups","logs","getState","newLogs","slice","push","every","val","test","response","networkGraphIsLoading","networkGraph","inGraph","createdLinks","Set","sort","b","relationship","source","dst","target","linkId","join","repeatedLink","has","add","repeated","warn","payloadData","touchlinkScanInProgress","touchlinkDevices","found","touchlinkIdentifyInProgress","touchlinkResetInProgress","startsWith","onMessage","e","deviceStates","newDeviceStates","get","connect","addEventListener","apiUrl","location","host","pathname","protocol","store","addBind","to","clusters","bindParams","Promise","resolve","removeBind","setStateValue","name","setDeviceState","getDeviceState","setPermitJoin","permit","friendly_name","renameDevice","homeassistantRename","removeDevice","force","block","configureDevice","networkMapRequest","routes","createGroup","group","removeGroup","addDeviceToGroup","removeDeviceFromGroup","touchlinkScan","touchlinkIdentify","touchlinkReset","checkOTA","deviceName","updateOTA","updateConfigValue","resetZnp","exportState","onClick","item","promt","confirmed","confirm","children","linkTypes","NeigbhorIsParent","NeigbhorIsAChild","NeigbhorIsASibling","NoneOfTheAbove","s","t","atan2","distancesMap","BrokenLink","Router2Router","Coordinator2Router","Coordinator2EndDevice","EndDevice2Router","getDistance","distance","min","depth","ticked","transform","attr","radius","x1","applyX","max","y1","applyY","x2","y2","dx","dy","dr","sqrt","computeLink","offset","processHighlights","selectedNode","linkedByIndex","n","l","neighboring","computeOpacity","style","o","svgRef","visibleLinks","updateNodes","filter","includes","everything","zoomHandler","onRequestClick","onLinkTypeFilterChange","stateVisibleLinks","checked","inValue","parseInt","v","updateForces","linkForce","strength","chargeForce","distanceMin","distanceMax","repelForce","collisionForce","centerForce","initPage","getBoundingClientRect","renderMap","viewBox","renderMessage","role","renderMapControls","controls","onChange","htmlFor","container","ModalHeader","ModalBody","ModalFooter","modalShow","display","openModal","bind","closeModal","isOpen","prevProps","isRenameModalOpened","isDeviceRemovalModalOpened","renameParams","isHassRename","removeParams","onRenameClick","onRemoveClick","toggleRenameModal","toggleDeviceRemovalModal","onHassEntityIdChange","onFriendlyNameChange","onDeviceRemovalParamChange","renderRenameButton","config","homeassistant","renderDeviceRemovalButton","battery","batteryClass","VendorLink","supported","encodeURIComponent","vendor","toLowerCase","rel","ModelLink","acnchor","displayProps","label","if","supports","network_address","power_source","secs","prop","progress","remaining","floor","onSelect","find","g","options","hidden","devicesOptions","description","getDeviceDisplayName","groupOptions","concat","values","disabled","hasOnlyOneEP","ep","unshift","clusterDescriptions","genScenes","genOnOff","genLevelCtrl","lightingColorCtrl","closuresWindowCovering","pickerId","isChecked","cluster","defaultProps","getEndpoints","obj","keys","members","endpoint","stateRule","setSourceEp","sourceEp","setDestination","destination","setDestinationEp","destinationEp","setClusters","onBindClick","onBind","getBidningParams","onUnBindClick","onUnBind","getDerivedStateFromProps","targeDevice","isValidRule","valid","idx","targetType","sourceEndpoints","rule","getTarget","destinationEndpoints","possibleClusters","output","scope","isNew","rule2key","bidingRules","bindings","targetId","convertBidningsIntoNiceStructure","Date","now","deviceState","isBinaryFeature","feature","isNumericFeature","isTextualFeature","isEnumFeature","isLightFeature","isSwitchFeature","isCoverFeature","isLockFeature","isColorFeature","isCompositeFeature","isPrimitive","step","unit","steps","currentValue","setCurrentValue","showRange","valueAsNumber","onMouseUp","onBlur","renderEditor","property","valueMax","valueMin","renderView","access","ACCESS_WRITE","ACCESS_STATE","valueOn","valueOff","valueExists","brightness","inputY","yRange","xRange","xMin","xMax","yMin","kelvin","stepsConfiguration","position","tilt","toRGB","sourceFormat","X","Z","hex","Y","hue","saturation","rgbToTargetFormat","targetFormat","hsv","xyz","pridePallete","format","currentColor","setCurrentColor","backgroundColor","features","innerFeature","color","FeatureWrapper","onRead","ACCESS_READ","renderFeature","genericParams","wrapperParams","groupedFeatures","f","result","epName","featuresGroup","exposes","ClustersComp","tree","epData","renderContent","match","params","tab","activeClassName","devicePageWithRouter","onIdentifyClick","onResetClick","renderTouchlinkDevices","touchlinkInProgress","touchlinkDevice","channel","renderNoDevices","togglePairs","BluringInput","internalValue","setInternalValue","isToggleParameter","settings","path","updateConfig","renderSwitcher","renderSettings","renderBridgeInfo","renderLegacyApiSettings","setting","advanced","legacy_api","SettingsPageWithRouter","useComponentVisible","initialIsVisible","isComponentVisible","setIsComponentVisible","handleHideDropdown","handleClickOutside","contains","removeEventListener","urls","exact","StartStopJoinButton","selectedRouter","setSelectedRouter","routers","selectAndHide","show","permit_join","getDeviceObj","groupAddress","rowNumber","onRemove","deviceFriendlyName","groupMemebershipInfo","onSubmit","onDeviceSelect","onEpChange","deviceObj","newGroupName","changeHandler","onGroupCreateSubmit","groupFriendlyName","renderGroupCreationForm","required","placeholder","renderGroups","reverse","preventDefault","stopPropagation","column","renderArrow","currentDirection","Component","saveState","storeData","sortDirection","sortColumn","localStorage","setItem","handleLongLoading","size","onSortChange","sortDir","currentTime","sortedTableData","restoreState","storedState","getItem","restored","tableData","renderError","renderDevicesTable","lastSeenIsAvaliable","elapsed","last_seen","renderDevicesTableHeader","lastSeen","diff","donwloadState","getDerivedStateFromError","hasError","stack","getElementById"],"mappings":"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","file":"main.c163d8ae485a9e99e37c.js","sourcesContent":["import { SimulationLinkDatum, SimulationNodeDatum } from \"d3-force\";\nimport { DeviceType, DeviceDefinition } from \"../../types\";\n\nexport interface NodeI extends SimulationNodeDatum {\n    ieeeAddr: string;\n    friendlyName?: string;\n    type?: DeviceType;\n    failed?: string[];\n    lastSeen?: number;\n    definition?: DeviceDefinition;\n}\n\nexport type LinkType =\n    \"Coordinator2EndDevice\" |\n    \"EndDevice2Coordinator\" |\n\n    \"Coordinator2Router\" |\n    \"Router2Coordinator\" |\n\n    \"EndDevice2Router\" |\n    \"Router2EndDevice\" |\n\n    \"Router2Router\" |\n\n    \"BrokenLink\";\n\nexport interface Source extends SimulationNodeDatum {\n    ieeeAddr: string;\n}\n\nexport interface Target extends SimulationNodeDatum {\n    ieeeAddr: string;\n}\nexport enum ZigbeeRelationship {\n    NeigbhorIsParent,\n    NeigbhorIsAChild,\n    NeigbhorIsASibling,\n    NoneOfTheAbove,\n    NeigbhorIsAFormerChild\n}\n\nexport interface LinkI extends SimulationLinkDatum<NodeI> {\n    source: Source;\n    target: Target;\n    linkquality: number;\n    depth: number;\n    routes: unknown[];\n    sourceIeeeAddr: string;\n    targetIeeeAddr: string;\n    sourceNwkAddr: number;\n    lqi: number;\n    relationship: ZigbeeRelationship;\n    linkType: LinkType;\n    repeated?: boolean;\n}\n\nexport interface GraphI {\n    nodes: NodeI[];\n    links: LinkI[];\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"_1TK12NlMUcpu0IZGw5KG9F\",\"img\":\"-vLZFy4QqTaA5Lql2j7WL\",\"node\":\"_3VABKCYaUBV0N55MRkEiCg\",\"link\":\"_2MMYgLsCQ5mPT-AJSdZ4Uz\",\"linkLabel\":\"EFSV-Lj6sJyoW14QA3ig0\",\"links\":\"_3m9RTJKJZqiJx1UmLLzi4\",\"nodes\":\"_1RxBn1bAxqYxk5W0mPwZMS\",\"EndDevice\":\"JhUbmgThutQMk8laPcsxg\",\"Coordinator\":\"_3F14ZWmKtSPPHai2y_MRRj\",\"Router\":\"_1I1ZcuMgRbn_B5HXF9Z2mw\",\"BrokenLink\":\"_3FeEi6FG3R9pYpboNF-OBu\",\"Coordinator2Router\":\"_2cFMSmedVqD5hjj2K7XpsQ\",\"Router2Coordinator\":\"_3KnTt0kzrMwLh56UMBBqwe\",\"Router2Router\":\"_3HeSfltIQjH_mQxhaoHnCs\",\"Coordinator2EndDevice\":\"_2zGuiMZ7r-Z4mfRvCVQEAp\",\"EndDevice2Coordinator\":\"_35uGMHQCj1Sx5FyJk5-Ec1\",\"Router2EndDevice\":\"_1nD8O-bIFFZWctv6x4zD8j\",\"EndDevice2Router\":\"_2tVxslI3DwN1gBA6s3V24b\",\"foreignObject\":\"_1PgTRqMkYD7R1RqIF7R5ni\",\"offline\":\"_3goiiMv86rV5wazL6jDpjU\",\"controls\":\"RIAc5GeET4TLTKyCVy7yK\"};","import { LinkI } from \"./types\";\nimport React, { FunctionComponent, useLayoutEffect, useRef } from \"react\";\nimport style from \"./map.css\";\nimport cx from \"classnames\";\nimport { select } from \"d3-selection\";\n\ninterface LinkProps {\n    link: LinkI;\n    id?: string;\n}\n\nconst Link: FunctionComponent<LinkProps> = props => {\n    const { link: { linkType }, id, ...rest } = props;\n    return <path\n        id={id}\n        className={cx(style.link, style[linkType])}\n        strokeWidth={1}\n        fill=\"transparent\"\n        {...rest}\n    />;\n};\n\ninterface LinkLabelProps extends LinkProps {\n    xlinkHref: string;\n}\n\nconst LinkLabel: FunctionComponent<LinkLabelProps> = props => {\n    const { link } = props;\n    return <text className={style.linkLabel}>{link.linkquality}</text>;\n};\n\ninterface LinksPros {\n    links: LinkI[];\n}\n\nconst Links: FunctionComponent<LinksPros> = props => {\n    const { links } = props;\n    const ref = useRef<SVGGElement>();\n    useLayoutEffect(() => {\n        select(ref.current).selectAll(`.${style.link}`).data(links);\n        select(ref.current).selectAll(`.${style.linkLabel}`).data(links);\n    }, [links.length]);\n\n    return (\n        <g ref={ref} className={style.links}>\n            {links.map((link: LinkI) => <Link\n                id={`edgepath${link.sourceIeeeAddr}-${link.targetIeeeAddr}-${link.linkType}`}\n                key={`link${link.sourceIeeeAddr}-${link.targetIeeeAddr}-${link.linkType}`}\n                link={link}\n            />)}\n            {links.map((link: LinkI) => (\n                <LinkLabel\n                    xlinkHref={`#edgepath${link.sourceIeeeAddr}-${link.targetIeeeAddr}-${link.linkType}`}\n                    key={`label${link.sourceIeeeAddr}-${link.targetIeeeAddr}-${link.linkType}`}\n                    link={link}\n                />\n            ))}\n        </g>\n    );\n};\nexport default Links;\n","export default __webpack_public_path__ + \"d921749ee5fe6bc67e4ca4a150544be0.png\";","import React, { FunctionComponent, ImgHTMLAttributes, useState } from \"react\";\nimport genericDevice from \"../../images/generic-zigbee-device.png\";\nimport { Device, DeviceState } from \"../../types\";\nimport cx from \"classnames\";\ntype DeviceImageProps = {\n    device: Device;\n    deviceStatus?: DeviceState;\n    type?: \"img\" | \"svg\";\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst genericDeiviceImageFallback = (device: Device): string => genericDevice;\nconst genSlsDeviceImageUrlZ2M = (device: Device): string => `https://www.zigbee2mqtt.io/images/devices/${device?.definition?.model?.replace(/:|\\s|\\//g, \"-\")}.jpg`;\nconst genSlsDeviceImageUrlSLS = (device: Device): string => `https://slsys.github.io/Gateway/devices/png/${device?.definition?.model?.replace(\"/\", \"_\")}.png`;\n\nconst AVALIABLE_GENERATORS = [\n    genSlsDeviceImageUrlZ2M, genSlsDeviceImageUrlSLS, genericDeiviceImageFallback\n]\n\nconst DeviceImage: FunctionComponent<DeviceImageProps & ImgHTMLAttributes<HTMLDivElement | SVGImageElement>> = (props) => {\n    const [imageGenerators, setimageGenerators] = useState(AVALIABLE_GENERATORS);\n    const { device, deviceStatus, type = \"img\", className, ...rest } = props;\n    const src = imageGenerators.length ? imageGenerators[0](device) : false;\n    const onImageError = () => {\n        const newGenerators = [...imageGenerators];\n        newGenerators.shift();\n        setimageGenerators(newGenerators);\n    };\n    const otaSpinner = deviceStatus?.update?.state === \"updating\" ? <i title=\"Updating firmware\" className=\"fa fa-sync fa-spin position-absolute bottom-0 right-0\" /> : null;\n    const interviewSpinner = device.interviewing ? <i title=\"Interviewing\" className=\"fa fa-spinner fa-spin position-absolute bottom-0 right-0\" /> : null;\n    const unseccessfullInterview = !device.interviewing && !device.interview_completed ? <i title=\"Interview failed\" className=\"fa fa-exclamation-triangle position-absolute top-0 right-0 text-danger\" /> : null;\n    switch (type) {\n        case \"svg\":\n            return src ? <image {...rest} onError={onImageError} href={src} /> : null;\n        case \"img\":\n        default:\n            return src ? <div className={cx(className, \"position-relative\")} {...rest}>\n                <img  onError={onImageError} src={src} className={\"position-relative\"} />\n                {interviewSpinner}\n                {otaSpinner}\n                {unseccessfullInterview}\n            </div> : null;\n    }\n}\nexport default DeviceImage;","import React, { Component, createRef, RefObject } from \"react\";\nimport { LinkI, NodeI, Source, Target } from \"./types\";\nimport cx from \"classnames\";\nimport style from \"./map.css\";\nimport { MouseEventsResponderNode } from \".\";\nimport { Device } from \"../../types\";\nimport DeviceImage from \"../device-image\";\nimport { Simulation } from \"d3-force\";\nimport { select, selectAll } from \"d3-selection\";\nimport { drag } from \"d3-drag\";\n\n\nconst calcStarPoints = (\n    centerX: number,\n    centerY: number,\n    innerCircleArms: number,\n    innerRadius: number,\n    outerRadius: number\n): string => {\n    const angle = Math.PI / innerCircleArms;\n    const angleOffsetToCenterStar = 60;\n    const totalArms = innerCircleArms * 2;\n    let points = \"\";\n    for (let i = 0; i < totalArms; i++) {\n        const isEvenIndex = i % 2 == 0;\n        const r = isEvenIndex ? outerRadius : innerRadius;\n        const currX = centerX + Math.cos(i * angle + angleOffsetToCenterStar) * r;\n        const currY = centerY + Math.sin(i * angle + angleOffsetToCenterStar) * r;\n        points += `${currX}, ${currY} `;\n    }\n    return points;\n};\n\n\nconst getStarShape = (innerCircleArms: number, styleStarWidth: number, innerOuterRadiusRatio: number): string => {\n    return calcStarPoints(\n        15,\n        15,\n        innerCircleArms,\n        styleStarWidth,\n        innerOuterRadiusRatio\n    );\n};\n\ninterface NodeProps extends MouseEventsResponderNode {\n    node: NodeI;\n}\n\nconst offlineTimeout = 3600 * 2;\n\nexport const isOnline = (device: Device): boolean => {\n\n    return true; //Date.now() - device.lastSeen < offlineTimeout;\n};\n\nclass Node extends Component<NodeProps, {}> {\n    ref = createRef<SVGPolygonElement | SVGCircleElement | SVGImageElement>();\n\n    componentDidMount(): void {\n        const { current } = this.ref;\n        const { node } = this.props;\n        select(current as SVGElement).data([node]);\n    }\n\n    onMouseOut = (): void => {\n        const { node, onMouseOut } = this.props;\n        onMouseOut && onMouseOut(node, this.ref.current);\n    };\n\n    onMouseOver = (): void => {\n        const { node, onMouseOver } = this.props;\n        onMouseOver && onMouseOver(node, this.ref.current);\n    };\n\n    onDblClick = (): void => {\n        const { node, onDblClick } = this.props;\n        onDblClick && onDblClick(node, this.ref.current);\n    };\n\n    render() {\n\n        const { node } = this.props;\n        const { onMouseOver, onMouseOut, onDblClick } = this;\n        const deviceType = node.type as string;\n        const cn = cx(style.node, style[deviceType]); //{ [style.offline]: !isOnline(node.device, time) }\n        return (<g className={cn}\n            ref={this.ref as RefObject<SVGImageElement>}\n            onMouseOver={onMouseOver}\n            onMouseOut={onMouseOut}\n            onDoubleClick={onDblClick}\n        >\n            {\n                node.type === \"Coordinator\" ? (\n                    <polygon\n                        points={getStarShape(5, 5, 14) as string}\n                    />\n                ) : (\n                        <DeviceImage\n                            type=\"svg\"\n                            width={32}\n                            height={32}\n                            device={node as unknown as Device}\n                            className={`${style.img}`}\n                        />\n                    )\n            }\n            <text>{node.friendlyName}</text>\n\n        </g>);\n\n    }\n}\n\ninterface NodesProps extends MouseEventsResponderNode {\n    nodes: NodeI[];\n    simulation: Simulation<NodeI, LinkI>;\n}\n\ntype NodesState = {\n    toggle: boolean;\n}\n\nexport default class Nodes extends Component<NodesProps, NodesState> {\n    state: Readonly<NodesState> = {\n        toggle: false\n    }\n    updateDrag(): void {\n        const { simulation } = this.props;\n        const dragForce = drag<SVGCircleElement, NodeI>()\n            .on(\"start\", (event, d) => {\n                if (!event.active) {\n                    simulation.alphaTarget(0.3).restart();\n                }\n                d.fx = d.x;\n                d.fy = d.y;\n            })\n            .on(\"drag\", (event, d) => {\n                d.fx = event.x;\n                d.fy = event.y;\n            })\n            .on(\"end\", (event, d) => {\n                if (!event.active) {\n                    simulation.alphaTarget(0);\n                }\n                d.fx = undefined;\n                d.fy = undefined;\n            });\n\n\n        selectAll<SVGCircleElement, NodeI>(`.${style.node}`)\n            .call(dragForce);\n    }\n\n    componentDidMount(): void {\n        this.updateDrag();\n    }\n\n    componentDidUpdate(): void {\n        this.updateDrag();\n    }\n\n   \n\n    render() {\n        const { nodes, onMouseOut, onMouseOver } = this.props;\n        return (\n            <g className={style.nodes}>\n                {nodes.map((node: NodeI) => (\n                    <Node\n                        onMouseOut={onMouseOut}\n                        onMouseOver={onMouseOver}\n                        key={node.ieeeAddr}\n                        node={node}\n                    />\n                ))}\n            </g>\n        );\n    }\n}\n","\nimport { Device, Endpoint } from \"./types\";\nimport { GraphI, NodeI } from \"./components/map/types\";\nimport { format } from 'timeago.js';\n\nexport const genDeviceDetailsLink = (deviceIdentifier: string | number): string => (`/device/${deviceIdentifier}`);\n\nexport const toHex = (input: number, padding = 4): string => {\n    return `0x${(`${'0'.repeat(padding)}${input.toString(16)}`).substr(-1 * padding).toUpperCase()}`;\n};\n\n\nexport const toHHMMSS = (secs: number): string => {\n    const hours = Math.floor(secs / 3600);\n    const minutes = Math.floor(secs / 60) % 60;\n    const seconds = Math.floor(secs % 60);\n\n    return [hours, minutes, seconds]\n        .map(v => v < 10 ? `0${v}` : v)\n        .filter((v, i) => v !== \"00\" || i > 0)\n        .join(\":\");\n};\n\nexport type CallbackHandler<T> = (err: boolean, res: T) => void;\nexport interface ApiResponse<T> {\n    success: boolean;\n    result: T;\n}\n\nexport const lastSeen = (lastSeen: string, elapsed: number): string => {\n    if (!lastSeen && !elapsed) {\n        return \"N/A\";\n    }\n    const diff = elapsed ? Date.now() - elapsed : Date.parse(lastSeen);\n    return format(diff);\n};\n\n\nexport const sanitizeGraph = (inGraph: GraphI): GraphI => {\n    const nodes = {};\n    const links = [];\n    const createdLinks = new Set<string>();\n\n    inGraph.nodes.forEach(node => {\n        nodes[node.ieeeAddr] = node;\n    });\n\n    inGraph.links.sort((a, b) => a.relationship - b.relationship).forEach(link => {\n        const src: NodeI = nodes[link.source.ieeeAddr];\n        const dst: NodeI = nodes[link.target.ieeeAddr];\n        if (src && dst) {\n            const linkId = [link.source.ieeeAddr, link.target.ieeeAddr].sort().join('');\n            const repeatedLink = createdLinks.has(linkId);\n            createdLinks.add(linkId);\n            const linkType = [src.type, dst.type].join('2');\n            links.push({ ...link, ...{ source: link.source.ieeeAddr, target: link.target.ieeeAddr, linkType, repeated: repeatedLink } });\n        } else {\n            console.warn(\"Broken link\", link);\n        }\n    });\n\n    inGraph.links = links;\n    return inGraph;\n};\n\nexport const getDeviceDisplayName = (device: Device): string => {\n    return `${device.friendly_name} ${device.definition?.model ? `(${device.definition?.model})` : ''}`;\n};\n\nexport const randomString = (len: number): string => Math.random().toString(36).substr(2, len);\n\nexport const isSecurePage = (): boolean => location.protocol === 'https:';\n\n\nexport const scale = (inputY: number, yRange: Array<number>, xRange: Array<number>): number => {\n    const [xMin, xMax] = xRange;\n    const [yMin, yMax] = yRange;\n\n    const percent = (inputY - yMin) / (yMax - yMin);\n    const outputX = percent * (xMax - xMin) + xMin;\n\n    return outputX;\n};\n\n\n\n\nfunction replacer(key: string, value: object) {\n    const originalObject = this[key];\n    if (originalObject instanceof Map) {\n        return {\n            dataType: 'Map',\n            value: Array.from(originalObject.entries()),\n        };\n    } else {\n        return value;\n    }\n}\n\nfunction reviver(key: string, value: { dataType: string; value: Iterable<readonly [unknown, unknown]>; }) {\n    if (typeof value === 'object' && value !== null) {\n        if (value.dataType === 'Map') {\n            return new Map(value.value);\n        }\n    }\n    return value;\n}\n\nexport const serialize = (data: object) => {\n    return JSON.stringify(data, replacer);\n}\n\nexport const deSerialize = (str: string) => {\n    return JSON.parse(str, reviver);\n}\n\n\nexport const download = (data: object, filename: string): void => {\n    const blob = new Blob([serialize(data)], { type: 'octet/stream' });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    document.body.appendChild(a);\n    a.href = url;\n    a.download = filename;\n\n    setTimeout(() => {\n        a.click();\n        window.URL.revokeObjectURL(url);\n        document.body.removeChild(a);\n    }, 1);\n\n}","export type DeviceType = \"EndDevice\" | \"Router\" | \"Coordinator\";\n\n\ninterface OTAState {\n    state: \"available\" | \"updating\";\n    progress: number;\n    remaining: number;\n}\nexport type RGBColor = {\n    r: number;\n    g: number;\n    b: number;\n}\nexport type HueSaturationColor = {\n    hue: number;\n    saturation: number;\n}\n\nexport type XYColor = {\n    x: number;\n    y: number;\n}\nexport type AnyColor = RGBColor | XYColor | HueSaturationColor;\nexport interface DeviceState {\n    battery: number;\n    last_seen?: string;\n    elapsed?: number;\n    linkquality: number;\n    update?: OTAState;\n    state?: string;\n    brightness?: number;\n    color_temp?: number;\n    color?: AnyColor;\n    tilt?: number;\n    position?: number;\n    [k: string]: string | number | boolean | OTAState | AnyColor;\n}\n\nexport type Cluster = string;\n\nexport type Endpoint = string | number;\n\n\n\n\nexport interface Meta {\n    revision: number;\n    transportrev: number;\n    product: number;\n    majorrel: number;\n    minorrel: number;\n    maintrel: number;\n}\n\nexport interface Coordinator {\n    type: string;\n    meta: Meta;\n}\n\nexport interface Network {\n    channel: number;\n    pan_id: number;\n    extended_pan_id: number[];\n}\nexport interface Z2MConfig {\n    homeassistant: boolean;\n    advanced: {\n        elapsed: boolean;\n        last_seen: 'disable' | 'ISO_8601' | 'ISO_8601_local' | 'epoch';\n        legacy_api: boolean;\n    };\n    [k: string]: unknown;\n}\nexport interface BridgeConfig {\n    version: string;\n    commit: string;\n    coordinator: Coordinator;\n    network: Network;\n    log_level: string;\n    permit_join: boolean;\n\n}\n\nexport interface BridgeInfo {\n    config: Z2MConfig;\n    permit_join: boolean;\n}\n\nexport type PowerSource = \"Battery\" | \"Mains (single phase)\" | \"DC Source\";\n\nexport type GenericFeatureType = \"numeric\" | \"binary\" | \"enum\" | \"text\";\nexport type ComposeiteFeatureType = \"fan\" | \"light\" | \"switch\" | \"cover\" | \"lock\" | \"composite\";\nexport type AllPossibleFeatures = GenericFeatureType & ComposeiteFeatureType;\n\n\nexport enum FeatureAccessMode {\n    NONE,\n    ACCESS_STATE = 0b001,\n    ACCESS_WRITE = 0b010,\n    ACCESS_READ = 0b100,\n}\nexport interface GenericExposedFeature {\n    type: GenericFeatureType;\n    name: string;\n    access?: FeatureAccessMode;\n    endpoint?: Endpoint;\n    property: string;\n}\n\nexport interface BinaryFeature extends GenericExposedFeature {\n    type: \"binary\";\n    value_on: unknown;\n    value_off: unknown;\n    value_toggle?: unknown;\n}\n\nexport interface CompositeFeature extends Omit<GenericExposedFeature, \"type\"> {\n    type: ComposeiteFeatureType;\n    features: (GenericExposedFeature | CompositeFeature)[];\n}\n\nexport type GenericOrCompositeFeature = GenericExposedFeature | CompositeFeature;\n\nexport interface NumericFeature extends GenericExposedFeature {\n    type: \"numeric\";\n    unit?: \"string\";\n    value_min?: number;\n    value_max?: number;\n}\n\nexport interface TextualFeature extends GenericExposedFeature {\n    type: \"text\";\n}\n\nexport interface EnumFeature extends GenericExposedFeature {\n    type: \"enum\";\n    values: unknown[];\n}\n\nexport interface LightFeature extends CompositeFeature {\n    type: \"light\";\n}\n\nexport interface SwitchFeature extends CompositeFeature {\n    type: \"switch\";\n}\n\nexport interface CoverFeature extends CompositeFeature {\n    type: \"cover\";\n}\n\nexport interface LockFeature extends CompositeFeature {\n    type: \"lock\";\n}\nexport interface FanFeature extends CompositeFeature {\n    type: \"fan\";\n}\n\n\nexport interface ColorFeature extends CompositeFeature {\n    type: \"composite\";\n    name: \"color_xy\" | \"color_hs\";\n    features: NumericFeature[];\n}\n\nexport interface DeviceDefinition {\n    description: string;\n    model: string;\n    supports: string;\n    vendor: string;\n    exposes: GenericExposedFeature[] | CompositeFeature[];\n}\n\nexport interface EndpointDescription {\n    bindings: BindRule[];\n    clusters: {\n        input: Cluster[];\n        output: Cluster[];\n    };\n}\n\nexport interface Device {\n    ieee_address: string;\n    type: DeviceType;\n    network_address: number;\n    model: string;\n    friendly_name: string;\n    power_source: PowerSource;\n    interviewing: boolean;\n    interview_completed: boolean;\n    software_build_id: number;\n    supported: boolean;\n    definition?: DeviceDefinition;\n    date_code: string;\n    endpoints: Map<Endpoint, EndpointDescription>;\n}\n\nexport type ObjectType = \"device\" | \"group\";\nexport interface BindRule {\n    cluster: Cluster;\n    target: {\n        id?: number;\n        endpoint?: Endpoint;\n        ieee_address?: string;\n        type: \"endpoint\" | \"group\";\n    };\n\n}\nexport type SortDirection = \"asc\" | \"desc\";\n\nexport interface TouchLinkDevice {\n    ieee_address: string;\n    channel: number;\n}","import createStore from \"unistore\";\nimport devtools from \"unistore/devtools\";\nimport initialState from './initialState.txt';\n\n\nimport { Device, DeviceState, BridgeConfig, BridgeInfo, TouchLinkDevice } from \"./types\";\nimport { GraphI } from \"./components/map/types\";\nimport { deSerialize } from \"./utils\";\n\nexport interface GroupAddress {\n    endpoint: number;\n    ieee_address: string;\n}\n\nexport interface Group {\n    id: number;\n    friendly_name: string;\n    members: GroupAddress[];\n}\n\nexport interface LogMessage {\n    level: \"error\" | \"info\" | \"warning\";\n    message: string;\n}\n\nexport interface GlobalState {\n    devices: Map<string, Device>;\n    deviceStates: Map<string, DeviceState>;\n    touchlinkDevices: TouchLinkDevice[];\n    touchlinkScanInProgress: boolean;\n    touchlinkIdentifyInProgress: boolean;\n    touchlinkResetInProgress: boolean;\n    networkGraph: GraphI;\n    networkGraphIsLoading: boolean;\n    groups: Group[];\n    bridgeConfig: BridgeConfig;\n    bridgeInfo: BridgeInfo;\n    logs: LogMessage[];\n};\nconst _store = createStore(deSerialize(initialState) as GlobalState);\nconst store = process.env.NODE_ENV === 'production' ?  _store : devtools(_store);\n\nexport default store;","export default \"{\\n  \\\"devices\\\": {\\\"dataType\\\":\\\"Map\\\",\\\"value\\\":[]},\\n  \\\"deviceStates\\\": {\\\"dataType\\\":\\\"Map\\\",\\\"value\\\":[]},\\n  \\\"touchlinkDevices\\\": [],\\n  \\\"touchlinkScanInProgress\\\": false,\\n  \\\"touchlinkIdentifyInProgress\\\": false,\\n  \\\"touchlinkResetInProgress\\\": false,\\n  \\\"networkGraph\\\": {\\n    \\\"links\\\": [],\\n    \\\"nodes\\\": []\\n  },\\n  \\\"networkGraphIsLoading\\\": false,\\n  \\\"groups\\\": [],\\n  \\\"bridgeConfig\\\": {},\\n  \\\"bridgeInfo\\\": {},\\n  \\\"logs\\\": []\\n}\";","import ReconnectingWebSocket from \"reconnecting-websocket\";\nimport store, { Group, LogMessage } from \"./store\";\nimport { BridgeConfig, BridgeInfo, TouchLinkDevice, Device, DeviceState } from './types';\nimport { sanitizeGraph, isSecurePage } from \"./utils\";\nimport { Notyf } from \"notyf\";\nimport { GraphI } from \"./components/map/types\";\n\nimport orderBy from \"lodash/orderBy\";\n\n\nconst MAX_LOGS_RECORDS_IN_BUFFER = 100;\n\nconst notyf = new Notyf();\n\ninterface Message {\n    topic: string;\n    payload: string | object | object[] | string[];\n}\n\nconst blacklistedMessages: RegExp[] = [\n    /MQTT publish/\n];\n\nconst isLogMessage = (msg: LogMessage | ResponseWithStatus): msg is LogMessage => {\n    return (msg as LogMessage).level !== undefined && (msg as LogMessage).message !== undefined;\n}\n\nconst isResponseWithStatus = (msg: LogMessage | ResponseWithStatus): msg is ResponseWithStatus => {\n    return (msg as ResponseWithStatus).status !== undefined;\n}\n\nconst showNotity = (data: LogMessage | ResponseWithStatus): void => {\n    let message = \"\", level = \"\";\n    if (isLogMessage(data)) {\n        message = data.message;\n        level = data.level;\n    } else if (isResponseWithStatus(data)) {\n        switch (data.status) {\n            case \"error\":\n                level = \"error\";\n                message = data.error;\n                break;\n            default:\n                break;\n        }\n    }\n\n    switch (level) {\n        case \"error\":\n        case \"warning\":\n            notyf.error(message);\n            break;\n        case \"info\":\n            notyf.success(message);\n            break;\n\n        default:\n            break;\n    }\n};\n\ninterface ResponseWithStatus {\n    status: \"ok\" | \"error\";\n    data: unknown;\n    error?: string;\n}\ninterface TouchllinkScanResponse extends ResponseWithStatus {\n    data: {\n        found: TouchLinkDevice[];\n    };\n}\nclass Api {\n    url: string;\n    socket: ReconnectingWebSocket;\n    constructor(url: string) {\n        this.url = url;\n    }\n    send = (topic: string, payload: unknown): void => {\n        console.debug(\"Calling API\", { topic, payload });\n        this.socket.send(JSON.stringify({ topic, payload }));\n    }\n\n    connect(): void {\n        this.socket = new ReconnectingWebSocket(this.url);\n\n        this.socket.addEventListener(\"message\", this.onMessage);\n    }\n    private procsessBridgeMessage = (data: Message): void => {\n        switch (data.topic) {\n            case \"bridge/config\":\n                store.setState({\n                    bridgeConfig: data.payload as BridgeConfig\n                });\n                break;\n\n            case \"bridge/info\":\n                store.setState({\n                    bridgeInfo: data.payload as BridgeInfo\n                });\n                break;\n\n            case \"bridge/devices\":\n                {\n                    const devicesMap = new Map();\n                    orderBy((data.payload as Device[]), \"friendly_name\").forEach((device) => {\n                        const dev = { ...device };\n                        dev.endpoints = new Map(Object.entries(device.endpoints));\n                        devicesMap.set(device.ieee_address, dev);\n                    });\n                    store.setState({\n                        devices: devicesMap\n                    })\n                }\n                break;\n\n            case \"bridge/groups\":\n                store.setState({\n                    groups: data.payload as Group[]\n                })\n                break;\n\n            case \"bridge/event\":\n                break;\n\n            case \"bridge/logging\":\n                {\n                    const { logs } = store.getState();\n                    const newLogs = [...logs.slice(-MAX_LOGS_RECORDS_IN_BUFFER)];\n                    newLogs.push(data.payload as LogMessage);\n                    store.setState({ logs: newLogs });\n                    const log = data.payload as LogMessage;\n                    if (blacklistedMessages.every(val => !val.test(log.message))) {\n                        showNotity(log);\n                    }\n                }\n                break;\n\n            case \"bridge/response/networkmap\":\n                {\n                    const response = data.payload as ResponseWithStatus;\n                    if (response.status == \"ok\") {\n                        const { value } = response.data as {value: unknown};\n                        store.setState({\n                            networkGraphIsLoading: false,\n                            networkGraph: sanitizeGraph(value as GraphI)\n                        });\n                    } else {\n                        store.setState({ networkGraphIsLoading: false });\n                    }\n                }\n                break;\n\n\n            case \"bridge/response/touchlink/scan\":\n                {\n                    const { status, data: payloadData } = data.payload as TouchllinkScanResponse;\n                    if (status === \"ok\") {\n                        store.setState({ touchlinkScanInProgress: false, touchlinkDevices: payloadData.found });\n                    } else {\n                        store.setState({ touchlinkScanInProgress: false });\n                    }\n                }\n                break;\n\n            case \"bridge/response/touchlink/identify\":\n                store.setState({ touchlinkIdentifyInProgress: false });\n                break;\n\n            case \"bridge/response/touchlink/factory_reset\":\n                store.setState({ touchlinkResetInProgress: false });\n                break;\n\n            default:\n                break;\n        }\n        if (data.topic.startsWith(\"bridge/response/\")) {\n            showNotity(data.payload as ResponseWithStatus);\n        }\n    }\n\n    private onMessage = (event: MessageEvent): void => {\n        let data = {} as Message;\n        try {\n            data = JSON.parse(event.data) as Message;\n        } catch (e) {\n            notyf.error(e.message);\n            notyf.error(event.data);\n        }\n\n        if (data.topic.startsWith(\"bridge/\")) {\n            this.procsessBridgeMessage(data);\n        }  else {\n            const { deviceStates } = store.getState();\n            const newDeviceStates = new Map(deviceStates);\n            newDeviceStates.set(data.topic, { ...newDeviceStates.get(data.topic), ...(data.payload as DeviceState) });\n            store.setState({ deviceStates: newDeviceStates });\n        }\n    }\n}\nconst apiUrl = `${window.location.host}${document.location.pathname}api`;\nconst api = new Api(`${isSecurePage() ? 'wss' : 'ws'}://${apiUrl}`);\nexport default api;","/* eslint-disable @typescript-eslint/no-unused-vars */\n\nimport { GlobalState } from \"./store\";\nimport { Store } from \"unistore\";\n\nimport { Cluster, Device, TouchLinkDevice } from \"./types\";\nimport api from \"./api\";\nimport { endDevice2Router } from \"./components/map/map.module.css\";\nimport { download } from \"./utils\";\n\nexport interface UtilsApi {\n    exportState(): Promise<void>;\n}\n\nexport interface TouchlinkApi {\n    touchlinkScan(): Promise<void>;\n    touchlinkIdentify(device: TouchLinkDevice): Promise<void>;\n    touchlinkReset(device: TouchLinkDevice): Promise<void>;\n}\n\nexport interface OtaApi {\n    checkOTA(deviceName: string): Promise<void>;\n    updateOTA(deviceName: string): Promise<void>;\n}\nexport interface DeviceApi {\n    renameDevice(\n        old: string,\n        newName: string,\n        homeassistantRename: boolean\n    ): Promise<void>;\n    removeDevice(dev: string, force: boolean, block: boolean): Promise<void>;\n    configureDevice(name: string): Promise<void>;\n}\n\nexport interface StateApi {\n    setStateValue(dev: string, name: string, value: unknown): Promise<void>;\n    setDeviceState(dev: string, value: object): Promise<void>;\n    getDeviceState(dev: string, value: object): Promise<void>;\n}\n\nexport interface GroupsApi {\n    createGroup(name: string): Promise<void>;\n    removeGroup(name: string): Promise<void>;\n    addDeviceToGroup(device: string, group: string): Promise<void>;\n    removeDeviceFromGroup(device: string, group: string): Promise<void>;\n}\nexport interface BindApi {\n    addBind(from: string, to: string, clusters: Cluster[]): Promise<void>;\n    removeBind(from: string, to: string, clusters: Cluster[]): Promise<void>;\n}\nexport interface BridgeApi {\n    setPermitJoin(permit: boolean, device: Device): Promise<void>;\n    updateConfigValue(name: string, value: unknown): Promise<void>;\n}\nexport interface MapApi {\n    networkMapRequest(): Promise<void>;\n}\n\nexport interface LegacyApi {\n    resetZnp(): Promise<void>;\n}\n\nconst actions = (store: Store<GlobalState>): object => ({\n    addBind: (\n        state,\n        from: string,\n        to: string,\n        clusters: Cluster[]\n    ): Promise<void> => {\n        const bindParams = {\n            from,\n            to,\n            clusters,\n        };\n        api.send(\"bridge/request/device/bind\", bindParams);\n        return Promise.resolve();\n    },\n    removeBind: (\n        state,\n        from: string,\n        to: string,\n        clusters: Cluster[]\n    ): Promise<void> => {\n        const bindParams = {\n            from,\n            to,\n            clusters,\n        };\n        api.send(\"bridge/request/device/unbind\", bindParams);\n        return Promise.resolve();\n    },\n\n    setStateValue(\n        state,\n        dev: string,\n        name: string,\n        value: string | number | boolean\n    ): Promise<void> {\n        api.send(`${dev}/set`, { [name]: value });\n        return Promise.resolve();\n    },\n    setDeviceState(state, dev: string, value: object) {\n        api.send(`${dev}/set`, value);\n        return Promise.resolve();\n    },\n    getDeviceState(state, dev: string, value: object) {\n        api.send(`${dev}/get`, value);\n        return Promise.resolve();\n    },\n    setPermitJoin(state, permit = true, device: Device): Promise<void> {\n        api.send(\"bridge/request/permit_join\", { value: permit, device: device?.friendly_name });\n        return Promise.resolve();\n    },\n\n    renameDevice: (\n        state,\n        from: string,\n        to: string,\n        homeassistantRename: boolean\n    ): Promise<void> => {\n        api.send(\"bridge/request/device/rename\", {\n            from,\n            to,\n            'homeassistant_rename': homeassistantRename,\n        });\n        return Promise.resolve();\n    },\n    removeDevice: (\n        state,\n        dev: string,\n        force: boolean,\n        block: boolean\n    ): Promise<void> => {\n        api.send(\"bridge/request/device/remove\", { id: dev, force, block });\n        return Promise.resolve();\n    },\n\n    configureDevice: (state, name: string): Promise<void> => {\n        api.send(\"bridge/request/device/configure\", { id: name });\n        return Promise.resolve();\n    },\n\n    networkMapRequest: (state): Promise<void> => {\n        store.setState({ networkGraphIsLoading: true });\n        api.send(\"bridge/request/networkmap\", { type: \"raw\", routes: false });\n        return Promise.resolve();\n    },\n    createGroup: (state, group: string): Promise<void> => {\n        api.send(\"bridge/request/group/add\", group);\n        return Promise.resolve();\n    },\n\n    removeGroup: (state, group: string): Promise<void> => {\n        api.send(\"bridge/request/group/remove\", group);\n        return Promise.resolve();\n    },\n\n    addDeviceToGroup: (state, device: string, group: string): Promise<void> => {\n        api.send(\"bridge/request/group/members/add\", { group, device });\n        return Promise.resolve();\n    },\n\n    removeDeviceFromGroup: (\n        state,\n        device: string,\n        group: string\n    ): Promise<void> => {\n        api.send(\"bridge/request/group/members/remove\", { device, group });\n        return Promise.resolve();\n    },\n\n    touchlinkScan(): Promise<void> {\n        store.setState({ touchlinkScanInProgress: true, touchlinkDevices: [] });\n        api.send(\"bridge/request/touchlink/scan\", \"\");\n        return Promise.resolve();\n    },\n    touchlinkIdentify(state, device: TouchLinkDevice): Promise<void> {\n        store.setState({ touchlinkIdentifyInProgress: true });\n        api.send(\"bridge/request/touchlink/identify\", device);\n        return Promise.resolve();\n    },\n    touchlinkReset(state, device: TouchLinkDevice): Promise<void> {\n        store.setState({ touchlinkResetInProgress: true });\n        api.send(\"bridge/request/touchlink/factory_reset\", device);\n        return Promise.resolve();\n    },\n\n    checkOTA: (state, deviceName: string): Promise<void> => {\n        api.send(\"bridge/request/device/ota_update/check\", { id: deviceName });\n        return Promise.resolve();\n    },\n    updateOTA: (state, deviceName: string): Promise<void> => {\n        api.send(\"bridge/request/device/ota_update/update\", { id: deviceName });\n        return Promise.resolve();\n    },\n    updateConfigValue(state, name: string, value: unknown): Promise<void> {\n        api.send(`bridge/request/config/${name}`, value);\n        return Promise.resolve();\n    },\n\n    resetZnp(state): Promise<void> {\n        api.send(`bridge/config/reset`, \"\");\n        return Promise.resolve();\n    },\n    exportState(state): Promise<void> {\n        download(state, 'state.json');\n        return Promise.resolve();\n    }\n});\nexport default actions;\n","import React, { ButtonHTMLAttributes, Component } from \"react\";\n\ninterface ButtonProps<T> {\n    item?: T;\n    onClick?(arg1: T): void;\n    promt?: boolean | string;\n}\n\nexport default class Button<T> extends Component<ButtonProps<T> & Omit<ButtonHTMLAttributes<HTMLButtonElement>, 'onClick'>, {}> {\n    onClick = (): void => {\n        const { item, onClick, promt } = this.props;\n        let confirmed = true;\n        if (promt) {\n            confirmed = confirm(typeof promt === \"string\" ? promt : \"Are you sure?\");\n        }\n        confirmed && onClick && onClick(item);\n    };\n\n    render() {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { children, item, promt, ...rest } = this.props;\n        return <button type=\"button\" {...rest} onClick={this.onClick}>{children}</button>;\n    }\n}","import { ZigbeeRelationship } from \"./types\";\n\ninterface LinkType {\n  title: string;\n  relationship: ZigbeeRelationship;\n}\nexport const linkTypes: LinkType[] = [\n  {\n      title: 'IsParent',\n      relationship: ZigbeeRelationship.NeigbhorIsParent\n  },\n  {\n      title: 'IsAChild',\n      relationship: ZigbeeRelationship.NeigbhorIsAChild\n  },\n  {\n      title: 'IsASibling',\n      relationship: ZigbeeRelationship.NeigbhorIsASibling\n  },\n  {\n      title: 'NoneOfTheAbove',\n      relationship: ZigbeeRelationship.NoneOfTheAbove\n  }\n];","import React, { ChangeEvent, Component, createRef, Fragment } from \"react\";\nimport Links from \"./links\";\nimport Nodes from \"./nodes\";\nimport style from \"./map.css\";\nimport { GraphI, LinkI, NodeI, Source, Target, ZigbeeRelationship } from \"./types\";\nimport { connect } from \"unistore/react\";\nimport { GlobalState } from \"../../store\";\nimport actions, { MapApi } from \"../../actions\";\n\nimport Button from \"../button\";\nimport { ForceLink, forceLink, forceCollide, forceCenter, forceSimulation, forceX, forceY } from \"d3-force\";\nimport { select, selectAll, Selection } from \"d3-selection\";\nimport { forceManyBodyReuse } from \"d3-force-reuse\"\nimport { zoom, zoomIdentity, ZoomTransform } from \"d3-zoom\";\nimport { linkTypes } from \"./consts\";\n\nexport interface MouseEventsResponderNode {\n    onMouseOver?: (arg0: NodeI, el: SVGPolygonElement | SVGCircleElement | SVGImageElement) => void;\n    onMouseOut?: (arg0: NodeI, el: SVGPolygonElement | SVGCircleElement | SVGImageElement) => void;\n    onDblClick?: (arg0: NodeI, el: SVGPolygonElement | SVGCircleElement | SVGImageElement) => void;\n}\n\ninterface MapState {\n    selectedNode: NodeI;\n    width: number;\n    height: number;\n    visibleLinks: ZigbeeRelationship[];\n}\nconst angle = (s: Source, t: Target) => Math.atan2(t.y - s.y, t.x - s.x);\nconst xpos = (offset: number, s: Source, t: Target) => offset * Math.cos(angle(s, t)) + s.x;\nconst ypos = (offset: number, s: Source, t: Target) => offset * Math.sin(angle(s, t)) + s.y;\n\nconst distancesMap = {\n    BrokenLink: 450,\n    Router2Router: 300,\n    Coordinator2Router: 400,\n    Coordinator2EndDevice: 100,\n    EndDevice2Router: 100\n};\n\nconst getDistance = (d: LinkI): number => {\n    const distance = distancesMap[d.linkType] ?? 200;\n    const depth = ~~(Math.min(4, d.depth));\n    return 50 * depth + distance;\n};\n\nconst computeLink = (d: LinkI, transform: ZoomTransform, radius: number, width: number, height: number): string => {\n    const src = d.source;\n    const dst = d.target;\n    const x1 = transform.applyX(Math.max(radius, Math.min(width - radius, src.x)));\n    const y1 = transform.applyY(Math.max(radius, Math.min(height - radius, src.y)));\n    const x2 = transform.applyX(Math.max(radius, Math.min(width - radius, dst.x)));\n    const y2 = transform.applyY(Math.max(radius, Math.min(height - radius, dst.y)));\n\n    const dx = x2 - x1, dy = y2 - y1;\n    const dr = Math.sqrt(dx * dx + dy * dy);\n    if (d.repeated) {\n        return `M${x1},${y1} A${dr},${dr} 0 0, 1${x2},${y2}`;\n    }\n    return `M ${x1} ${y1} L ${x2} ${y2}`;\n}\n\ntype SelNode = Selection<SVGElement, NodeI, HTMLElement, unknown>;\ntype SelLink = Selection<SVGElement, LinkI, HTMLElement, unknown>;\n\ntype TickedParams = {\n    transform: ZoomTransform;\n    node: SelNode;\n    link: SelLink;\n    linkLabel: SelLink;\n    width: number;\n    height: number;\n}\nconst ticked = ({ transform, node, link, linkLabel, width, height }: TickedParams): void => {\n    const radius = 40;\n    link.attr(\"d\", (d) => computeLink(d, transform, radius, width, height));\n\n    linkLabel\n        .attr('text-anchor', (d) => d.repeated ? 'start' : 'end')\n        .attr('x', (d) => transform.applyX(xpos(d.repeated ? 30 : 60, d.source, d.target)))\n        .attr('y', (d) => transform.applyY(ypos(d.repeated ? 30 : 60, d.source, d.target)))\n\n    const imgXShift = 32 / 2;\n    const imgYShift = 32 / 2;\n    const computeTransform = (d: NodeI) => {\n        const nodeX = Math.max(radius, Math.min(width - radius, transform.applyX(d.x))) - imgXShift;\n        const nodeY = Math.max(radius, Math.min(height - radius, transform.applyY(d.y))) - imgYShift;\n        return `translate(${nodeX}, ${nodeY})`;\n    }\n    node.attr(\"transform\", computeTransform);\n};\ntype ProcessHighlightsParams = {\n    networkGraph: GraphI;\n    links: LinkI[];\n    selectedNode: NodeI;\n    node: SelNode;\n    link: SelLink;\n    linkLabel: SelLink;\n}\nconst processHighlights = ({ networkGraph, links, selectedNode, node, link, linkLabel }: ProcessHighlightsParams) => {\n    const linkedByIndex = new Set<string>();\n    networkGraph.nodes.forEach(n => linkedByIndex.add(n.ieeeAddr + \",\" + n.ieeeAddr));\n    links.forEach((l) => linkedByIndex.add(l.sourceIeeeAddr + \",\" + l.targetIeeeAddr));\n\n    const neighboring = (a: Source, b: Target): boolean => linkedByIndex.has(a.ieeeAddr + \",\" + b.ieeeAddr)\n    const computeOpacity = (l: LinkI) => (l.source === selectedNode || l.target === selectedNode ? 1 : 0.15);\n    if (selectedNode) {\n        node.style(\"opacity\", (o: NodeI) => neighboring(selectedNode, o) || neighboring(o, selectedNode) ? 1 : 0.15);\n        link.style(\"stroke-opacity\", computeOpacity);\n        linkLabel.style(\"opacity\", computeOpacity);\n    } else {\n        node.style(\"opacity\", 1);\n        link.style(\"stroke-opacity\", 1);\n        linkLabel.style(\"opacity\", 1);\n    }\n}\n\nexport class MapComponent extends Component<GlobalState & MapApi, MapState> {\n    ref = createRef<HTMLDivElement>();\n    svgRef = createRef<SVGSVGElement>();\n    simulation = forceSimulation<NodeI, LinkI>();\n    state: Readonly<MapState> = {\n        selectedNode: null,\n        width: 0,\n        height: 0,\n        visibleLinks: [ZigbeeRelationship.NeigbhorIsAChild]\n    };\n    transform: ZoomTransform = zoomIdentity;\n\n    updateNodes = (): void => {\n        const { networkGraph } = this.props;\n        const { visibleLinks, selectedNode, width, height } = this.state;\n\n        const node = selectAll<SVGElement, NodeI>(`.${style.node}`);\n        const link = selectAll<SVGElement, LinkI>(`.${style.link}`);\n        const linkLabel = selectAll<SVGElement, LinkI>(`.${style.linkLabel}`);\n\n        const links = networkGraph.links.filter(l => visibleLinks.includes(l.relationship));\n        this.simulation.nodes(networkGraph.nodes);\n        this.simulation.force<ForceLink<NodeI, LinkI>>(\"link\").links(links);\n        this.simulation.on(\"tick\", () => ticked({ transform: this.transform, node, link, linkLabel, width, height }));\n        this.simulation.restart();\n\n\n        //add zoom capabilities\n        const everything = select<SVGGeometryElement, NodeI>('.everything');\n        const zoomHandler = zoom().on(\"zoom\", ({ transform }) => {\n            everything.attr(\"transform\", transform);\n            this.transform = transform;\n            ticked({ transform, node, link, linkLabel, width, height });\n        });\n        zoomHandler(select(this.svgRef.current));\n\n        processHighlights({ networkGraph, links, selectedNode, node, link, linkLabel });\n        node.on(\"click\", (event, d: NodeI) => {\n            const { selectedNode } = this.state;\n            this.setState({ selectedNode: selectedNode ? null : d });\n        });\n    }\n\n\n    updateForces(width: number, height: number): void {\n        const linkForce = forceLink<NodeI, LinkI>()\n            .id(d => d.ieeeAddr)\n            .distance(getDistance)\n            .strength(0.2);\n\n        const chargeForce = forceManyBodyReuse()\n            .distanceMin(200)\n            .distanceMax(1000)\n            .strength(-200);\n\n        const repelForce = forceManyBodyReuse()\n            .strength(-140)\n            .distanceMax(50)\n            .distanceMin(20);\n\n        const collisionForce = forceCollide(40)\n            .strength(1);\n\n        const centerForce = forceCenter(width / 2, height / 2);\n\n        this.simulation = forceSimulation<NodeI, LinkI>()\n            .force(\"link\", linkForce)\n            .force(\"charge\", chargeForce)\n            .force(\"collisionForce\", collisionForce)\n            .force(\"repelForce\", repelForce)\n            .force(\"center\", centerForce)\n            .force(\"x\", forceX())\n            .force(\"y\", forceY())\n    }\n\n    initPage(): void {\n        const { width, height } = (this.ref.current as HTMLDivElement).getBoundingClientRect();\n        this.setState({ width, height });\n        this.updateForces(width, height);\n    }\n\n    componentDidMount(): void {\n        this.initPage()\n    }\n\n    componentDidUpdate(): void {\n        this.updateNodes();\n    }\n\n    renderMap() {\n        const { width, height, visibleLinks } = this.state;\n        const { networkGraph } = this.props;\n        const links = networkGraph.links.filter(l => visibleLinks.includes(l.relationship));\n        return (\n            <svg ref={this.svgRef} viewBox={`0 0 ${width} ${height}`}>\n                <g className=\"everything\">\n                    <Links links={links} />\n                    <Nodes\n                        nodes={networkGraph.nodes}\n                        simulation={this.simulation}\n                    />\n                </g>\n            </svg >\n        )\n    }\n    onRequestClick = (): void => {\n        const { networkMapRequest } = this.props;\n        networkMapRequest();\n    }\n    renderMessage() {\n        const { networkGraphIsLoading } = this.props;\n        return (\n            <div className=\"h-100 d-flex justify-content-center align-items-center\">\n                {\n                    networkGraphIsLoading ? (\n                        <div>\n                            <div className=\"d-flex align-items-center\">\n                                <strong>Loading, please wait.</strong>\n                                <div className=\"spinner-border ml-2\" role=\"status\">\n                                    <span className=\"sr-only\">Loading...</span>\n                                </div>\n                            </div>\n                            <div>Depending on the size of your network this can take somewhere between 10 seconds and 2 minutes.</div>\n                        </div>\n\n                    ) : <Button onClick={this.onRequestClick} className=\"btn btn-primary d-block\">Load map</Button>\n                }\n            </div>\n        );\n    }\n    onLinkTypeFilterChange = (e: ChangeEvent<HTMLInputElement>): void => {\n        const { visibleLinks: stateVisibleLinks } = this.state;\n        const { checked, value } = e.target;\n        const inValue = parseInt(value, 10);\n        let visibleLinks = [...stateVisibleLinks];\n        if (checked) {\n            visibleLinks.push(inValue);\n        } else {\n            visibleLinks = visibleLinks.filter((v) => v !== inValue);\n        }\n        this.setState({ visibleLinks });\n    }\n    renderMapControls() {\n        const { visibleLinks } = this.state;\n        return <div className={style.controls}>\n            {\n                linkTypes.map(linkType => (\n                    <div key={linkType.title} className=\"form-check form-check-inline\">\n                        <input onChange={this.onLinkTypeFilterChange} className=\"form-check-input\" type=\"checkbox\" id={linkType.title} value={linkType.relationship} checked={visibleLinks.includes(linkType.relationship)} />\n                        <label className=\"form-check-label\" htmlFor={linkType.title}>{linkType.title}</label>\n                    </div>\n                ))\n            }\n            {\n                <div className=\"btn-group btn-group-sm\" role=\"group\">\n                    <Button<void> title=\"Refresh data\" className=\"btn btn-primary\" onClick={this.onRequestClick}><i\n                        className=\"fa fa-sync\" /></Button>\n                </div>\n            }\n        </div>\n    }\n    render() {\n        const { networkGraph } = this.props;\n        return (\n            <div className={style.container} ref={this.ref}>\n                {networkGraph.nodes.length ? <Fragment>{this.renderMapControls()} {this.renderMap()}</Fragment> : this.renderMessage()}\n            </div>\n        );\n    }\n}\n\n\nconst mappedProps = [\"networkGraph\", \"networkGraphIsLoading\"];\nconst ConnectedMap = connect<{}, MapState, GlobalState, {}>(mappedProps, actions)(MapComponent);\nexport default ConnectedMap;\n","import React, { Component, FunctionComponent,  Fragment } from \"react\";\nimport cx from \"classnames\";\n// import * as style from \"./style.css\";\n\n\nexport const ModalHeader: FunctionComponent<{}> = props => {\n    return <div className=\"modal-header\">{props.children}</div>;\n};\n\nexport const ModalBody: FunctionComponent<{}> = props => {\n    return <div className=\"modal-body\">{props.children}</div>;\n};\n\nexport const ModalFooter: FunctionComponent<{}> = props => {\n    return <div className=\"modal-footer\">{props.children}</div>;\n};\ninterface ModalProps {\n    isOpen?: boolean;\n}\ninterface ModalState {\n    modalShow: string;\n    display: string;\n}\n\nclass Modal extends Component<ModalProps, ModalState> {\n    constructor(props: ModalProps) {\n        super(props);\n        this.state = {\n            modalShow: '',\n            display: 'none'\n        };\n        this.openModal = this.openModal.bind(this);\n        this.closeModal = this.closeModal.bind(this);\n    }\n\n    openModal() {\n        this.setState({\n            modalShow: 'show',\n            display: 'block'\n        });\n    }\n\n    closeModal() {\n        this.setState({\n            modalShow: '',\n            display: 'none'\n        });\n    }\n\n    componentDidMount() {\n        this.props.isOpen ? this.openModal() : this.closeModal();\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.isOpen !== this.props.isOpen) {\n            this.props.isOpen ? this.openModal() : this.closeModal();\n        }\n    }\n\n    render() {\n        return (\n            <div\n                className={`modal fade ${ this.state.modalShow}`}\n\n                role=\"dialog\"\n                aria-hidden=\"true\"\n                style={{ display: this.state.display }}\n            >\n                <div className=\"modal-dialog\" role=\"document\">\n                    <div className=\"modal-content\">{this.props.children}</div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Modal;\n\n\n\n// interface Props {\n//     onOk(): void;\n//     onCancel(): void;\n// }\n// const Modal: FunctionComponent<Props> = (props: Props) => {\n//     const { onOk, onCancel } = props;\n//     return (\n//         <Fragment>\n\n//             <button type=\"button\" className=\"btn btn-primary\" data-toggle=\"modal\" data-target=\"#exampleModal\">\n//                 Launch demo modal\n// </button>\n//             <div className=\"modal fade\" id=\"exampleModal\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n//                 <div className=\"modal-dialog\">\n//                     <div className=\"modal-content\">\n//                         <div className=\"modal-header\">\n//                             <h5 className=\"modal-title\" id=\"exampleModalLabel\">Modal title</h5>\n//                             <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n//                                 <span aria-hidden=\"true\">&times;</span>\n//                             </button>\n//                         </div>\n//                         <div className=\"modal-body\">\n//                             ...\n//                         </div>\n//                         <div className=\"modal-footer\">\n//                             <button onClick={onOk} type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n//                             <button onClick={onCancel} type=\"button\" className=\"btn btn-primary\">Ok</button>\n//                         </div>\n//                     </div>\n//                 </div>\n//             </div>\n//         </Fragment>\n//     );\n// };\n\n// export default Modal;\n","import React, { ChangeEvent, Component } from \"react\";\nimport Button from \"../button\";\nimport { Device, DeviceState } from \"../../types\";\nimport { connect } from \"unistore/react\";\nimport actions, { OtaApi, DeviceApi } from \"../../actions\";\nimport cx from \"classnames\";\nimport Modal, { ModalHeader, ModalBody, ModalFooter } from \"../modal\";\nimport { GlobalState } from \"../../store\";\ninterface DeviceControlGroupProps {\n    device: Device;\n    state?: DeviceState;\n}\ninterface DeviceRenameParams {\n    friendlyName: string;\n    isHassRename: boolean;\n}\ninterface DeviceRemovalParams {\n    block: boolean;\n    force: boolean;\n}\n\n\ninterface DeviceControlGroupState {\n    isRenameModalOpened: boolean;\n    isDeviceRemovalModalOpened: boolean;\n    removeParams: DeviceRemovalParams;\n    renameParams: DeviceRenameParams;\n\n}\n\nexport class DeviceControlGroup extends Component<DeviceControlGroupProps & DeviceApi & OtaApi & GlobalState, DeviceControlGroupState> {\n    state = {\n        isRenameModalOpened: false,\n        isDeviceRemovalModalOpened: false,\n        renameParams: {\n            friendlyName: this.props.device.friendly_name,\n            isHassRename: false\n        },\n        removeParams: {\n            block: false,\n            force: false\n        }\n    }\n\n    onRenameClick = async (): Promise<void> => {\n        const { renameDevice, device } = this.props;\n        const { renameParams } = this.state;\n\n        await renameDevice(device.friendly_name, renameParams.friendlyName, renameParams.isHassRename);\n        this.setState({\n            isRenameModalOpened: false\n        });\n    };\n\n\n    onRemoveClick = (): void => {\n        const { removeDevice, device } = this.props;\n        const { removeParams } = this.state;\n        removeDevice(device.friendly_name, removeParams.force, removeParams.block);\n        this.setState({\n            isDeviceRemovalModalOpened: false\n        });\n    };\n\n    toggleRenameModal = (): void => {\n        const { isRenameModalOpened } = this.state;\n        this.setState({ isRenameModalOpened: !isRenameModalOpened });\n    }\n    toggleDeviceRemovalModal = (): void => {\n        const { isDeviceRemovalModalOpened } = this.state;\n        this.setState({ isDeviceRemovalModalOpened: !isDeviceRemovalModalOpened });\n    }\n\n    onHassEntityIdChange = (e: ChangeEvent<HTMLInputElement>): void => {\n        const { renameParams } = this.state;\n        const { checked } = e.target;\n        renameParams.isHassRename = checked;\n        this.setState({ renameParams });\n    }\n    onFriendlyNameChange = (e: ChangeEvent<HTMLInputElement>): void => {\n        const { renameParams } = this.state;\n        const { value } = e.target;\n        renameParams.friendlyName = value;\n        this.setState({ renameParams });\n    }\n\n    onDeviceRemovalParamChange = (e: ChangeEvent<HTMLInputElement>): void => {\n        const { removeParams } = this.state;\n        const { checked, name } = e.target;\n        removeParams[name] = checked;\n        this.setState({ removeParams });\n    }\n    renderRenameButton() {\n        const { bridgeInfo, device } = this.props;\n        const { isRenameModalOpened, renameParams } = this.state;\n        return (\n            <><Button<void> className=\"btn btn-secondary\" onClick={this.toggleRenameModal} title=\"Rename device\"><i className=\"fa fa-edit\" /></Button>\n                <Modal isOpen={isRenameModalOpened}>\n                    <ModalHeader>\n                        <h3>Rename device</h3>\n                        <button type=\"button\" className=\"close\" aria-label=\"Close\" onClick={this.toggleRenameModal}>\n                            <span aria-hidden=\"true\">&times;</span>\n                        </button>\n                    </ModalHeader>\n                    <ModalBody>\n                        <div className=\"mb-3\">\n                            <label htmlFor={`fn${device.ieee_address}`} className=\"form-label\">Friendly name</label>\n                            <input id={`fn${device.ieee_address}`} onChange={this.onFriendlyNameChange} type=\"text\" className=\"form-control\" value={renameParams.friendlyName} />\n                        </div>\n                        {bridgeInfo.config.homeassistant ? (\n                            <div className=\"form-check form-switch\">\n                                <input className=\"form-check-input\" checked={renameParams.isHassRename} type=\"checkbox\" id={`hass${device.ieee_address}`} onChange={this.onHassEntityIdChange} />\n                                <label className=\"form-check-label\" htmlFor={`hass${device.ieee_address}`}>Update Home Assistant entity ID</label>\n                            </div>\n                        ) : null}\n                    </ModalBody>\n                    <ModalFooter>\n                        <button type=\"button\" className=\"btn btn-secondary\" onClick={this.toggleRenameModal}>Close</button>\n                        <button type=\"button\" className=\"btn btn-primary\" onClick={this.onRenameClick}>Save changes</button>\n                    </ModalFooter>\n                </Modal></>\n        )\n    }\n    renderDeviceRemovalButton() {\n        const { device } = this.props;\n        const { isDeviceRemovalModalOpened, removeParams } = this.state;\n        return (\n            <><Modal isOpen={isDeviceRemovalModalOpened}>\n                <ModalHeader>\n                    <h3>Remove device</h3>\n                    <button type=\"button\" className=\"close\" aria-label=\"Close\" onClick={this.toggleDeviceRemovalModal}><span aria-hidden=\"true\">&times;</span></button>\n                </ModalHeader>\n                <ModalBody>\n                    <div className=\"form-check form-switch\">\n                        <input className=\"form-check-input\" name=\"force\" checked={removeParams.force} type=\"checkbox\" id={`force${device.ieee_address}`} onChange={this.onDeviceRemovalParamChange} />\n                        <label className=\"form-check-label\" htmlFor={`force${device.ieee_address}`}>Force remove</label>\n                    </div>\n                    <div className=\"form-check form-switch\">\n                        <input className=\"form-check-input\" name=\"block\" checked={removeParams.block} type=\"checkbox\" id={`block${device.ieee_address}`} onChange={this.onDeviceRemovalParamChange} />\n                        <label className=\"form-check-label\" htmlFor={`block${device.ieee_address}`}>Block from joining again</label>\n                    </div>\n                </ModalBody>\n                <ModalFooter>\n                    <button type=\"button\" className=\"btn btn-secondary\" onClick={this.toggleDeviceRemovalModal}>Close</button>\n                    <button type=\"button\" className=\"btn btn-danger\" onClick={this.onRemoveClick}>Delete</button>\n                </ModalFooter>\n            </Modal>\n                <button onClick={this.toggleDeviceRemovalModal} className=\"btn btn-danger\" title=\"Remove device\"><i className={cx(\"fa\", \"fa-trash\")} /></button></>\n        )\n    }\n    render() {\n        const { device, configureDevice, checkOTA, updateOTA, state } = this.props;\n        return (\n            <div className=\"btn-group btn-group-sm\" role=\"group\">\n                {this.renderRenameButton()}\n                <Button<string> className=\"btn btn-secondary\" onClick={configureDevice} item={device.friendly_name} title=\"Reconfigure\" promt><i className={cx(\"fa\", \"fa-cogs\")} /></Button>\n                {\n                    state?.update?.state === \"available\" ?\n                        <Button<string> className=\"btn btn-secondary\" onClick={updateOTA} item={device.friendly_name} title=\"Update OTA\" promt><i className={cx(\"fa\", \"fa-cloud-download-alt\")} /></Button>\n                        : <Button<string> className=\"btn btn-secondary\" onClick={checkOTA} item={device.friendly_name} title=\"Check OTA\"><i className={cx(\"fa\", \"fa-cloud\")} /></Button>\n                }\n                {this.renderDeviceRemovalButton()}\n\n\n            </div>\n        );\n    }\n}\n\nconst mappedProps = [\"bridgeInfo\"];\nconst ConnectedDeviceControlGroup = connect<DeviceControlGroupProps, {}, GlobalState, DeviceApi & OtaApi>(mappedProps, actions)(DeviceControlGroup);\nexport default ConnectedDeviceControlGroup;\n\n","// extracted by mini-css-extract-plugin\nexport default {\"device-pic\":\"_2UWt6cv5iKbBWQ1njU-Knh\"};","// extracted by mini-css-extract-plugin\nexport default {\"plug\":\"_2Qj8QVth6tVVFe6VESug0N\",\"blinking\":\"t22iUK3r3w1jlcSwxWXN9\",\"blinker\":\"_3SpBv5_CMt6ERjs-mp41bf\"};","import  React, { FunctionComponent} from \"react\";\nimport { PowerSource as PowerSourceType } from \"../../types\";\nimport style from \"./style.css\";\n\n\ninterface PowerSourceProps {\n    source: PowerSourceType;\n    battery?: number;\n}\n\n\nconst PowerSource: FunctionComponent<PowerSourceProps> = ({ source, battery, ...rest }) => {\n    let batteryClass = \"\";\n\n    switch (source) {\n        case \"Battery\":\n            if (battery >= 85) {\n                batteryClass = \"fa-battery-full\";\n            } else if (battery >= 75) {\n                batteryClass = \"fa-battery-three-quarters\";\n            } else if (battery >= 50) {\n                batteryClass = \"fa-battery-half\";\n            } else if (battery >= 25) {\n                batteryClass = \"fa-battery-quarter\";\n            } else if (battery >= 10) {\n                batteryClass = `fa-battery-empty ${style.blinking}`\n            } else {\n                return <span className={`${style.blinking} text-danger`} role=\"alert\">{battery}%</span>\n            }\n            return <i className={`fa ${batteryClass}`}\n                title={`${source} ${battery ? `, power level ${battery}%` : \"\"} `} {...rest} />;\n\n        case \"Mains (single phase)\":\n        case \"DC Source\":\n            return <i className={`fa fa-plug ${style.plug}`} title={source} {...rest} />;\n        default:\n            return <i className={`fa fa-question`} title={source} {...rest} />;\n    }\n};\n\nexport default PowerSource;\n","import React, { Fragment } from \"react\";\nimport { Device } from \"../../types\";\ntype VendorProps = {\n  device: Device;\n}\n\n\nexport const VendorLink: React.FunctionComponent<VendorProps> = (props: VendorProps) => {\n  const { device } = props;\n  if (device.supported) {\n    const url = `https://www.zigbee2mqtt.io/information/supported_devices.html#${encodeURIComponent(device.definition?.vendor?.toLowerCase())}`;\n    return <a target=\"_blank\" rel=\"noopener noreferrer\" href={url}>{device.definition?.vendor}</a>\n  }\n  return <Fragment>Unsupported</Fragment>;\n}\n\n\nexport const ModelLink: React.FunctionComponent<VendorProps> = (props: VendorProps) => {\n  const { device } = props;\n  let url = 'https://www.zigbee2mqtt.io/how_tos/how_to_support_new_devices.html#how-to-support-new-devices';\n  let title = 'Unsupported';\n  if (device.supported) {\n    const acnchor = [\n      encodeURIComponent(device.definition?.vendor?.toLowerCase()),\n      encodeURIComponent(device.definition?.model?.toLowerCase()),\n    ].join('-');\n    url = `https://www.zigbee2mqtt.io/devices/${encodeURIComponent(device.definition?.model)}.html#${acnchor}`;\n    title = device.definition?.model;\n  }\n  return <a target=\"_blank\" rel=\"noopener noreferrer\" href={url}>{title}</a>\n}\n","/* eslint-disable react/display-name */\nimport React, { Component, Fragment } from \"react\";\nimport { Device, DeviceState } from \"../../types\";\nimport { toHex, toHHMMSS } from \"../../utils\";\nimport DeviceControlGroup from \"../device-control\";\nimport cx from \"classnames\";\nimport style from \"./style.css\";\nimport { connect } from \"unistore/react\";\nimport { GlobalState } from \"../../store\";\nimport PowerSourceComp from \"../power-source\";\nimport get from 'lodash/get';\nimport DeviceImage from \"../device-image\";\nimport { ModelLink, VendorLink } from \"../vendor-links/verndor-links\";\n\n\ntype DeviceInfoProps = {\n    device: Device;\n}\ninterface PropsFromStore {\n    deviceStates: Map<string, DeviceState>;\n}\n\nconst displayProps = [\n    {\n        key: 'definition.description',\n        label: 'Description',\n        if: 'supported'\n    },\n    {\n        render: (device: Device) => <dd className=\"col-7\" ><p className={cx('mb-0', 'font-weight-bold', { 'text-danger': !device.supported, 'text-success': device.supported })}>{device.supported ? 'Supported' : 'Unsupported'}</p></dd>,\n        label: 'Support status'\n    },\n    {\n        render: (device: Device) => <dd className=\"col-7\">{device.definition.supports}</dd>,\n        label: 'Supports',\n        if: 'definition.supports'\n    },\n    {\n        key: 'ieee_address',\n        label: 'IEEE address'\n    },\n    {\n        key: 'network_address',\n        label: 'Network address',\n        render: (device: Device) => <dd className=\"col-7\">{toHex(device.network_address)}</dd>,\n    },\n    {\n        key: 'date_code',\n        label: 'Firmware build date',\n        if: 'date_code'\n    },\n    {\n        key: 'software_build_id',\n        label: 'Firmware version',\n        if: 'software_build_id'\n    },\n\n    {\n        key: 'definition.vendor',\n        label: 'Vendor',\n        if: 'supported',\n        render: (device: Device) => <dd className=\"col-7\"><VendorLink device={device} /></dd>\n    },\n    {\n        key: 'definition.model',\n        label: 'Model',\n        if: 'supported',\n        render: (device: Device) => <dd className=\"col-7\"><ModelLink device={device} /></dd>\n    },\n\n    {\n        label: 'Power source',\n        render: (device: Device) => <dd className=\"col-7\"><PowerSourceComp source={device.power_source} /></dd>\n    },\n    {\n        label: 'Interview completed',\n        render: (device: Device) => <dd className=\"col-7\">{device.interview_completed ? 'Yes' : 'No'}</dd>\n    }\n];\n// eslint-disable-next-line react/prefer-stateless-function\nexport class DeviceInfo extends Component<DeviceInfoProps & PropsFromStore, {}> {\n    render() {\n        const { device, deviceStates } = this.props;\n        const deviceStatus: DeviceState = deviceStates.get(device.friendly_name);\n\n        return (\n            <div className=\"card\">\n                <div className=\"d-flex justify-content-center\">\n                    <DeviceImage className={`card-img-top w-auto ${style[\"device-pic\"]}`} device={device} deviceStatus={deviceStatus} />\n                </div>\n\n                <div className=\"card-body\">\n                    <h5 className=\"card-title\">{device.type}</h5>\n\n                    <dl className=\"row\">\n                        {\n                            displayProps.filter(prop => get(device, prop.if, false)).map(prop => (\n                                <Fragment key={prop.label}>\n                                    <dt className=\"col-5\">{prop.label}</dt>\n                                    {prop.render ?\n                                        prop.render(device) : <dd className=\"col-7\">{get(device, prop.key)}</dd>}\n\n                                </Fragment>\n                            ))\n                        }\n                        {\n                            deviceStatus?.update?.state === \"updating\" ? (\n                                <Fragment>\n                                    <dt className=\"col-5\">Updating firmware</dt>\n                                    <dd className=\"col-7\">\n                                        <div className=\"progress\">\n                                            <div className=\"progress-bar progress-bar-striped progress-bar-animated\" style={{ width: `${deviceStatus.update.progress}%` }}>\n                                                {deviceStatus.update.progress}%\n                                        </div>\n                                        </div>\n                                        <div>Remaining time {toHHMMSS(deviceStatus.update.remaining)}</div>\n                                    </dd>\n                                </Fragment>\n                            ) : null\n                        }\n                    </dl>\n                </div>\n                <div className=\"card-footer\">\n                    <DeviceControlGroup device={device} state={deviceStatus} />\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mappedProps = [\"deviceStates\"];\n\nconst ConnectedDeviceInfoPage = connect<DeviceInfoProps, {}, GlobalState, PropsFromStore>(mappedProps)(DeviceInfo);\nexport default ConnectedDeviceInfoPage;","import React, { ChangeEvent, Component, SelectHTMLAttributes } from \"react\";\nimport { Device, ObjectType } from \"../../types\";\nimport { getDeviceDisplayName } from \"../../utils\";\nimport { Group } from \"../../store\";\nconst DELIMITER = '|';\ninterface DevicePickerProps {\n    type: ObjectType;\n    value: string | number;\n    devices: Map<string, Device>;\n    groups?: Group[];\n    onChange(device: Device | Group, type: ObjectType): void;\n}\nexport default class DevicePicker extends Component<DevicePickerProps & Omit<SelectHTMLAttributes<HTMLSelectElement>, 'onChange'>, {}> {\n    onSelect = (e: ChangeEvent<HTMLSelectElement>): void => {\n        const { onChange, devices, groups = [] } = this.props;\n        const { value } = e.target as HTMLSelectElement;\n\n        if (devices.has(value)) {\n            onChange(devices.get(value), \"device\");\n        } else {\n            const group = groups.find(g => parseInt(value, 10) === g.id);\n            onChange(group, \"group\");\n        }\n    }\n    render() {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { devices, groups, value, type, onChange, ...rest } = this.props;\n        let options = [<option key=\"hidden\" hidden>Select device</option>];\n\n        const devicesOptions = [];\n        devices.forEach((device) => {\n            devicesOptions.push(<option\n                title={device.definition?.description}\n                key={device.ieee_address}\n                value={device.ieee_address}\n            >{getDeviceDisplayName(device)}</option>);\n        });\n        if (groups && groups.length) {\n            const groupOptions = groups.map(group => <option\n                key={group.friendly_name}\n                value={group.id}>{group.friendly_name}\n            </option>);\n            options.push(<optgroup key=\"Groups\" label=\"Groups\">{groupOptions}</optgroup>);\n            options.push(<optgroup key=\"Devices\" label=\"Devices\">{devicesOptions}</optgroup>);\n        } else {\n            options = options.concat(devicesOptions);\n        }\n        return <select\n            value={value}\n            onChange={this.onSelect}\n            className=\"form-control\"\n            {...rest}\n        >{options}\n\n        </select>;\n\n    }\n}","import React, { ChangeEvent, Component, SelectHTMLAttributes } from \"react\";\nimport { Endpoint } from \"../../types\";\n\n\n\ninterface EndpointPickerProps {\n    onChange(endpoint: Endpoint): void;\n    value: Endpoint;\n    values: Endpoint[];\n}\n\nexport default class EndpointPicker extends Component<EndpointPickerProps & Omit<SelectHTMLAttributes<HTMLSelectElement>, 'onChange'>, {}> {\n    onSelect = (e: ChangeEvent<HTMLSelectElement>): void => {\n        const { onChange } = this.props;\n        const { value } = e.target as HTMLSelectElement;\n        onChange(value);\n    }\n    render() {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { onSelect, value, values, disabled, onChange, ...rest } = this.props;\n        const hasOnlyOneEP = values.length == 1;\n\n        const options = values.map(ep => <option key={ep} value={ep}>{ep}</option>)\n        options.unshift(<option key=\"hidded\" hidden>Select endpoint</option>);\n        return <select disabled={value && hasOnlyOneEP || disabled}\n            value={value}\n            className=\"form-control\"\n            title={hasOnlyOneEP ? 'The only endpoint' : null}\n            onChange={this.onSelect}\n            {...rest}>\n            {options}\n        </select>;\n\n    }\n}","import React, { ChangeEvent, Component, InputHTMLAttributes } from \"react\";\nimport { Cluster } from \"../../types\";\nimport { randomString } from \"../../utils\";\n\n\n\nconst clusterDescriptions = {\n    genScenes: \"Scenes\",\n    genOnOff: \"OnOff\",\n    genLevelCtrl: \"LevelCtrl\",\n    lightingColorCtrl: \"LColorCtrl\",\n    closuresWindowCovering: \"Closures\",\n}\ninterface ClusterPickerProps {\n    value: Cluster[];\n    onChange(arg1: Cluster[] | undefined): void;\n    clusters: Cluster[];\n\n}\ninterface ClusterPickerState {\n    pickerId: string;\n}\n\n// eslint-disable-next-line react/prefer-stateless-function\nexport default class ClusterPicker extends Component<ClusterPickerProps & Omit<InputHTMLAttributes<HTMLInputElement>, 'onChange'>, ClusterPickerState> {\n    public static defaultProps = {\n        clusters: []\n    };\n    state: Readonly<ClusterPickerState> = {\n        pickerId: randomString(5)\n    }\n\n    onChange = (e: ChangeEvent<HTMLInputElement>): void => {\n        const { onChange } = this.props;\n        let { value } = this.props;\n        const { checked: isChecked, name } = e.target;\n        if (isChecked) {\n            value.push(name);\n        } else {\n            value = value.filter(v => v !== name);\n        }\n\n        onChange(value);\n    }\n    render() {\n        const { pickerId } = this.state;\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { clusters, value, onChange, ...rest } = this.props;\n\n        const options = clusters.map(cluster => (\n            <div key={cluster} className=\"form-check form-check-inline\">\n                <input className=\"form-check-input\"\n                    type=\"checkbox\"\n                    checked={value.includes(cluster)}\n                    name={cluster}\n                    id={`${pickerId}_${cluster}`}\n                    value={cluster}\n                    onChange={this.onChange}\n                    {...rest}\n                />\n                <label className=\"form-check-label\" htmlFor={`${pickerId}_${cluster}`} title={cluster}>{clusterDescriptions[cluster] ?? cluster}</label>\n            </div>\n        ));\n        return options;\n    }\n}","import React, { Component } from \"react\";\nimport { Device, Endpoint, Cluster, ObjectType } from \"../../types\";\nimport DevicePicker from \"../device-picker\";\nimport EndpointPicker from \"../endpoint-picker\";\nimport ClusterPicker from \"../cluster-picker\";\nimport Button from \"../button\";\nimport { Group } from \"../../store\";\nimport { NiceBindingRule } from \"./bind\";\n\n\n\n\ninterface BindRowProps {\n    rule: NiceBindingRule;\n    idx: number;\n    devices: Map<string, Device>;\n    groups: Group[];\n    device: Device;\n    onBind(from: string, to: string, clusters: Cluster[]): void;\n    onUnBind(from: string, to: string, clusters: Cluster[]): void;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\ninterface BindRowState {\n    stateRule: NiceBindingRule;\n}\n\nexport const getEndpoints = (obj: Device | Group): Endpoint[] => {\n    if (!obj) {\n        return []\n    } else if ((obj as Device).endpoints) {\n        return Array.from((obj as Device).endpoints.keys());\n    } else if ((obj as Group).members) {\n        return (obj as Group).members.map(g => g.endpoint);\n    }\n    return [];\n}\nconst getTarget = (rule: NiceBindingRule, devices: Map<string, Device>, groups: Group[]) => {\n    if (rule.target.type === \"group\") {\n        return groups.find(g => g.id === rule.target.id);\n    }\n    return devices.get(rule.target.ieee_address);\n}\n\nexport default class BindRow extends Component<BindRowProps, BindRowState> {\n    state: Readonly<BindRowState> = {\n        stateRule: null\n    }\n    static getDerivedStateFromProps(props: Readonly<BindRowProps>, state: BindRowState): Partial<BindRowState> {\n        const { rule } = props;\n        return {\n            stateRule: rule\n        };\n    }\n    setSourceEp = (sourceEp: Endpoint): void => {\n        const { stateRule } = this.state;\n        stateRule.source.endpoint = sourceEp;\n        this.setState({ stateRule });\n    }\n\n    setDestination = (destination: Device | Group, type: ObjectType): void => {\n        const { stateRule } = this.state;\n        if (type === \"device\") {\n            const endpoints = getEndpoints(destination);\n\n            stateRule.target['ieee_address'] = (destination as Device)['ieee_address'];\n            stateRule.target.type = \"endpoint\";\n            stateRule.target.endpoint = endpoints[0];\n            delete stateRule.target.id;\n        } else if (type === \"group\") {\n            stateRule.target.id = (destination as Group).id;\n            stateRule.target.type = \"group\";\n            delete stateRule.target.ieee_address;\n        }\n        stateRule.clusters = [];\n\n        this.setState({ stateRule });\n    }\n\n    setDestinationEp = (destinationEp: Endpoint): void => {\n\n        const { stateRule } = this.state;\n        stateRule.target.endpoint = destinationEp;\n        stateRule.clusters = [];\n        this.setState({ stateRule });\n    }\n\n    setClusters = (clusters: Cluster[]): void => {\n        const { stateRule } = this.state;\n        stateRule.clusters = clusters;\n        this.setState({ stateRule });\n    }\n\n    getBidningParams(): { from: string; to: string; clusters: string[] } {\n        const { device, groups, devices } = this.props;\n        const { stateRule } = this.state;\n        const from = `${device.friendly_name}/${stateRule.source.endpoint}`;\n        let to: string;\n        if (stateRule.target.type === \"group\") {\n            const targetGroup = groups.find(group => group.id === stateRule.target.id);\n            to = `${targetGroup.friendly_name}`;\n        } else if (stateRule.target.type === \"endpoint\") {\n            const targeDevice = devices.get(stateRule.target.ieee_address);\n            if (targeDevice.type === \"Coordinator\") {\n                to = `${targeDevice.friendly_name}`;\n            } else {\n                to = `${targeDevice.friendly_name}/${stateRule.target.endpoint}`;\n            }\n        }\n        return { from, to, clusters: stateRule.clusters };\n    }\n\n    onBindClick = (): void => {\n        const { onBind } = this.props;\n        const { from, to, clusters } = this.getBidningParams();\n        onBind(from, to, clusters);\n    }\n\n    onUnBindClick = (): void => {\n        const { onUnBind } = this.props;\n        const { from, to, clusters } = this.getBidningParams();\n        onUnBind(from, to, clusters);\n\n    }\n\n    isValidRule(): boolean {\n        const { stateRule } = this.state;\n        let valid = false;\n        if (stateRule.target.type == \"endpoint\") {\n            valid = stateRule.source.endpoint\n                && stateRule.target.ieee_address\n                && stateRule.target.endpoint\n                && stateRule.clusters.length > 0;\n        } else if (stateRule.target.type == \"group\") {\n            valid = stateRule.source.endpoint\n                && stateRule.target.id\n                && stateRule.clusters.length > 0;\n        }\n        return valid;\n    }\n\n    render() {\n        const { devices, groups, idx, device } = this.props;\n        const { stateRule } = this.state;\n\n        const targetType: ObjectType = stateRule.target.type === \"endpoint\" ? \"device\" : \"group\";\n\n        const sourceEndpoints = getEndpoints(device);\n        const target = getTarget(stateRule, devices, groups);\n        const destinationEndpoints = getEndpoints(target);\n\n        const possibleClusters: Set<Cluster> = new Set(stateRule.clusters);\n        if (device.endpoints.has(stateRule.source.endpoint)) {\n            device.endpoints.get(stateRule.source.endpoint).clusters.output.forEach(cluster => possibleClusters.add(cluster));\n        }\n        return (\n            <tr>\n                <th scope=\"row\">{idx + 1}</th>\n                <td><EndpointPicker disabled={!stateRule.isNew} values={sourceEndpoints} value={stateRule.source.endpoint} onChange={this.setSourceEp} /></td>\n                <td><DevicePicker disabled={!stateRule.isNew} type={targetType} value={stateRule.target.ieee_address || stateRule.target.id} devices={devices} groups={groups} onChange={this.setDestination} /></td>\n                <td>{stateRule.target.type === \"endpoint\" ? <EndpointPicker disabled={!stateRule.isNew} values={destinationEndpoints} value={stateRule.target.endpoint} onChange={this.setDestinationEp} /> : null}</td>\n                <td><ClusterPicker clusters={Array.from(possibleClusters)} value={stateRule.clusters} onChange={this.setClusters} /></td>\n                <td>\n                    <div className=\"btn-group btn-group-sm\">\n                        <Button<void> disabled={!this.isValidRule()} title=\"Bind\" className=\"btn btn-primary\" onClick={this.onBindClick}><i\n                            className=\"fa fa-heart\" /></Button>\n                        <Button<void> disabled={!stateRule.isNew && !this.isValidRule()} title=\"Unbind\" className=\"btn btn-secondary\" onClick={this.onUnBindClick}><i\n                            className=\"fa fa-heart-broken\" /></Button>\n                    </div>\n                </td>\n            </tr>\n        );\n    }\n}","import React, { Component } from \"react\";\nimport { Device, Cluster, Endpoint } from \"../../types\";\nimport BindRow, { getEndpoints } from \"./bind-row\";\nimport actions, { BindApi } from \"../../actions\";\nimport { connect } from \"unistore/react\";\nimport { GlobalState, Group } from \"../../store\";\n\n\ninterface PropsFromStore {\n    devices: Map<string, Device>;\n    groups: Group[];\n}\ninterface BindProps {\n    device: Device;\n}\n\nexport interface NiceBindingRule {\n    id?: number;\n    isNew?: number;\n    source: {\n        ieee_address: string;\n        endpoint: Endpoint;\n    };\n    target: {\n        id?: number;\n        endpoint?: Endpoint;\n        ieee_address?: string;\n        type: \"endpoint\" | \"group\";\n    };\n    clusters: Cluster[];\n}\nconst rule2key = (rule: NiceBindingRule): string => `${rule.isNew}${rule.source.ieee_address}-${rule.target.id}-${rule.target.ieee_address}-${rule.clusters.join('-')}`;\nconst convertBidningsIntoNiceStructure = (device: Device): NiceBindingRule[] => {\n    const bindings = {};\n    device.endpoints.forEach((description, endpoint) => {\n        description.bindings\n            .forEach(b => {\n                const targetId = b.target.id ?? b.target.ieee_address;\n                if (bindings[targetId]) {\n                    bindings[targetId].clusters.push(b.cluster);\n                } else {\n                    bindings[targetId] = {\n                        source: {\n                            // eslint-disable-next-line @typescript-eslint/camelcase\n                            ieee_address: device.ieee_address,\n                            endpoint\n                        },\n                        target: b.target,\n                        clusters: [b.cluster]\n                    }\n                }\n            });\n    });\n    return Object.values(bindings);\n}\ntype BindState = {\n    bidingRules: NiceBindingRule[];\n}\nexport class Bind extends Component<BindProps & PropsFromStore & BindApi, BindState> {\n    state: BindState = {\n        bidingRules: []\n    }\n    onBindClick = (from: string, to: string, clusters: Cluster[]): void => {\n        const { addBind } = this.props;\n        addBind(from, to, clusters);\n    };\n    onUnBindClick = (from: string, to: string, clusters: Cluster[]): void => {\n        const { removeBind } = this.props;\n        removeBind(from, to, clusters);\n    };\n    static getDerivedStateFromProps(props: Readonly<BindProps & PropsFromStore>, state: BindState): Partial<BindState> {\n        const { device } = props;\n        const endpoints = getEndpoints(device);\n        const bidingRules = convertBidningsIntoNiceStructure(device);\n\n        bidingRules.push({ isNew: Date.now(), target: {}, source: {'ieee_address': device.ieee_address, endpoint: endpoints[0]}, clusters: [] } as NiceBindingRule);\n        return {\n            bidingRules\n        };\n    }\n    render() {\n        const { device, devices, groups } = this.props;\n        const { bidingRules } = this.state;\n        return (\n            <div className=\"card table-responsive\">\n                <table className=\"table\">\n                    <thead>\n                        <tr>\n                            <th scope=\"col\">#</th>\n                            <th scope=\"col\">Source EP</th>\n                            <th scope=\"col\">Destination</th>\n                            <th scope=\"col\">Destination EP</th>\n                            <th scope=\"col\">Clusters</th>\n                            <th scope=\"col\">Actions</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {\n                            bidingRules.map((rule, idx) => <BindRow\n                                key={rule2key(rule)}\n                                rule={rule}\n                                groups={groups}\n                                onUnBind={this.onUnBindClick}\n                                onBind={this.onBindClick}\n                                device={device}\n                                idx={idx}\n                                devices={devices} />)\n                        }\n                    </tbody>\n\n                </table>\n            </div>\n        );\n    }\n}\n\nconst mappedProps = [\"devices\", \"groups\"];\nconst ConnectedBindPage = connect<BindProps, {}, GlobalState, PropsFromStore & BindApi>(mappedProps, actions)(Bind);\nexport default ConnectedBindPage","import React, { Component } from \"react\";\nimport { Device, DeviceState } from \"../../types\";\nimport actions, { StateApi } from \"../../actions\";\nimport { connect } from \"unistore/react\";\nimport { GlobalState } from \"../../store\";\n\ninterface PropsFromStore {\n    deviceStates: Map<string, DeviceState>;\n\n}\ninterface StatesProps {\n    device: Device;\n}\n\nclass States extends Component<StatesProps & PropsFromStore & StateApi, {}> {\n    setStateValue = (name: string, value: unknown): void => {\n        const { setStateValue, device } = this.props;\n        setStateValue(device.friendly_name, name, value);\n    };\n\n    render() {\n        const { device, deviceStates } = this.props;\n        const deviceState = deviceStates.get(device.friendly_name) ?? {};\n        return (\n            <div className=\"card\">\n                <pre>{JSON.stringify(deviceState, null, 4)}</pre>\n            </div>\n        );\n    }\n}\n\nconst mappedProps = [\"deviceStates\"];\nconst ConnectedDeviceStates = connect<StatesProps, {}, GlobalState, StateApi>(mappedProps, actions)(States);\nexport default ConnectedDeviceStates;\n","\nimport { GenericExposedFeature, BinaryFeature, NumericFeature, EnumFeature, LightFeature, CompositeFeature, SwitchFeature, CoverFeature, LockFeature, ColorFeature, TextualFeature } from \"../../types\";\n\nexport function isBinaryFeature(feature: GenericExposedFeature | CompositeFeature): feature is BinaryFeature {\n  return feature.type === \"binary\";\n}\n\nexport function isNumericFeature(feature: GenericExposedFeature | CompositeFeature): feature is NumericFeature {\n  return feature.type === \"numeric\";\n}\nexport function isTextualFeature(feature: GenericExposedFeature | CompositeFeature): feature is TextualFeature {\n  return feature.type === \"text\";\n}\n\nexport function isEnumFeature(feature: GenericExposedFeature | CompositeFeature): feature is EnumFeature {\n  return feature.type === \"enum\";\n}\n\nexport function isLightFeature(feature: GenericExposedFeature | CompositeFeature): feature is LightFeature {\n  return feature.type === \"light\";\n}\nexport function isSwitchFeature(feature: GenericExposedFeature | CompositeFeature): feature is SwitchFeature {\n  return feature.type === \"switch\";\n}\n\nexport function isCoverFeature(feature: GenericExposedFeature | CompositeFeature): feature is CoverFeature {\n  return feature.type === \"cover\";\n}\n\nexport function isLockFeature(feature: GenericExposedFeature | CompositeFeature): feature is LockFeature {\n  return feature.type === \"lock\";\n}\n\nexport function isCompositeFeature(feature: GenericExposedFeature | CompositeFeature): feature is CompositeFeature {\n  return feature.type === \"composite\";\n}\n\nexport function isColorFeature(feature: GenericExposedFeature | CompositeFeature): feature is ColorFeature {\n  return isCompositeFeature(feature) && (feature.name == \"color_xy\" || feature.name == \"color_hs\");\n}","import React, { FunctionComponent } from \"react\";\nimport Button from \"../button\";\nimport cx from \"classnames\";\ntype Primitive = number | string;\n\nexport type ValueWithLabelOrPrimitive = {\n  value: number;\n  title: string;\n} | Primitive;\n\ntype EnumProps = {\n  value?: ValueWithLabelOrPrimitive;\n  onChange(value: unknown): void;\n  values: ValueWithLabelOrPrimitive[];\n}\n\n\nfunction isPrimitive(step: ValueWithLabelOrPrimitive): step is Primitive {\n  return [\"number\", \"string\"].includes(typeof step);\n}\n\nconst EnumEditor: FunctionComponent<EnumProps> = (props) => {\n  const { onChange, values, value } = props;\n  return <div className=\"btn-group mr-2\">\n    {\n      values.map(v => <Button<ValueWithLabelOrPrimitive>\n        className={cx(\"btn btn-outline-secondary\", { active: isPrimitive(v) ? v === value : v.value == (isPrimitive(value) ? value : value?.value) })}\n        onClick={item => onChange(item)}\n        key={isPrimitive(v) ? v : v.title}\n        item={isPrimitive(v) ? v : v.value}\n      >{isPrimitive(v) ? v : v.title}</Button>)\n    }\n  </div>;\n}\nexport default EnumEditor;","import React, { Fragment, FunctionComponent, InputHTMLAttributes, useEffect, useState } from \"react\";\nimport { randomString } from \"../../utils\";\nimport cx from \"classnames\";\nimport EnumEditor, { ValueWithLabelOrPrimitive } from \"../enum-editor/enum-editor\";\n\n\n\ntype RangeProps = {\n  value: number;\n  unit?: string;\n  onChange(value: object | number): void;\n  steps?: ValueWithLabelOrPrimitive[];\n}\n\nconst RangeEditor: FunctionComponent<RangeProps & Omit<InputHTMLAttributes<HTMLInputElement>, 'onChange'>> = (props) => {\n  const { onChange, value, min, max, unit, steps, ...rest } = props;\n  const [id, setId] = useState<string>(randomString(5));\n  const [currentValue, setCurrentValue] = useState<number>(value)\n\n  useEffect(() => {\n    setCurrentValue(value)\n  }, [value]);\n\n  const showRange = min !== undefined && max !== undefined;\n  return <div className=\"input-group\">\n    {steps ? <EnumEditor values={steps} onChange={onChange} /> : null}\n    {showRange ? <input\n      id={id}\n      min={min}\n      max={max}\n      type=\"range\"\n      className=\"form-range form-control border-0\"\n      value={currentValue}\n      onChange={e => setCurrentValue(e.target.valueAsNumber)}\n      onMouseUp={(() => onChange(currentValue))}\n      {...rest}\n    /> : null}\n    <input\n      type=\"number\"\n      className={cx(\"form-control\", {'ml-1': showRange})}\n      value={currentValue}\n      onChange={e => setCurrentValue(e.target.valueAsNumber)}\n      onBlur={() => onChange(currentValue)}\n      {...rest}\n      style={showRange ? { 'maxWidth': '100px' } : null}\n    />\n    {unit ? <span className=\"input-group-text\" style={{ 'minWidth': '66px' }}>{unit}</span> : null}\n  </div>\n}\n\nexport default RangeEditor;\n","import React, { Component, Fragment } from \"react\";\nimport { FeatureAccessMode, NumericFeature } from \"../../../types\";\nimport { ValueWithLabelOrPrimitive } from \"../../enum-editor/enum-editor\";\nimport RangeEditor from \"../../range-editor/range-editor\";\nimport { BaseFeatureProps } from \"../base\";\n\ninterface NumericProps extends BaseFeatureProps<NumericFeature> {\n  steps?: ValueWithLabelOrPrimitive[];\n}\nexport default class Numeric extends Component<NumericProps> {\n\n  renderEditor() {\n    const { feature: { endpoint, name, property, unit, value_max: valueMax, value_min: valueMin }, deviceState, steps, onChange } = this.props;\n    return <RangeEditor\n      onChange={(value) => onChange(endpoint, { [name]: value })}\n      value={deviceState[property] as number ?? 0}\n      min={valueMin}\n      max={valueMax}\n      steps={steps}\n      unit={unit}\n    />\n  }\n  renderView() {\n    const { feature: { property, unit }, deviceState } = this.props;\n    return <Fragment><strong>{deviceState[property] ?? \"N/A\"}</strong> {unit ? <small className=\"text-muted ml-1\">{unit}</small> : null}</Fragment>\n  }\n  render() {\n    const { feature: { access } } = this.props;\n    if (access & FeatureAccessMode.ACCESS_WRITE) {\n      return this.renderEditor();\n    } else if (access & FeatureAccessMode.ACCESS_STATE) {\n      return this.renderView();\n    } else {\n      return null;\n    }\n  }\n}","import React, { ChangeEvent, Fragment, FunctionComponent, useState } from \"react\";\nimport { randomString } from \"../../utils\";\nimport Button from \"../button\";\n\ntype ToggleProps = {\n  onChange(value: unknown): void;\n\n  value: unknown;\n  valueOn: unknown;\n  valueOff: unknown;\n  label?: string;\n}\n\n\nconst Toggle: FunctionComponent<ToggleProps> = (props) => {\n  const { onChange, value, label, valueOn, valueOff } = props;\n  const [id, setId] = useState<string>(randomString(5));\n  const onCheckboxChange = (e: ChangeEvent<HTMLInputElement>) => onChange(e.target.checked ? valueOn : valueOff);\n  const valueExists = value !== undefined && value !== null;\n  return (\n    <Fragment>\n      <Button<unknown> className=\"btn btn-link pl-0\" item={valueOff} onClick={(item) => onChange(item)}>{valueOff}</Button>\n      {valueExists ? (\n        <div className=\"form-check form-switch d-inline-block\">\n        <input className=\"form-check-input\" type=\"checkbox\" id={id} checked={value === valueOn} onChange={onCheckboxChange} />\n        {label ? <label className=\"form-check-label\" htmlFor={id}>{label}</label> : null}\n      </div>\n      ): <i className=\"fa fa-question\" title=\"Current value unknown\"></i> }\n      <Button<unknown> className=\"btn btn-link\" item={valueOn} onClick={(item) => onChange(item)}>{valueOn}</Button>\n    </Fragment>\n  )\n}\n\nexport default Toggle;\n","import React, { Component } from \"react\";\n\nimport { BinaryFeature, FeatureAccessMode } from \"../../../types\";\nimport Toggle from \"../../toggle\";\n\nimport { BaseFeatureProps } from \"../base\";\n\ntype BinaryProps = BaseFeatureProps<BinaryFeature>\nexport default class Binary extends Component<BinaryProps> {\n\n  renderEditor() {\n    const { feature: { endpoint, name, property, value_off: valueOff, value_on: valueOn }, deviceState, onChange } = this.props;\n    return <Toggle\n      onChange={(value) => onChange(endpoint, { [name]: value })}\n      value={deviceState[property]}\n      valueOn={valueOn}\n      valueOff={valueOff}\n    />\n  }\n  renderView() {\n    const { feature: { property }, deviceState } = this.props;\n    return <strong>{deviceState[property] ? 'TRUE' : 'FALSE'}</strong>\n  }\n  render() {\n    const { feature: { access } } = this.props;\n    if (access & FeatureAccessMode.ACCESS_WRITE) {\n      return this.renderEditor();\n    } else if (access & FeatureAccessMode.ACCESS_STATE) {\n      return this.renderView();\n    } else {\n      return null;\n    }\n  }\n}","\nimport React, { Component } from \"react\";\n\nimport { EnumFeature, FeatureAccessMode } from \"../../../types\";\nimport EnumEditor, { ValueWithLabelOrPrimitive } from \"../../enum-editor/enum-editor\";\n\nimport { BaseFeatureProps } from \"../base\";\n\ntype EnumProps = BaseFeatureProps<EnumFeature>\nexport default class Enum extends Component<EnumProps> {\n\n  renderView() {\n    const { feature: { property }, deviceState } = this.props;\n    const value = deviceState[property] ?? \"N/A\";\n    return value === '' ? '<empty string>' : <strong>{value}</strong>\n  }\n  renderEditor() {\n    const { onChange, feature: { name, values, endpoint, property }, deviceState } = this.props;\n    return (\n      <EnumEditor\n        onChange={(value) => onChange(endpoint, { [name]: value })}\n        values={values as unknown as ValueWithLabelOrPrimitive[]}\n        value={deviceState[property] as ValueWithLabelOrPrimitive}\n      />\n    )\n  }\n\n  render() {\n    const { feature: { access } } = this.props;\n    if (access & FeatureAccessMode.ACCESS_WRITE) {\n      return this.renderEditor();\n    } else if (access & FeatureAccessMode.ACCESS_STATE) {\n      return this.renderView();\n    } else {\n      return null;\n    }\n  }\n}","import React, { Component } from \"react\";\nimport { LightFeature } from \"../../../types\";\nimport { scale } from \"../../../utils\";\nimport { ValueWithLabelOrPrimitive } from \"../../enum-editor/enum-editor\";\nimport { BaseFeatureProps } from \"../base\";\nimport Composite from \"../composite/composite\";\n\ntype LightProps = BaseFeatureProps<LightFeature>\nconst stepsConfiguration = {\n  brightness: [0, 25, 50, 75, 100].map<ValueWithLabelOrPrimitive>(item => ({ value: scale(item, [0, 100], [0, 255]), title: item + '%' })),\n  'color_temp': [1000, 2000, 3000, 4000, 5000, 6500].map<ValueWithLabelOrPrimitive>(kelvin => ({ value: 1000000.0 / kelvin, title: kelvin + 'K' }))\n};\nexport default class Light extends Component<LightProps, {}> {\n  render() {\n    return <Composite type=\"light\" {...this.props} stepsConfiguration={stepsConfiguration} />\n  }\n}\n","import React, { Component } from \"react\";\nimport { SwitchFeature } from \"../../../types\";\nimport { BaseFeatureProps } from \"../base\";\nimport Composite from \"../composite/composite\";\n\ntype SwitchProps = BaseFeatureProps<SwitchFeature>\nexport default class Switch extends Component<SwitchProps> {\n  render() {\n    return <Composite type=\"switch\" {...this.props} />\n  }\n}","import React, { Component } from \"react\";\n\nimport { CoverFeature } from \"../../../types\";\nimport { ValueWithLabelOrPrimitive } from \"../../enum-editor/enum-editor\";\n\n\nimport { BaseFeatureProps } from \"../base\";\nimport Composite from \"../composite/composite\";\n\nconst stepsConfiguration = {\n  position: [0, 25, 50, 75, 100].map<ValueWithLabelOrPrimitive>(item => ({ value: item, title: item + '' })),\n  tilt: [0, 25, 50, 75, 100].map<ValueWithLabelOrPrimitive>(item => ({ value: item, title: item + '' }))\n};\n\ntype CoverProps = BaseFeatureProps<CoverFeature>\nexport default class Cover extends Component<CoverProps, {}> {\n  render() {\n    return <Composite type=\"cover\" {...this.props} stepsConfiguration={stepsConfiguration} />\n  }\n}\n","import React, { Component } from \"react\";\nimport { LockFeature } from \"../../../types\";\nimport { BaseFeatureProps } from \"../base\";\nimport Composite from \"../composite/composite\";\n\n\ntype LockProps = BaseFeatureProps<LockFeature>\n\nexport default class Lock extends Component<LockProps, {}> {\n  render() {\n    return <Composite type=\"lock\" {...this.props} />\n  }\n}\n","import React, { FunctionComponent, InputHTMLAttributes, useEffect, useState } from \"react\";\nimport * as convertColors from \"color-convert\";\nimport { AnyColor, XYColor, HueSaturationColor } from \"../../types\";\nimport Button from \"../button\";\n\n\ntype Payload = AnyColor;\n\nexport type ColorFormat = \"color_xy\" | \"color_hs\";\ntype ColorProps = {\n  value: Payload;\n  steps?: string[];\n  format: ColorFormat;\n  onChange(value: object): void;\n}\n\nconst toRGB = (source: AnyColor, sourceFormat: ColorFormat): string => {\n  switch (sourceFormat) {\n    case \"color_xy\":\n      {\n        const { x, y } = source as XYColor;\n        const z = 1.0 - x - y;\n        const Y = 1;\n        const X = (Y / y) * x;\n        const Z = (Y / y) * z;\n        return '#' + convertColors.xyz.hex([X * 100.0, Y * 100.0, Z * 100.0]);\n      }\n\n    case \"color_hs\":\n      {\n        const { hue, saturation } = source as HueSaturationColor;\n        return '#' + convertColors.hsv.hex([hue, saturation, 100]);\n      }\n    default:\n      return '#FFFFFF';\n  }\n}\n\nconst rgbToTargetFormat = (source: string, targetFormat: ColorFormat): object => {\n  switch (targetFormat) {\n    case \"color_hs\":\n      const [hue, saturation, v] = convertColors.hex.hsv(source);\n      return { hue, saturation };\n\n\n    case \"color_xy\":\n      const [X, Y, Z] = convertColors.hex.xyz(source);\n      const x = X / (X + Y + Z);\n      const y = Y / (X + Y + Z);\n      return { x, y };\n\n    default:\n      return { hex: source };\n  }\n\n}\nconst pridePallete = ['#FF0018', '#FFA52C', '#FFFF41', '#008018', '#0000F9', '#86007D'];\nconst ColorEditor: FunctionComponent<ColorProps & Omit<InputHTMLAttributes<HTMLInputElement>, 'onChange' | 'value'>> = (props) => {\n\n  const { onChange, value = {} as AnyColor, format, steps = pridePallete, ...rest } = props;\n  const [currentColor, setCurrentColor] = useState<string>(toRGB(value, format));\n  useEffect(() => {\n    setCurrentColor(toRGB(value, format))\n  }, [value, format]);\n\n  return <div className=\"input-group\">\n    <div className=\"btn-group mr-2\">\n      {\n        steps.map(step => <Button<string>\n          className=\"btn\"\n          style={{ backgroundColor: step }}\n          key={step}\n          item={step}\n          title={step}\n          onClick={(item) => onChange(rgbToTargetFormat(item, format))}>&nbsp;&nbsp;&nbsp;</Button>)\n      }\n    </div>\n    <input\n      type=\"color\"\n      className=\"form-control form-control-color border-0 p-0\"\n      value={currentColor}\n      onChange={e => {\n        onChange(rgbToTargetFormat(e.target.value, format))\n      }}\n      {...rest}\n    />\n  </div>\n\n}\n\nexport default ColorEditor;\n","import React, { Component } from \"react\";\nimport { AnyColor, ColorFeature } from \"../../../../types\";\nimport ColorEditor from \"../../../color-editor/color-editor\";\n\nimport { BaseFeatureProps } from \"../../base\";\n\n\ntype ColorProps = BaseFeatureProps<ColorFeature>;\n\nexport default class Light extends Component<ColorProps, {}> {\n  render() {\n    const { deviceState, feature, onChange } = this.props;\n    const value = {};\n    for (const innerFeature of feature.features) {\n      value[innerFeature.name] = deviceState[feature.property]?.[innerFeature.property] ?? 0;\n    }\n\n    return <ColorEditor\n      onChange={(color) => onChange(feature.endpoint, { color })}\n      value={value as AnyColor}\n      format={feature.name} />\n  }\n}\n","import React, { Fragment, FunctionComponent, InputHTMLAttributes, useEffect, useState } from \"react\";\n\ntype TextualProps = {\n  value: string;\n  unit?: string;\n  onChange(value: string): void;\n}\n\nconst TextualEditor: FunctionComponent<TextualProps & Omit<InputHTMLAttributes<HTMLInputElement>, 'onChange'>> = (props) => {\n  const { onChange, value, unit, ...rest } = props;\n  const [currentValue, setCurrentValue] = useState<string>(value)\n\n  useEffect(() => {\n    setCurrentValue(value)\n  }, [value]);\n\n  return <Fragment>\n    <input\n      type=\"text\"\n      className=\"form-control\"\n      value={currentValue}\n      onChange={e => setCurrentValue(e.target.value)}\n      onBlur={() => onChange(currentValue)}\n      {...rest}\n    />\n    {unit ? <span className=\"input-group-text\" style={{'minWidth': '66px'}}>{unit}</span> : null}\n  </Fragment>\n}\n\nexport default TextualEditor;\n","import React, { Component, Fragment } from \"react\";\nimport { FeatureAccessMode, TextualFeature } from \"../../../types\";\nimport TextualEditor from \"../../textual-editor/textual-editor\";\n\nimport { BaseFeatureProps } from \"../base\";\n\ntype TextualProps = BaseFeatureProps<TextualFeature>\nexport default class Textual extends Component<TextualProps> {\n\n  renderEditor() {\n    const { feature: { endpoint, name, property }, deviceState, onChange } = this.props;\n    return <TextualEditor\n      onChange={(value) => onChange(endpoint, { [name]: value })}\n      value={deviceState[property] as string ?? \"\"}\n    />\n  }\n  renderView() {\n    const { feature: { property }, deviceState } = this.props;\n    return <Fragment><strong>{deviceState[property] ?? \"N/A\"}</strong></Fragment>\n  }\n  render() {\n    const { feature: { access } } = this.props;\n    if (access & FeatureAccessMode.ACCESS_WRITE) {\n      return this.renderEditor();\n    } else if (access & FeatureAccessMode.ACCESS_STATE) {\n      return this.renderView();\n    } else {\n      return null;\n    }\n  }\n}","import React, { Component, FunctionComponent, PropsWithChildren } from \"react\";\nimport { CompositeFeature, Endpoint, FeatureAccessMode, GenericExposedFeature } from \"../../../types\";\nimport { isBinaryFeature, isColorFeature, isCoverFeature, isEnumFeature, isLightFeature, isLockFeature, isNumericFeature, isSwitchFeature, isTextualFeature } from \"../../device-page/type-guards\";\n\nimport Numeric from \"../numeric/numeric\";\n\nimport { BaseFeatureProps } from \"../base\";\nimport Binary from \"../binary/binary\";\nimport Enum from \"../enum/enum\";\nimport Light from \"../light/light\";\nimport Switch from \"../switch/switch\";\nimport Cover from \"../cover/cover\";\nimport Lock from \"../lock/lock\";\nimport Color from \"../composite/color/color\";\nimport Textual from \"../textual/textual\";\nimport Button from \"../../button\";\nimport groupBy from \"lodash/groupBy\";\n\n\ntype CompositeType = \"composite\" | \"light\" | \"switch\" | \"cover\" | \"lock\" | \"fan\";\n\ninterface CompositeProps extends BaseFeatureProps<CompositeFeature> {\n  type: CompositeType;\n  stepsConfiguration?: object;\n}\n\ntype FetatureWrapperProps = {\n  feature: CompositeFeature | GenericExposedFeature;\n  onRead(endpoint: Endpoint, value: object): void;\n};\nconst FeatureWrapper: FunctionComponent<PropsWithChildren<FetatureWrapperProps>> = (props) => {\n  const { children, feature, onRead } = props;\n  return <div className=\"row pb-2\">\n    <label className=\"col-3 col-form-label\">\n      <strong title={JSON.stringify(feature)}>{feature.name}</strong>\n    </label>\n    <div className=\"col-6 col-sm-8 d-flex align-items-center\">\n      {children}\n    </div>\n    <div className=\"col-1\">\n      {feature.access & FeatureAccessMode.ACCESS_READ ? (\n        <Button<CompositeFeature | GenericExposedFeature> item={feature} onClick={(item) => {\n          onRead(feature.endpoint, { [item.property]: \"\" })\n        }} className=\"btn btn-primaty\"><i className=\"fa fa-sync\"></i></Button>\n      ) : null}\n    </div>\n  </div>\n}\n\nexport default class Composite extends Component<CompositeProps, {}> {\n  renderFeature = (feature: CompositeFeature | GenericExposedFeature) => {\n    const { deviceState, device, onChange, onRead, stepsConfiguration } = this.props;\n\n    const genericParams = { key: JSON.stringify(feature), device, deviceState, onChange, onRead };\n    const wrapperParams = { key: JSON.stringify(feature), feature, onRead };\n\n    if (isBinaryFeature(feature)) {\n      return <FeatureWrapper {...wrapperParams}>\n        <Binary feature={feature} {...genericParams} />\n      </FeatureWrapper>\n    } else if (isNumericFeature(feature)) {\n      return <FeatureWrapper {...wrapperParams}>\n        <Numeric feature={feature} {...genericParams}\n          steps={stepsConfiguration?.[feature.name]} />\n      </FeatureWrapper>\n    } else if (isTextualFeature(feature)) {\n      return <FeatureWrapper {...wrapperParams}>\n        <Textual feature={feature} {...genericParams} />\n      </FeatureWrapper>\n    } else if (isEnumFeature(feature)) {\n      return <FeatureWrapper {...wrapperParams}>\n        <Enum feature={feature} {...genericParams} />\n      </FeatureWrapper>\n    } else if (isLightFeature(feature)) {\n      return <Light feature={feature} {...genericParams} />\n    } else if (isSwitchFeature(feature)) {\n      return <Switch feature={feature} {...genericParams} />\n    } else if (isCoverFeature(feature)) {\n      return <Cover feature={feature} {...genericParams} />\n    } else if (isLockFeature(feature)) {\n      return <Lock feature={feature} {...genericParams} />\n    } else if (isColorFeature(feature)) {\n      return <FeatureWrapper {...wrapperParams}>\n        <Color feature={feature} {...genericParams} />\n      </FeatureWrapper>\n    }\n    return (<FeatureWrapper {...wrapperParams}>\n      <label className=\"col-3 col-form-label\">Unknown feature (<strong>{feature.type}</strong>)</label>\n      <div className=\"col-9\">{JSON.stringify(feature)}{JSON.stringify(deviceState)}</div>\n    </FeatureWrapper>);\n  }\n  render() {\n    const MAGIC_NO_ENDPOINT = 'MAGIC_NO_ENDPOINT';\n    const { feature: { features } } = this.props;\n    const groupedFeatures = groupBy(features, f => f.endpoint ?? MAGIC_NO_ENDPOINT);\n    const result = [];\n    if (groupedFeatures[MAGIC_NO_ENDPOINT]) {\n      result.push(...groupedFeatures[MAGIC_NO_ENDPOINT].map(this.renderFeature));\n      delete groupedFeatures[MAGIC_NO_ENDPOINT];\n    }\n    for (const epName in groupedFeatures) {\n      const featuresGroup = groupedFeatures[epName];\n      result.push(<div key={epName}>Endpoint: {epName}<div className=\"pl-2\">{...featuresGroup.map(this.renderFeature)}</div></div>);\n    }\n    return result;\n\n  }\n}\n","import React, { Component } from \"react\";\nimport { CompositeFeature, Device, DeviceState } from \"../../types\";\nimport actions, { StateApi } from \"../../actions\";\n\nimport { connect } from \"unistore/react\";\nimport { GlobalState } from \"../../store\";\n\nimport Composite from \"../features/composite/composite\";\n\ninterface PropsFromStore {\n    deviceStates: Map<string, DeviceState>;\n}\ninterface ExposesProps {\n    device: Device;\n}\n\nclass Exposes extends Component<ExposesProps & PropsFromStore & StateApi, {}> {\n    render() {\n        const { device, deviceStates, setDeviceState, getDeviceState } = this.props;\n        const deviceState = deviceStates.get(device.friendly_name) ?? {} as DeviceState;\n        if (device.definition?.exposes) {\n            return <div className=\"card\">\n                <div className=\"card-body\">\n                    <Composite feature={{ features: device.definition.exposes } as CompositeFeature} type=\"composite\" device={device} deviceState={deviceState}\n                        onChange={(endpoint, value) => {\n                            setDeviceState(`${device.friendly_name}${endpoint ? `/${endpoint}` : ''}`, value)\n                        }}\n                        onRead={(endpoint, value) => {\n                            getDeviceState(`${device.friendly_name}${endpoint ? `/${endpoint}` : ''}`, value)\n                        }}\n                    />\n                </div>\n            </div>\n        } else {\n            return \"Device doesn't expose anything\"\n        }\n    }\n}\n\nconst mappedProps = [\"deviceStates\"];\n\nconst ConnectedDeviceExposes = connect<ExposesProps, {}, GlobalState, StateApi>(mappedProps, actions)(Exposes);\nexport default ConnectedDeviceExposes;\n","// extracted by mini-css-extract-plugin\nexport default {\"tree\":\"_1A0umx4fPj4iWC5K7RUnD-\"};","import React, { Component, FunctionComponent } from \"react\";\nimport { Device } from \"../../types\";\nimport treeStyle from \"./tree.css\";\n\ninterface ClustersProps {\n    device: Device;\n}\ntype ClustersComp = {\n    label: string;\n    clusters: string[];\n}\nconst ClustersComp: FunctionComponent<ClustersComp> = (props) => {\n    const { label, clusters } = props;\n    if (clusters.length) {\n        return (<li>\n            <span>{label}</span>\n            <ul>{clusters.map(cluster => <li key={cluster}><span>{cluster}</span></li>)}</ul>\n        </li>)\n    } else {\n        return null;\n    }\n\n}\nexport default class Clusters extends Component<ClustersProps, {}> {\n    render() {\n        const { device } = this.props;\n        return <div className=\"card\">\n            <div className=\"card-body\">\n                <dl className={`${treeStyle.tree} row`}>\n                    <ul>\n                        <li>\n                            <span>{device.ieee_address}</span>\n                            <ul>\n                                {Array.from(device.endpoints.entries()).map(([epName, epData]) => {\n                                    return (\n                                        <li key={epName}>\n                                            <span>Endpoint <strong>{epName}</strong></span>\n                                            <ul>\n                                                <ClustersComp label=\"Output clusters\" clusters={epData.clusters.output} />\n                                                <ClustersComp label=\"Input clusters\" clusters={epData.clusters.input} />\n                                            </ul>\n                                        </li>\n                                    );\n                                })}\n                            </ul>\n                        </li>\n                    </ul>\n                </dl>\n            </div>\n        </div>\n    }\n}\n\n","import React, { Component } from \"react\";\nimport { NavLink, Redirect, RouteComponentProps, withRouter } from \"react-router-dom\";\nimport { connect } from \"unistore/react\";\nimport actions from \"../../actions\";\nimport { GlobalState } from \"../../store\";\nimport DeviceInfo from \"./info\";\nimport Bind from \"./bind\";\nimport States from \"./states\";\nimport ConnectedDeviceExposes from \"./exposes\";\nimport Clusters from \"./clusters\";\n\ntype UrlParams = {\n    dev: string;\n    tab?: TabName;\n};\ntype DevicePageProps = RouteComponentProps<UrlParams>;\n\n\ntype TabName = \"info\" | \"bind\" | \"state\" | \"exposes\" | \"clusters\";\n// eslint-disable-next-line react/prefer-stateless-function\nexport class DevicePage extends Component<DevicePageProps & GlobalState, {}> {\n    renderContent() {\n        const { match, devices } = this.props;\n        const { tab, dev } = match.params;\n        const device = devices.get(dev);\n\n        switch (tab) {\n            case \"info\":\n                return <DeviceInfo device={device} />;\n            case \"bind\":\n                return <Bind device={device} />;\n            case \"state\":\n                return <States device={device} />;\n            case \"exposes\":\n                return <ConnectedDeviceExposes device={device} />;\n            case \"clusters\":\n                return <Clusters device={device} />\n            default:\n                return <Redirect to={`/device/${dev}/info`} />;\n        }\n\n    }\n    render() {\n\n        const { devices, match } = this.props;\n        const { dev } = match.params;\n        const device = devices.get(dev);\n        if (!device) {\n            return <div className=\"h-100 d-flex justify-content-center align-items-center\">Unknown device</div>\n        }\n\n        return (<div className=\"card h-100\">\n            <div className=\"card-header\">\n                <ul className=\"nav nav-tabs card-header-tabs\">\n                    <li className=\"nav-item\">\n                        <NavLink activeClassName=\"active\" className=\"nav-link\" to={`/device/${dev}/info`}>About</NavLink>\n                    </li>\n                    <li className=\"nav-item\">\n                        <NavLink activeClassName=\"active\" className=\"nav-link\" to={`/device/${dev}/bind`}>Bind</NavLink>\n\n                    </li>\n                    <li className=\"nav-item\">\n                        <NavLink activeClassName=\"active\" className=\"nav-link\" to={`/device/${dev}/state`}>State</NavLink>\n                    </li>\n                    <li className=\"nav-item\">\n                        <NavLink activeClassName=\"active\" className=\"nav-link\" to={`/device/${dev}/exposes`}>Exposes</NavLink>\n                    </li>\n                    <li className=\"nav-item\">\n                        <NavLink activeClassName=\"active\" className=\"nav-link\" to={`/device/${dev}/clusters`}>Clusters</NavLink>\n                    </li>\n                </ul>\n            </div>\n\n            <div className=\"card-body\">\n                <h5 className=\"card-title\">{device.friendly_name}</h5>\n                {this.renderContent()}\n            </div>\n        </div>);\n\n    }\n}\nconst devicePageWithRouter = withRouter(DevicePage);\nconst mappedProps = [\"devices\"];\nconst ConnectedDevicePage = connect<{}, {}, GlobalState, {}>(mappedProps, actions)(devicePageWithRouter);\nexport default ConnectedDevicePage;","import React, { Component} from \"react\";\nimport { connect } from \"unistore/react\";\nimport actions, { TouchlinkApi } from \"../../actions\";\nimport { GlobalState } from \"../../store\";\nimport Button from \"../button\";\nimport { TouchLinkDevice } from \"../../types\";\nimport { genDeviceDetailsLink } from \"../../utils\";\nimport cx from \"classnames\";\nimport { Link } from \"react-router-dom\";\n\n\n\n// eslint-disable-next-line react/prefer-stateless-function\nexport class TouchlinkPage extends Component<TouchlinkApi & GlobalState, {}> {\n    onIdentifyClick = (device: TouchLinkDevice): void => {\n        const { touchlinkIdentify } = this.props;\n        touchlinkIdentify(device);\n    }\n\n    onResetClick = (device: TouchLinkDevice): void => {\n        const { touchlinkReset } = this.props;\n        touchlinkReset(device);\n    }\n\n    renderTouchlinkDevices() {\n        const { touchlinkDevices, devices, touchlinkIdentifyInProgress, touchlinkResetInProgress } = this.props;\n        const touchlinkInProgress = touchlinkIdentifyInProgress || touchlinkResetInProgress;\n        return (\n            <div className=\"table-responsive\">\n                <table className=\"table align-middle\">\n                    <thead>\n                        <tr>\n                            <th scope=\"col\">#</th>\n                            <th scope=\"col\">ieee_address</th>\n                            <th scope=\"col\">friendly_name</th>\n                            <th scope=\"col\">channel</th>\n                            <th scope=\"col\">&nbsp;</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {touchlinkDevices.map((touchlinkDevice, idx) => (\n                            <tr key={touchlinkDevice.ieee_address}>\n                                <td>{idx + 1}</td>\n                                <td>{\n                                    devices.has(touchlinkDevice.ieee_address) ?\n                                        (<Link to={genDeviceDetailsLink(touchlinkDevice.ieee_address)}>{touchlinkDevice.ieee_address}</Link>) : touchlinkDevice.ieee_address}</td>\n                                <td>{devices.get(touchlinkDevice.ieee_address)?.friendly_name}</td>\n                                <td>{touchlinkDevice.channel}</td>\n                                <td>\n                                    <div className=\"btn-group float-right\" role=\"group\" aria-label=\"Basic example\">\n                                        <Button<TouchLinkDevice> disabled={touchlinkInProgress} item={touchlinkDevice} title=\"Identify\" className=\"btn btn-primary\" onClick={this.onIdentifyClick}><i\n                                            className={cx(\"fa\", { \"fa-exclamation-triangle\": !touchlinkIdentifyInProgress, \"fas fa-circle-notch fa-spin\": touchlinkIdentifyInProgress })} /></Button>\n                                        <Button<TouchLinkDevice> disabled={touchlinkInProgress} item={touchlinkDevice} title=\"Factory reset\" className=\"btn btn-danger\" onClick={this.onResetClick}><i\n                                            className={cx(\"fa\", { \"fa-broom\": !touchlinkResetInProgress, \"fas fa-circle-notch fa-spin\": touchlinkResetInProgress })} /></Button>\n                                    </div>\n                                </td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n    renderNoDevices() {\n        const { touchlinkScan } = this.props;\n        return (\n            <Button className=\"btn btn-primary mx-auto d-block\" onClick={touchlinkScan}>Scan</Button>\n        );\n    }\n    render() {\n        const { touchlinkDevices, touchlinkScanInProgress, touchlinkScan } = this.props;\n        return (\n            <div className=\"container\">\n                <div className=\"card mt-2\">\n                    <div className=\"card-header allign-middle\">\n                        Detected {touchlinkDevices.length} touchlink devices.\n                        <Button title=\"Rescan\" className=\"btn btn-primary btn-sm float-right\" onClick={touchlinkScan}><i className=\"fa fa-sync\" /></Button>\n                    </div>\n\n                    <div>\n                        <div className=\"card-body\">\n                            {touchlinkScanInProgress ? (\n                                <div className=\"d-flex justify-content-center\">\n                                    <div className=\"spinner-border\" role=\"status\">\n                                        <span className=\"sr-only\">Loading...</span>\n                                    </div>\n                                </div>\n                            ) : touchlinkDevices.length === 0 ? this.renderNoDevices() : this.renderTouchlinkDevices()}\n\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\nconst mappedProps = [\"touchlinkDevices\", \"devices\", \"touchlinkScanInProgress\", \"touchlinkIdentifyInProgress\", \"touchlinkResetInProgress\"];\n\nexport default connect<{}, {}, GlobalState, TouchlinkApi>(mappedProps, actions)(TouchlinkPage);","import React, { useState, ChangeEvent, InputHTMLAttributes, useEffect } from \"react\";\n\nimport Button from \"../button\";\nimport RangeEditor from \"../range-editor/range-editor\";\n\ninterface UniversalEditorProps {\n    values?: unknown[];\n    onChange(arg1: unknown): void;\n}\n\nconst togglePairs = new Map<string | boolean, string | boolean>([\n    ['ON', 'OFF'],\n    ['OFF', 'ON'],\n    ['OPEN', 'CLOSE'],\n    ['CLOSE', 'OPEN'],\n    ['LOCK', 'UNLOCK'],\n    ['UNLOCK', 'LOCK'],\n    [true, false],\n    [false, true]\n]);\n\nconst BluringInput: React.FunctionComponent<React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>> = (props) => {\n    const { onChange, value, ...rest } = props;\n    const [internalValue, setInternalValue] = useState(value);\n    useEffect(() => {\n        setInternalValue(value);\n    }, [value]);\n\n\n    return <input\n        value={internalValue}\n        onBlur={() => onChange({ target: { value: internalValue } } as ChangeEvent<HTMLInputElement>)}\n        onChange={e => setInternalValue(e.target.value)}\n        {...rest} />\n}\n\nconst UniversalEditor: React.FunctionComponent<InputHTMLAttributes<unknown> & UniversalEditorProps> = (props) => {\n    const { value, values, onChange, disabled, name, ...rest } = props;\n\n    const isToggleParameter = togglePairs.has(value as string | boolean);\n\n\n    if (values) {\n        return (<select className=\"form-select\"\n            disabled={disabled}\n            value={value as string}\n            onChange={e => onChange(e.target.value)}>\n            {values.map(val => <option key={val as string} value={val as string}>{val as string}</option>)}\n        </select>)\n    }\n    switch (typeof value) {\n        case \"boolean\":\n            return (\n                <div className=\"form-check form-switch\">\n                    <input type=\"checkbox\" className=\"form-check-input\"\n                        disabled={disabled}\n                        checked={value as boolean}\n                        onChange={e => onChange(e.target.checked)}\n                        {...rest} />\n                </div>\n            );\n        case \"number\":\n            return (<div className=\"row\">\n                <div className=\"col-9\">\n                    <RangeEditor disabled={disabled} value={value} onChange={v => onChange(v)} {...rest} />\n                </div>\n                <div className=\"col-3\">\n                    <input type=\"number\" step=\"any\" className=\"form-control col-2\"\n                        disabled={disabled}\n                        value={value as number}\n                        onChange={e => onChange(e.target.valueAsNumber)}\n                        {...rest} />\n                </div>\n\n\n            </div >);\n        default:\n            if (isToggleParameter) {\n                return (\n                    <div className=\"row\">\n                        <div className=\"col-3\">\n                            <Button<string | boolean> title=\"Toggle\" value=\"Toggle\"\n                                className=\"btn btn-primary\"\n                                disabled={disabled}\n                                item={togglePairs.get(value as string | boolean)}\n                                onClick={payload => onChange(payload)}>\n                                <i className=\"fa fa-exchange-alt\" />\n                            </Button>\n                        </div>\n                        <div className=\"col-9\">\n                            <BluringInput type=\"text\" className=\"form-control\"\n                                disabled={disabled}\n                                value={value as string}\n                                onChange={e => onChange(e.target.value)}\n                                {...rest}\n                            />\n                        </div>\n                    </div>\n                );\n            }\n            return (<BluringInput type=\"text\" className=\"form-control\"\n                disabled={disabled}\n                value={value as string}\n                onChange={e => onChange(e.target.value)}\n                {...rest} />);\n\n\n    }\n};\nexport default UniversalEditor;","import React, { Component } from \"react\";\nimport { connect } from \"unistore/react\";\nimport actions, { BridgeApi, LegacyApi, UtilsApi } from \"../../actions\";\nimport { GlobalState } from \"../../store\";\nimport get from \"lodash/get\";\nimport UniversalEditor from \"../universal-editor\";\nimport isEmpty from \"lodash/isEmpty\";\nimport { NavLink, Redirect, RouteComponentProps, withRouter } from \"react-router-dom\";\nimport Button from \"../button\";\n\n\nconst settings = [\n    {\n        key: 'last_seen',\n        path: 'config.advanced.last_seen',\n        title: 'Last seen',\n        description: 'Add a last_seen attribute to MQTT messages, contains date/time of last Zigbee message',\n        values: ['disable', 'ISO_8601', 'ISO_8601_local', 'epoch']\n    },\n    {\n        key: 'elapsed',\n        path: 'config.advanced.elapsed',\n        title: 'Elapsed',\n        description: 'Add an elapsed attribute to MQTT messages, contains milliseconds since the previous msg'\n    },\n    {\n        key: 'log_level',\n        path: 'log_level',\n        title: 'Log level',\n        description: 'Logging level',\n        values: ['debug', 'info', 'warn', 'error']\n    },\n    {\n        key: 'homeassistant',\n        path: 'config.homeassistant',\n        title: 'Homeassistant support',\n        description: 'Home Assistant integration (MQTT discovery)'\n    }\n]\ntype SettingsTab = \"settings\" | \"bridge\"\n\ntype UrlParams = {\n    tab?: SettingsTab;\n};\ntype SettingsPageProps = RouteComponentProps<UrlParams>;\n\n\nexport class SettingsPage extends Component<SettingsPageProps & BridgeApi & GlobalState & LegacyApi & UtilsApi, {}> {\n    updateConfig = (name: string, value: unknown): void => {\n        const { updateConfigValue } = this.props;\n        updateConfigValue(name, value);\n    }\n\n    render() {\n        return (\n            <div className=\"card\">\n                <div className=\"card-header\">\n                    <ul className=\"nav nav-tabs card-header-tabs\">\n                        <li className=\"nav-item\">\n                            <NavLink className=\"nav-link\" activeClassName=\"active\" to={`/settings/settings`}>Settings</NavLink>\n                        </li>\n                        <li className=\"nav-item\">\n                            <NavLink className=\"nav-link\" activeClassName=\"active\" to={`/settings/bridge`}>Raw</NavLink>\n                        </li>\n                    </ul>\n\n                </div>\n\n                <div className=\"card-body\">\n                    {this.renderSwitcher()}\n                </div>\n            </div>\n        )\n    }\n    renderSwitcher() {\n        const { match } = this.props;\n        const { tab } = match.params;\n        switch (tab) {\n            case \"settings\":\n                return this.renderSettings();\n            case \"bridge\":\n                return this.renderBridgeInfo();\n            default:\n                return <Redirect to={`/settings/settings`} />;\n        }\n    }\n\n    renderBridgeInfo() {\n        const { bridgeInfo } = this.props;\n        return <pre>{JSON.stringify(bridgeInfo, null, 4)}</pre>\n    }\n    renderLegacyApiSettings() {\n        const { resetZnp } = this.props;\n        return [\n            <div key={\"znp-rest\"} className=\"row\">\n                <div className=\"col\">\n                    <Button<void> className=\"btn btn-danger\" promt onClick={() => resetZnp()}>Reset coordinator</Button>\n                </div>\n            </div>\n        ];\n    }\n    renderSettings() {\n        const { bridgeInfo, exportState } = this.props;\n        return <div className=\"container\">\n            <div className=\"mt-2\">\n                {\n                    !isEmpty(bridgeInfo) && settings.map(setting => (\n                        <div key={setting.key} className=\"row\">\n                            <div className=\"col\">\n                                <label htmlFor={setting.key}>{setting.title}</label>\n                                <UniversalEditor\n                                    disabled={get(bridgeInfo, setting.path) === undefined}\n                                    value={get(bridgeInfo, setting.path) as string | ReadonlyArray<string> | number}\n                                    values={setting.values}\n                                    onChange={(value) => this.updateConfig(setting.key, value)}\n                                />\n                                <div className=\"form-text\">{setting.description}</div>\n                            </div>\n                        </div>\n                    ))\n                }\n                {\n                    bridgeInfo.config?.advanced.legacy_api !== false ? this.renderLegacyApiSettings() : null\n                }\n            </div>\n            <Button<void> className=\"mt-2 btn btn-primary\" onClick={exportState}>Download state</Button>\n        </div>\n\n    }\n}\nconst SettingsPageWithRouter = withRouter(SettingsPage);\nconst mappedProps = [\"bridgeInfo\"];\nconst ConnectedSettingsPage = connect<{}, {}, GlobalState, BridgeApi>(mappedProps, actions)(SettingsPageWithRouter);\nexport default ConnectedSettingsPage;","import { useState, useEffect, useRef } from 'react';\n\nexport default function useComponentVisible(initialIsVisible: boolean) {\n    const [isComponentVisible, setIsComponentVisible] = useState(\n        initialIsVisible\n    );\n    const ref = useRef(null);\n\n    const handleHideDropdown = (event: KeyboardEvent) => {\n        if (event.key === \"Escape\") {\n            setIsComponentVisible(false);\n        }\n    };\n\n    const handleClickOutside = (event: MouseEvent) => {\n        if (ref.current && !ref.current.contains(event.target)) {\n            setIsComponentVisible(false);\n        }\n    };\n\n    useEffect(() => {\n        document.addEventListener(\"keydown\", handleHideDropdown, true);\n        document.addEventListener(\"click\", handleClickOutside, true);\n        return () => {\n            document.removeEventListener(\"keydown\", handleHideDropdown, true);\n            document.removeEventListener(\"click\", handleClickOutside, true);\n        };\n    });\n\n    return { ref, isComponentVisible, setIsComponentVisible };\n}","// extracted by mini-css-extract-plugin\nexport default {\"scrollable-menu\":\"_36Sntvyj-B3gg7Xj6xLUaY\"};","import React, { FunctionComponent, useState } from 'react';\n\nimport { GlobalState } from '../../store';\nimport actions, { BridgeApi } from '../../actions';\nimport { connect } from 'unistore/react';\nimport Button from '../button';\nimport cx from \"classnames\";\nimport { Link, NavLink } from 'react-router-dom';\nimport useComponentVisible from '../../hooks/useComponentVisible';\nimport { Device } from '../../types';\nimport style from \"./style.css\";\n\nconst urls = [\n    {\n        href: '/',\n        title: 'Home',\n        exact: true\n    },\n    {\n        href: '/map',\n        title: 'Map'\n    },\n    {\n        href: '/settings',\n        title: 'Settings'\n    },\n    {\n        href: '/groups',\n        title: 'Groups'\n    },\n    {\n        href: '/touchlink',\n        title: 'Touchlink'\n    },\n    {\n        href: '/logs',\n        title: 'Logs'\n    }\n];\ntype StartStopJoinButtonProps = {\n    devices: Map<string, Device>;\n}\nconst StartStopJoinButton: FunctionComponent<StartStopJoinButtonProps & Pick<BridgeApi, 'setPermitJoin'> & Pick<GlobalState, 'bridgeInfo'>> = ({ devices, setPermitJoin, bridgeInfo }) => {\n    const { ref, isComponentVisible, setIsComponentVisible } = useComponentVisible(false);\n    const [selectedRouter, setSelectedRouter] = useState<Device>(null);\n    // return<Button<boolean> className=\"btn btn-primary\" item={!bridgeInfo.permit_join} onClick={setPermitJoin}>{bridgeInfo.permit_join ? \"Disable join\" : \"Permit join\"}</Button>\n    const routers = [];\n    const selectAndHide = (device: Device) => { setSelectedRouter(device); setIsComponentVisible(false) }\n    devices.forEach((device) => {\n        if (device.type == \"Router\") {\n            routers.push(<li key={device.friendly_name}><a onClick={() => selectAndHide(device)} className=\"dropdown-item\" href=\"#\">{device.friendly_name}</a></li>)\n        }\n    });\n    const onBtnClick = () => {\n        setPermitJoin(!bridgeInfo.permit_join, selectedRouter);\n    }\n    return (\n        <div className=\"input-group w-auto\">\n            {routers.length ? (<><Button<boolean> type=\"button\" onClick={setIsComponentVisible} item={!isComponentVisible} className=\"btn btn-outline-secondary dropdown-toggle dropdown-toggle-split\" data-toggle=\"dropdown\" aria-expanded=\"false\">\n                <span className=\"visually-hidden\">Toggle Dropdown</span>\n            </Button>\n                <ul ref={ref} className={cx('dropdown-menu', style['scrollable-menu'], { show: isComponentVisible })}>\n                    <li key='all'><a className=\"dropdown-item\" onClick={() => selectAndHide(null)} href=\"#\">All</a></li>\n                    {routers}\n                </ul></>) : null}\n                <button onClick={onBtnClick} type=\"button\" className=\"btn btn-outline-secondary\">{bridgeInfo.permit_join ? \"Disable join\" : \"Permit join\"} ({selectedRouter?.friendly_name ?? \"All\"})</button>\n\n        </div>\n    );\n}\n\ntype PropsFromStore = {\n    devices: Map<string, Device>;\n    bridgeInfo: object;\n}\nconst NavBar: FunctionComponent<PropsFromStore & BridgeApi & Pick<GlobalState, 'bridgeInfo'>> = ({ devices, setPermitJoin, bridgeInfo }) => {\n    const { ref, isComponentVisible, setIsComponentVisible } = useComponentVisible(false);\n    return (<nav className=\"navbar navbar-expand-md navbar-dark bg-dark fixed-top\">\n        <div className=\"container-fluid\">\n            <Link className=\"navbar-brand\" to=\"/\">Zigbee2MQTT</Link>\n            <Button<boolean> onClick={setIsComponentVisible} item={!isComponentVisible} className={cx(\"navbar-toggler\")} type=\"button\">\n                <span className=\"navbar-toggler-icon\" />\n            </Button>\n            <div ref={ref} className={cx(\"navbar-collapse collapse\", { show: isComponentVisible })}>\n                <ul className=\"navbar-nav mr-auto mb-2 mb-md-0\">\n                    {\n                        urls.map(url =>\n                            <li key={url.href} className=\"nav-item\">\n                                <NavLink exact={url.exact} className=\"nav-link\" to={url.href} activeClassName=\"active\">\n                                    {url.title}\n                                </NavLink>\n                            </li>)\n                    }\n                </ul>\n                <StartStopJoinButton\n                    devices={devices}\n                    setPermitJoin={setPermitJoin}\n                    bridgeInfo={bridgeInfo}\n                />\n            </div>\n        </div>\n    </nav>)\n}\nconst mappedProps = [\"bridgeInfo\", \"devices\"];\nconst ConnectedNavBar = connect<{}, {}, PropsFromStore, BridgeApi>(mappedProps, actions)(NavBar);\nexport default ConnectedNavBar;\n\n","// extracted by mini-css-extract-plugin\nexport default {\"device-pic\":\"_2p1XqBiO9XLlCB-lT60VCH\",\"device-image\":\"_3Z1i8qUrV2sErNF0__pVZt\"};","import React, { Component } from \"react\";\nimport { connect } from \"unistore/react\";\nimport actions, { GroupsApi } from \"../../actions\";\nimport { GlobalState, Group, GroupAddress } from \"../../store\";\nimport Button from \"../button\";\nimport { Device, Endpoint } from \"../../types\";\nimport { genDeviceDetailsLink } from \"../../utils\";\nimport style from './style.css';\nimport cx from 'classnames';\nimport EndpointPicker from \"../endpoint-picker\";\nimport DevicePicker from \"../device-picker\";\nimport { Link } from \"react-router-dom\";\nimport { getEndpoints } from \"../device-page/bind-row\";\nimport DeviceImage from \"../device-image\";\n\n\ninterface GroupsPageState {\n    newGroupName: string;\n}\n\n\ninterface AddDeviceToGroupProps {\n    devices: Map<string, Device>;\n    group: Group;\n    addDeviceToGroup(deviceName: string, groupName: string): void;\n}\n\ninterface AddDeviceToGroupState {\n    device: string;\n    endpoint: Endpoint;\n}\n\ninterface DeviceGroupRowProps {\n    rowNumber: number;\n    groupAddress: GroupAddress;\n    devices: Map<string, Device>;\n    removeDeviceFromGroup(deviceFriendlyName: string): void;\n}\n\n// eslint-disable-next-line react/prefer-stateless-function\nclass DeviceGroupRow extends Component<DeviceGroupRowProps, {}> {\n    getDeviceObj(): Device | undefined {\n        const { groupAddress, devices } = this.props;\n        return devices.get(groupAddress.ieee_address);\n    }\n    render() {\n        const { rowNumber, groupAddress, removeDeviceFromGroup } = this.props;\n        const device = this.getDeviceObj();\n\n        return <tr>\n            <th scope=\"row\">{rowNumber + 1}</th>\n            <td className={style[\"device-pic\"]}>\n                <DeviceImage className={cx(style[\"device-image\"])} device={device} />\n            </td>\n            <td><Link to={genDeviceDetailsLink(device.ieee_address)}>{device.friendly_name}</Link></td>\n            <td>{groupAddress.ieee_address}</td>\n            <td>{groupAddress.endpoint}</td>\n            <td>{device && <Button<string> promt item={device.friendly_name} onClick={removeDeviceFromGroup} className=\"btn btn-danger btn-sm float-right\"><i className=\"fa fa-trash\" /></Button>}</td>\n        </tr>;\n    }\n}\ninterface DeviceGroupPropts {\n    group: Group;\n    devices: Map<string, Device>;\n    removeDeviceFromGroup(groupFriendlyName: string, deviceFriendlyName: string): void;\n}\n\n// eslint-disable-next-line react/prefer-stateless-function\nclass DeviceGroup extends Component<DeviceGroupPropts, {}> {\n    onRemove = (deviceFriendlyName: string): void => {\n        const { group, removeDeviceFromGroup } = this.props;\n        removeDeviceFromGroup(group.friendly_name, deviceFriendlyName);\n    }\n    render() {\n        const { group, devices } = this.props;\n        return <table className=\"table table-sm\">\n            <thead>\n                <tr>\n                    <th scope=\"col\">#</th>\n                    <th scope=\"col\">Pic</th>\n                    <th scope=\"col\">friendlyName</th>\n                    <th scope=\"col\">ieee_addr</th>\n                    <th scope=\"col\">Endpoint</th>\n                    <th scope=\"col\" className=\"text-right\">Action</th>\n                </tr>\n            </thead>\n            <tbody>\n                {group.members.map((groupMemebershipInfo, idx) => <DeviceGroupRow key={groupMemebershipInfo.ieee_address} removeDeviceFromGroup={this.onRemove} rowNumber={idx} devices={devices} groupAddress={groupMemebershipInfo} />)}\n            </tbody>\n        </table>;\n    }\n}\n\nclass AddDeviceToGroup extends Component<AddDeviceToGroupProps, AddDeviceToGroupState> {\n    state = {\n        device: undefined,\n        endpoint: undefined\n    };\n\n\n    onSubmit = (): void => {\n        const { addDeviceToGroup, group } = this.props;\n        const { device, endpoint } = this.state;\n        addDeviceToGroup(endpoint ? `${device}/${endpoint}` : device, group.friendly_name);\n\n    }\n    onDeviceSelect = (device: Device): void => {\n        const endpoints = getEndpoints(device);\n        this.setState({ device: device.ieee_address, endpoint: endpoints[0] });\n    }\n\n    onEpChange = (endpoint: Endpoint): void => {\n        this.setState({ endpoint });\n    }\n    render() {\n        const { device, endpoint } = this.state;\n        const { devices } = this.props;\n        const deviceObj = devices.get(device);\n\n        const endpoints = getEndpoints(deviceObj);\n\n        return <form className=\"row\">\n\n            <div className=\"col\">\n                <div className=\"input-group mb-3\">\n                    <DevicePicker type=\"device\" value={device} devices={devices} onChange={this.onDeviceSelect} />\n                    <EndpointPicker values={endpoints} value={endpoint} onChange={this.onEpChange} />\n                </div>\n\n            </div>\n\n            <div className=\"col\">\n                <Button<void> type=\"button\" onClick={this.onSubmit} className=\"btn btn-primary\">Add to group</Button>\n            </div>\n\n\n        </form>\n    }\n}\n\nexport class GroupsPage extends Component<GroupsApi & GlobalState, GroupsPageState> {\n    state = {\n        newGroupName: ''\n    }\n\n\n\n    changeHandler = (event): void => {\n        const name: string = event.target.name;\n        const value: string = event.target.value;\n        this.setState({ [name]: value } as Pick<GroupsPageState, \"newGroupName\">);\n    }\n\n    onGroupCreateSubmit = (): void => {\n        const { newGroupName } = this.state;\n        const { createGroup } = this.props;\n        createGroup(newGroupName);\n    }\n\n    renderGroupCreationForm() {\n        const { newGroupName } = this.state;\n        return (\n            <form className=\"row mt-2\">\n                <div className=\"col\">\n                    <label htmlFor=\"newGroupName\" className=\"sr-only\">Group name</label>\n                    <input onChange={this.changeHandler} value={newGroupName} required type=\"text\" name=\"newGroupName\" className=\"form-control\" id=\"newGroupName\" placeholder=\"bedroom_lamps\" />\n                </div>\n                <div className=\"col\">\n                    <Button<void> onClick={this.onGroupCreateSubmit} className=\"btn btn-primary mb-2\">Create group</Button>\n                </div>\n\n            </form>\n        )\n    }\n    removeGroup = (friendlyName: string): void => {\n        const { removeGroup } = this.props;\n        removeGroup(friendlyName);\n    }\n    removeDeviceFromGroup = (groupFriendlyName: string, deviceFriendlyName: string): void => {\n        const { removeDeviceFromGroup } = this.props;\n        removeDeviceFromGroup(deviceFriendlyName, groupFriendlyName);\n    }\n    renderGroups() {\n        const { groups, devices, addDeviceToGroup } = this.props;\n        return (\n            <div id=\"accordion\">\n                {\n                    groups.map(group => (\n                        <div key={group.id} className=\"card mb-1\">\n                            <div className=\"card-header\" id={`heading${group.id}`}>\n                                <h5 className=\"mb-0\">\n                                    <button className=\"btn btn-link btn-sm\">\n                                        {group.friendly_name} (#{group.id})\n                                    </button>\n                                    <Button<string> promt title=\"Remove group\" item={group.friendly_name} onClick={this.removeGroup} className=\"btn btn-danger btn-sm float-right\"><i className=\"fa fa-trash\" /></Button>\n                                </h5>\n                            </div>\n\n                            <div>\n                                <div className=\"card-body\">\n                                    <div className=\"table-responsive\">\n                                        <DeviceGroup group={group} devices={devices} removeDeviceFromGroup={this.removeDeviceFromGroup} />\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"card-footer\">\n                                <AddDeviceToGroup addDeviceToGroup={addDeviceToGroup} devices={devices} group={group} />\n                            </div>\n                        </div>\n                    )).reverse()\n                }\n\n            </div>\n        )\n    }\n\n    render() {\n        return <div className=\"container\">\n            {this.renderGroupCreationForm()}\n            {this.renderGroups()}\n        </div>\n\n    }\n}\n\nconst mappedProps = [\"groups\", \"devices\"];\nconst ConnectedGroupsPage = connect<{}, {}, GlobalState, GroupsApi>(mappedProps, actions)(GroupsPage);\nexport default ConnectedGroupsPage;","// extracted by mini-css-extract-plugin\nexport default {\"action-column\":\"_1AmFhCTIk_ifBlEJGnLJuK\",\"device-pic\":\"_1KD_wxLENsmTnroATY4BrA\",\"device-image\":\"_1kMXLbhsSotmS-uYUbIFl0\",\"adaptive\":\"naW23ivAqNAn-AGHResRM\"};","import React, { MouseEvent, ThHTMLAttributes} from \"react\";\n\n\n\nimport { SortDirection } from \"../../types\";\nimport isEqual from \"lodash/isEqual\";\n\n\ninterface ActionTHProps<T> {\n    column: T | T[];\n    current: T | T[];\n    currentDirection: SortDirection;\n    onClick?(arg1: T | T[]): void;\n}\n\nexport default class ActionTH<T> extends React.Component<ActionTHProps<T> & Omit<ThHTMLAttributes<HTMLTableHeaderCellElement>, 'onClick'>, {}> {\n    onClick = (event: MouseEvent): void => {\n        event.preventDefault();\n        event.stopPropagation();\n        const { column, onClick } = this.props;\n        onClick && onClick(column);\n    };\n\n    renderArrow () {\n        const { currentDirection, current, column } = this.props;\n        if (isEqual(current, column)) {\n            if (currentDirection == \"asc\") {\n                return <i className={`fa fa-sort-amount-down-alt`} />;\n            }\n            return <i className={`fa fa-sort-amount-down`} />;\n        }\n        return <i className={`fa fa-sort-amount-down invisible`} />;\n    }\n\n    render () {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { children, onClick, current, column, currentDirection, ...rest } = this.props;\n        return (<th {...rest}>\n            <span className=\"btn btn-link\" onClick={this.onClick}>{children}</span>\n            {this.renderArrow()}\n        </th>);\n    }\n}\n","import style from \"./style.css\";\nimport React, { Component, Fragment } from \"react\";\nimport orderBy from \"lodash/orderBy\";\nimport DeviceControlGroup from \"../device-control\";\nimport cx from \"classnames\";\nimport { Device, SortDirection, DeviceState } from \"../../types\";\nimport { genDeviceDetailsLink, lastSeen, toHex } from \"../../utils\";\n\nimport { Notyf } from \"notyf\";\nimport PowerSource from \"../power-source\";\nimport { connect } from \"unistore/react\";\nimport { GlobalState } from \"../../store\";\nimport actions from \"../../actions\";\nimport ActionTH from \"./ActionTH\";\nimport isEqual from \"lodash/isEqual\";\nimport { Link } from \"react-router-dom\";\nimport DeviceImage from \"../device-image\";\nimport { ModelLink, VendorLink } from \"../vendor-links/verndor-links\";\n\n\ntype SortColumn =\n    | \"device.network_address\"\n    | \"device.friendly_name\"\n    | \"device.ieee_address\"\n    | \"device.definition.vendor\"\n    | \"device.definition.model\"\n    | \"state.linkquality\"\n    | \"state.last_seen\"\n    | \"state.elapsed\"\n    | \"state.battery\";\n\n\ninterface ZigbeeTableState {\n    sortDirection: SortDirection;\n    sortColumn: SortColumn | SortColumn[];\n    currentTime: number;\n    sortedTableData: ZigbeeTableData[];\n    error?: object;\n}\n\n\ninterface ZigbeeTableData {\n    device: Device;\n    state: DeviceState;\n}\n\n\n\nconst storeKey = \"ZigbeeTableState\";\nconst longLoadingTimeout = 15 * 1000;\n\nexport class ZigbeeTable extends Component<GlobalState, ZigbeeTableState> {\n    constructor(props) {\n        super(props);\n        this.state = {\n            sortDirection: \"desc\",\n            sortColumn: \"device.network_address\",\n            currentTime: Date.now(),\n            sortedTableData: []\n        };\n    }\n\n    restoreState(): void {\n        const { sortColumn, sortDirection } = this.state;\n\n        const storedState = localStorage.getItem(storeKey);\n        if (storedState) {\n            try {\n                const restored: Pick<ZigbeeTableState, \"sortDirection\" | \"sortColumn\"> = JSON.parse(storedState);\n                this.setState(restored);\n            } catch (e) {\n                new Notyf().error(e.toString());\n            }\n        } else {\n            this.onSortChange(sortColumn, sortDirection);\n        }\n    }\n\n    saveState = (): void => {\n        const { sortDirection, sortColumn } = this.state;\n        const storeData = {\n            sortDirection,\n            sortColumn\n        };\n        //in private mode localstorage access can throw exceptions\n        try {\n            localStorage.setItem(storeKey, JSON.stringify(storeData));\n        } catch (e) {\n            new Notyf().error(e.toString());\n        }\n    };\n    handleLongLoading = () => {\n        const { devices } = this.props;\n\n        if (devices.size == 0) {\n            const error = <Fragment>\n                <strong>Loading devices takes too long time.</strong>\n                <div>Consider reading <a href=\"https://www.zigbee2mqtt.io/information/frontend.html\">documentation</a></div>\n            </Fragment>;\n            this.setState({ error });\n        }\n    }\n    componentDidMount(): void {\n        setTimeout(this.handleLongLoading, longLoadingTimeout);\n        this.restoreState();\n    }\n\n    static getDerivedStateFromProps(props: Readonly<GlobalState>, state: ZigbeeTableState): Partial<ZigbeeTableState> {\n        const { sortColumn, sortDirection } = state;\n        const { devices, deviceStates } = props;\n        const tableData: ZigbeeTableData[] = [];\n        devices.forEach((device) => {\n            if (device.type !== \"Coordinator\") {\n                tableData.push({\n                    device,\n                    state: deviceStates.get(device.friendly_name)\n\n                });\n            }\n        });\n        return { sortedTableData: orderBy<ZigbeeTableData>(tableData, sortColumn, [sortDirection]) };\n    }\n\n\n    onSortChange = (column: SortColumn | SortColumn[], sortDir: SortDirection = undefined): void => {\n        const { sortColumn } = this.state;\n        let { sortDirection } = this.state;\n\n        if (isEqual(sortColumn, column)) {\n            if (sortDir) {\n                sortDirection = sortDir;\n            } else if (sortDirection == \"asc\") {\n                sortDirection = \"desc\";\n            } else {\n                sortDirection = \"asc\";\n            }\n        }\n\n        this.setState({ sortColumn: column, sortDirection }, this.saveState);\n    };\n\n    renderError() {\n        const { error } = this.state;\n        return (<div className=\"h-100 d-flex justify-content-center align-items-center\">\n            <div className=\"d-flex align-items-center\">\n                {error}\n            </div>\n        </div>);\n    }\n\n    render() {\n        const { error } = this.state;\n        const { devices } = this.props;\n        if (devices.size) {\n            return this.renderDevicesTable();\n        }\n        if (error) {\n            return this.renderError();\n        }\n        return (<div className=\"h-100 d-flex justify-content-center align-items-center\">\n            <div className=\"d-flex align-items-center\">\n                <strong>Loading, please wait.</strong>\n                <div className=\"spinner-border ml-2\" role=\"status\">\n                    <span className=\"sr-only\">Loading...</span>\n                </div>\n            </div>\n        </div>);\n    }\n    lastSeenIsAvaliable(): boolean {\n        const { bridgeInfo } = this.props;\n        return bridgeInfo?.config?.advanced?.elapsed || bridgeInfo?.config?.advanced?.last_seen != \"disable\";\n    }\n\n    renderDevicesTableHeader() {\n        const { sortColumn, sortDirection } = this.state;\n        const { onSortChange } = this;\n        return (\n            <thead>\n                <tr className=\"text-nowrap\">\n                    <th>#</th>\n                    <th>Pic</th>\n                    <ActionTH<SortColumn> className={style[\"action-column\"]} column=\"device.friendly_name\"\n                        currentDirection={sortDirection} current={sortColumn}\n                        onClick={onSortChange}>Friendly name</ActionTH>\n                    <ActionTH<SortColumn> className={cx(style[\"action-column\"])} column=\"device.ieee_address\"\n                        currentDirection={sortDirection} current={sortColumn}\n                        onClick={onSortChange}>IEEE address</ActionTH>\n                    <ActionTH<SortColumn> className={cx(style[\"action-column\"])} column=\"device.definition.vendor\"\n                        currentDirection={sortDirection} current={sortColumn}\n                        onClick={onSortChange} title=\"definition.vendor\">Manufacturer</ActionTH>\n                    <ActionTH<SortColumn> className={style[\"action-column\"]} column=\"device.definition.model\"\n                        currentDirection={sortDirection} current={sortColumn}\n                        onClick={onSortChange}>Model</ActionTH>\n                    <ActionTH<SortColumn> className={style[\"action-column\"]} column=\"state.linkquality\"\n                        currentDirection={sortDirection} current={sortColumn}\n                        onClick={onSortChange}>LQI</ActionTH>\n                    <ActionTH<SortColumn> className={cx(style[\"action-column\"], { 'd-none': !this.lastSeenIsAvaliable() })} column={[\"state.last_seen\", \"state.elapsed\"]}\n                        currentDirection={sortDirection} current={sortColumn}\n                        onClick={onSortChange}>Last seen</ActionTH>\n                    <ActionTH<SortColumn> className={style[\"action-column\"]} column=\"state.battery\"\n                        currentDirection={sortDirection} current={sortColumn}\n                        onClick={onSortChange}>Power</ActionTH>\n                    <th>&nbsp;</th>\n                </tr>\n            </thead>\n        )\n    }\n\n\n    renderDevicesTable() {\n        const { sortedTableData } = this.state;\n        return (\n            <table className={cx(\"table align-middle\", style.adaptive)}>\n                {this.renderDevicesTableHeader()}\n                <tbody>\n                    {sortedTableData.map(({ device, state }, id) =>\n                        <tr key={device.friendly_name} title={state?.update?.state == \"available\" ? 'Avaliable OTA update' : device.definition?.description}>\n                            <td className=\"font-weight-bold\">{id + 1}</td>\n                            <td className={style[\"device-pic\"]}>\n                                <DeviceImage className={cx(style[\"device-image\"])} device={device} deviceStatus={state} />\n                            </td>\n                            <td>\n                                <Link to={genDeviceDetailsLink(device.ieee_address)}>{device.friendly_name}</Link>\n                            </td>\n                            <td title={toHex(device.network_address)}>{device.ieee_address}</td>\n                            <td className={cx(\"text-truncate\", \"text-nowrap\", \"position-relative\")}><VendorLink device={device} /></td>\n                            <td title={device?.definition?.description}><ModelLink device={device} /></td>\n                            <td>{state?.linkquality ?? \"N/A\"}</td>\n                            <td className={cx({ 'd-none': !this.lastSeenIsAvaliable() })}>{lastSeen(state?.last_seen, state?.elapsed)}</td>\n                            <td className=\"text-left\">\n                                <PowerSource source={device.power_source} battery={state?.battery} />\n                            </td>\n                            <td>\n                                <DeviceControlGroup device={device} state={state} />\n                            </td>\n                        </tr>)}\n                </tbody>\n            </table>\n        );\n    }\n}\n\nconst mappedProps = [\"devices\", \"deviceStates\", \"bridgeInfo\"];\nconst ConnectedZigbeePage = connect<{}, ZigbeeTableState, GlobalState, {}>(mappedProps, actions)(ZigbeeTable);\nexport default ConnectedZigbeePage;\n","import React, { Component } from \"react\";\nimport { connect } from \"unistore/react\";\nimport actions from \"../../actions\";\nimport { GlobalState } from \"../../store\";\nimport cx from \"classnames\";\n\n// eslint-disable-next-line react/prefer-stateless-function\nexport class LogsPage extends Component<GlobalState, {}> {\n    render() {\n        const { logs } = this.props;\n        return <div className=\"container-fluid h-100 overflow-auto pt-2\">{\n            logs.map((l, idx) => <div key={idx}>\n                <span className={cx({\n                    'text-danger': l.level === 'error',\n                    'text-warning': l.level === 'warning',\n                    'text-info': l.level === 'info'\n                })} >{l.level.toUpperCase()}</span>:&nbsp;<code>{l.message}</code></div>)\n        }</div>\n    }\n}\n\nconst mappedProps = [\"logs\"];\n\nexport default connect<{}, {}, GlobalState, {}>(mappedProps, actions)(LogsPage);","import React from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport Button from \"./button\";\nimport store from \"../store\";\nimport { download } from \"../utils\";\n\ninterface ErrorBoundaryState {\n    error?: Error;\n}\ntype ErrorBoundaryProps = RouteComponentProps<{}>;\n\nexport default class ErrorBoundary extends React.Component<ErrorBoundaryProps, ErrorBoundaryState> {\n    state: Readonly<ErrorBoundaryState> = {};\n\n    static getDerivedStateFromError(error: Error) {\n        return { hasError: true, error };\n    }\n\n    donwloadState = () => {\n        download(store.getState(), 'state.json');\n    }\n\n    render() {\n        const { error } = this.state;\n        if (error) {\n            return <div className=\"container\">\n                <h1 className=\"text-danger\">Take screenshot of this page and attach it to github issue, additionally <Button<void> className=\"mt-2 btn btn-link\" onClick={() => this.donwloadState()}>download state</Button> and attach to the issue</h1>\n                <h2>{error.name}</h2>\n                <h3>{error.message}</h3>\n                <pre>{error.stack}</pre>\n            </div>\n\n        }\n        return this.props.children;\n    }\n\n    componentDidUpdate(prevProps: ErrorBoundaryProps) {\n        const { location: { pathname } } = this.props;\n        const { location: { pathname: prevPathname } } = prevProps;\n        if (prevPathname !== pathname) {\n            this.setState({ error: null });\n        }\n    }\n}\n\n","import \"./main.css\";\n\nimport \"notyf/notyf.min.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\n\n\nimport React, { Component, FunctionComponent } from 'react';\n\nimport ConnectedMap from \"./components/map\";\n\nimport {\n    Switch,\n    Route,\n    HashRouter\n} from \"react-router-dom\";\n\nimport ConnectedDevicePage from \"./components/device-page\";\nimport TouchlinkPage from \"./components/touchlink-page\";\n\nimport store from \"./store\";\nimport { Provider } from \"unistore/react\";\nimport api from './api';\n\n\nimport ConnectedSettingsPage from \"./components/settings\";\nimport NavBar from \"./components/navbar\";\nimport ConnectedGroupsPage from \"./components/groups\";\nimport ConnectedZigbeePage from \"./components/zigbee\";\nimport LogsPage from \"./components/logs-page\";\nimport ReactDOM from \"react-dom\";\nimport ErrorBoundary from \"./components/ErrorBoundary\";\n\n\nconst ConnectedDevicePageWrap: FunctionComponent<{ dev: string }> = ({ dev }) => (\n    <ConnectedDevicePageWrap dev={dev} />\n);\n\n\napi.connect();\n\n// eslint-disable-next-line react/prefer-stateless-function\nclass Main extends Component {\n    render() {\n        return (\n            <Provider store={store}>\n                <HashRouter>\n                    <NavBar />\n                    <Switch>\n                        <Route path=\"/map\" render={(props) => <ErrorBoundary {...props}><ConnectedMap /></ErrorBoundary>} />\n                        <Route path=\"/device/:dev/:tab?\" render={(props) => <ErrorBoundary {...props}><ConnectedDevicePage /></ErrorBoundary>} />\n                        <Route path=\"/settings/:tab?\" render={(props) => <ErrorBoundary {...props}><ConnectedSettingsPage /></ErrorBoundary>} />\n                        <Route path=\"/groups\" render={(props) => <ErrorBoundary {...props}><ConnectedGroupsPage /></ErrorBoundary>} />\n                        <Route path=\"/logs\" render={(props) => <ErrorBoundary {...props}><LogsPage /></ErrorBoundary>} />\n                        <Route path=\"/touchlink\" render={(props) => <ErrorBoundary {...props}><TouchlinkPage /></ErrorBoundary>} />\n                        <Route path=\"/\" render={(props) => <ErrorBoundary {...props}><ConnectedZigbeePage /></ErrorBoundary>} />\n                    </Switch>\n                </HashRouter>\n            </Provider >\n\n        );\n    }\n}\n\n\nReactDOM.render(<Main />, document.getElementById(\"root\"));\n"],"sourceRoot":""}